[
    {
        "Symbol Mapping": {
            "InThisClub(x)": "x is a member of the club",
            "PerformOftenIn(x, schoolTalentShow)": "x performs often in school talent shows",
            "Attend(x, schoolEvent)": "x attends school events",
            "VeryEngagedWith(x, schoolEvent)": "x is very engaged with school events",
            "InActive(x)": "x is inactive",
            "Disinterested(x)": "x is disinterested",
            "MemberOf(x, community)": "x is a member of the community",
            "Chaperone(x, highSchoolDance)": "x chaperones high school dances",
            "Student(x)": "x is a student",
            "AttendSchool(x)": "x attends the school",
            "YoungChildren(x)": "x is a young child",
            "Teenager(x)": "x is a teenager",
            "WishToFurther(x, academicCareer)": "x wishes to further their academic career",
            "WishToFurther(x, educationalOpportunities)": "x wishes to further their educational opportunities",
            "Perform(x, schoolTalentShow)": "x performs in school talent shows"
        },
        "Premise": {
            "P1": "∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))",
            "P2": "∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))",
            "P3": "∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Student(x) ∧ AttendSchool(x)))",
            "P4": "∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDance))",
            "P5": "∀x (InThisClub(x) ∧ (YoungChildren(x) ∨ Teenager(x)) ∧ WishToFurther(x, academicCareer) ∧ WishToFurther(x, educationalOpportunities)) → (Student(x) ∧ AttendSchool(x))",
            "P6": "InThisClub(bonnie) ∧ ¬((Attend(bonnie, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Student(bonnie) ∧ AttendSchool(bonnie)))"
        },
        "Conclusion": "Perform(bonnie, schoolTalentShow)",
        "Label": "Uncertain",
        "ori_premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "ori_conclusion": "Bonnie performs in school talent shows often.",
        "metadata": "FOLIO_380",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:People in this club who perform in school talent shows often attend and are very engaged with school events.\nFact2:People in this club either perform in school talent shows often or are inactive and disinterested community members.\nFact3:People in this club who chaperone high school dances are not students who attend the school.\nFact4:All people in this club who are inactive and disinterested members of their community chaperone high school dances.\nFact5:All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nFact6:Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nHypothesis:Bonnie performs in school talent shows often."
    },
    {
        "Symbol Mapping": {
            "InThisClub(x)": "x is a member of this club",
            "PerformOftenIn(x, schoolTalentShow)": "x performs often in school talent shows",
            "Attend(x, schoolEvent)": "x attends school events",
            "VeryEngagedWith(x, schoolEvent)": "x is very engaged with school events",
            "InActive(x)": "x is inactive",
            "Disinterested(x)": "x is disinterested",
            "MemberOf(x, community)": "x is a member of the community",
            "Chaperone(x, highSchoolDance)": "x chaperones high school dances",
            "Student(x)": "x is a student",
            "AttendSchool(x)": "x attends the school",
            "YoungChildren(x)": "x is a young child",
            "Teenager(x)": "x is a teenager",
            "WishToFurther(x, academicCareer)": "x wishes to further their academic career",
            "WishToFurther(x, educationalOpportunities)": "x wishes to further their educational opportunities"
        },
        "Premise": {
            "P1": "∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))",
            "P2": "∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))",
            "P3": "∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Student(x) ∧ AttendSchool(x)))",
            "P4": "∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDance))",
            "P5": "∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer) → Student(x) ∧ AttendSchool(x))",
            "P6": "InThisClub(bonnie) ∧ ¬((Attend(bonnie, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Student(bonnie) ∧ AttendSchool(bonnie)))"
        },
        "Conclusion": "¬((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ⊕ Chaperone(bonnie, highSchoolDance)) → (Student(bonnie) ∧ AttendSchool(bonnie)) ⊕ ((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer))",
        "Label": "True",
        "ori_premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "ori_conclusion": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "metadata": "FOLIO_380",
        "proof_label": "__PROVED__",
        "input": "Fact1:People in this club who perform in school talent shows often attend and are very engaged with school events.\nFact2:People in this club either perform in school talent shows often or are inactive and disinterested community members.\nFact3:People in this club who chaperone high school dances are not students who attend the school.\nFact4:All people in this club who are inactive and disinterested members of their community chaperone high school dances.\nFact5:All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nFact6:Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nHypothesis:If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
    },
    {
        "Symbol Mapping": {
            "InThisClub(x)": "x is a member of the club",
            "PerformOftenIn(x, schoolTalentShow)": "x performs often in school talent shows",
            "Attend(x, schoolEvent)": "x attends school events",
            "VeryEngagedWith(x, schoolEvent)": "x is very engaged with school events",
            "InActive(x)": "x is inactive",
            "Disinterested(x)": "x is disinterested",
            "MemberOf(x, community)": "x is a member of the community",
            "Chaperone(x, highSchoolDance)": "x chaperones high school dances",
            "Student(x)": "x is a student",
            "AttendSchool(x)": "x attends the school",
            "YoungChildren(x)": "x is a young child",
            "Teenager(x)": "x is a teenager",
            "WishToFurther(x, academicCareer)": "x wishes to further their academic career",
            "Perform(x, schoolTalentShow)": "x performs in school talent shows"
        },
        "Premise": {
            "P1": "∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))",
            "P2": "∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))",
            "P3": "∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Student(x) ∧ AttendSchool(x)))",
            "P4": "∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDance))",
            "P5": "∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer) → Student(x) ∧ AttendSchool(x))",
            "P6": "InThisClub(bonnie) ∧ ¬((Attend(bonnie, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Student(bonnie) ∧ AttendSchool(bonnie)))"
        },
        "Conclusion": "(Chaperone(bonnie, highSchoolDance) ⊕ Perform(bonnie, schoolTalentShow)) → ((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer) ∧ (InActive(bonnie) ∧ Disinterested(bonnie) ∧ MemberOf(bonnie, community)))",
        "Label": "False",
        "ori_premises": [
            "People in this club who perform in school talent shows often attend and are very engaged with school events.",
            "People in this club either perform in school talent shows often or are inactive and disinterested community members.",
            "People in this club who chaperone high school dances are not students who attend the school.",
            "All people in this club who are inactive and disinterested members of their community chaperone high school dances.",
            "All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. ",
            "Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."
        ],
        "ori_conclusion": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "metadata": "FOLIO_380",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:People in this club who perform in school talent shows often attend and are very engaged with school events.\nFact2:People in this club either perform in school talent shows often or are inactive and disinterested community members.\nFact3:People in this club who chaperone high school dances are not students who attend the school.\nFact4:All people in this club who are inactive and disinterested members of their community chaperone high school dances.\nFact5:All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nFact6:Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\nHypothesis:If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
    },
    {
        "Symbol Mapping": {
            "Employee(x)": "x is an employee",
            "Schedule(x, meeting, customers)": "x schedules a meeting with their customers",
            "AppearIn(x, company)": "x appears in the company building",
            "HasLunch(x, company)": "x has lunch in the company building",
            "HasLunch(x, home)": "x has lunch at home",
            "Work(x, home)": "x works remotely from home",
            "In(x, homecountry)": "x is in their home country",
            "Manager(x)": "x is a manager",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive OR (either...or, but not both)",
            "∀x": "For all individuals x"
        },
        "Premise": {
            "P1": "∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))",
            "P2": "∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))",
            "P3": "∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))",
            "P4": "∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))",
            "P5": "∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))",
            "P6": "∀x (Manager(x) → ¬Work(x, home))",
            "P7": "¬(Manager(james) ⊕ AppearIn(james, company))"
        },
        "Conclusion": "HasLunch(james, company)",
        "Label": "Uncertain",
        "ori_premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "ori_conclusion": "James has lunch in the company.",
        "metadata": "FOLIO_426",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All employees who schedule a meeting with their customers will go to the company building today. \nFact2:Everyone who has lunch in the company building schedules meetings with their customers. \nFact3:Employees have lunch either in the company building or at home.\nFact4:If an employee has lunch at home, they are working remotely from home.\nFact5:All employees who are in other countries work remotely from home. \nFact6:No managers work remotely from home. \nFact7:James will appear in the company today if and only if he is a manager.\nHypothesis:James has lunch in the company."
    },
    {
        "Symbol Mapping": {
            "Employee(x)": "x is an employee",
            "Schedule(x, meeting, customers)": "x schedules a meeting with their customers",
            "AppearIn(x, company)": "x appears in the company building",
            "HasLunch(x, company)": "x has lunch in the company building",
            "HasLunch(x, home)": "x has lunch at home",
            "Work(x, home)": "x works remotely from home",
            "In(x, homecountry)": "x is in their home country",
            "Manager(x)": "x is a manager",
            "¬": "Logical negation (NOT)",
            "⊕": "Exclusive OR (XOR), true if exactly one of the conditions is true",
            "∀x": "Universal quantifier, meaning 'for all x'",
            "¬HasLunch(james, company)": "James does not have lunch in the company",
            "¬(Manager(james) ⊕ AppearIn(james, company))": "James will appear in the company today if and only if he is a manager"
        },
        "Premise": {
            "P1": "∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))",
            "P2": "∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))",
            "P3": "∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))",
            "P4": "∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))",
            "P5": "∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))",
            "P6": "∀x (Manager(x) → ¬Work(x, home))",
            "P7": "¬(Manager(james) ⊕ AppearIn(james, company))"
        },
        "Conclusion": "¬HasLunch(james, company)",
        "Label": "Uncertain",
        "ori_premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "ori_conclusion": "James does not have lunch in the company.",
        "metadata": "FOLIO_426",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All employees who schedule a meeting with their customers will go to the company building today. \nFact2:Everyone who has lunch in the company building schedules meetings with their customers. \nFact3:Employees have lunch either in the company building or at home.\nFact4:If an employee has lunch at home, they are working remotely from home.\nFact5:All employees who are in other countries work remotely from home. \nFact6:No managers work remotely from home. \nFact7:James will appear in the company today if and only if he is a manager.\nHypothesis:James does not have lunch in the company."
    },
    {
        "Symbol Mapping": {
            "Employee(x)": "x is an employee",
            "Schedule(x, meeting, customers)": "x schedules a meeting with their customers",
            "AppearIn(x, company)": "x appears in the company building",
            "HasLunch(x, company)": "x has lunch in the company building",
            "HasLunch(x, home)": "x has lunch at home",
            "Work(x, home)": "x works remotely from home",
            "In(x, homecountry)": "x is in their home country",
            "Manager(x)": "x is a manager",
            "Manager(james)": "James is a manager",
            "AppearIn(james, company)": "James appears in the company building"
        },
        "Premise": {
            "P1": "∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))",
            "P2": "∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))",
            "P3": "∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))",
            "P4": "∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))",
            "P5": "∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))",
            "P6": "∀x (Manager(x) → ¬Work(x, home))",
            "P7": "¬(Manager(james) ⊕ AppearIn(james, company))"
        },
        "Conclusion": "Manager(james) → ¬Work(james, home)",
        "Label": "True",
        "ori_premises": [
            "All employees who schedule a meeting with their customers will go to the company building today. ",
            "Everyone who has lunch in the company building schedules meetings with their customers. ",
            "Employees have lunch either in the company building or at home.",
            "If an employee has lunch at home, they are working remotely from home.",
            "All employees who are in other countries work remotely from home. ",
            "No managers work remotely from home. ",
            "James will appear in the company today if and only if he is a manager."
        ],
        "ori_conclusion": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
        "metadata": "FOLIO_426",
        "proof_label": "__PROVED__",
        "input": "Fact1:All employees who schedule a meeting with their customers will go to the company building today. \nFact2:Everyone who has lunch in the company building schedules meetings with their customers. \nFact3:Employees have lunch either in the company building or at home.\nFact4:If an employee has lunch at home, they are working remotely from home.\nFact5:All employees who are in other countries work remotely from home. \nFact6:No managers work remotely from home. \nFact7:James will appear in the company today if and only if he is a manager.\nHypothesis:If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]"
    },
    {
        "Symbol Mapping": {
            "OccurIn(virus, x)": "The virus occurs in entity x",
            "Get(x, virus)": "Entity x gets the virus",
            "Animal(x)": "Entity x is an animal",
            "Human(x)": "Entity x is a human",
            "Mammal(x)": "Entity x is a mammal",
            "SymptomOf(x, virus)": "Entity x is a symptom of the virus",
            "Fever(x)": "Entity x has a fever",
            "Headache(x)": "Entity x has a headache",
            "MusclePain(x)": "Entity x has muscle pain",
            "Tired(x)": "Entity x is tired",
            "Feel(x, tired)": "Entity x feels tired",
            "Get(x, flu)": "Entity x gets the flu"
        },
        "Premise": {
            "P1": "∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))",
            "P2": "∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))",
            "P3": "∀x (Human(x) → Mammal(x))",
            "P4": "∀x (Mammal(x) → Animal(x))",
            "P5": "∃x (SymptomOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))",
            "P6": "∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))"
        },
        "Conclusion": "∃x (Animal(x))",
        "Label": "True",
        "ori_premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "ori_conclusion": "There is an animal.",
        "metadata": "FOLIO_198",
        "proof_label": "__PROVED__",
        "input": "Fact1:When the Monkeypox virus occurs in a being, it may get Monkeypox. \nFact2:Monkeypox virus can occur in certain animals.\nFact3:Humans are mammals.\nFact4:Mammals are animals.\nFact5:Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nFact6:People feel tired when they get the flu.\nHypothesis:There is an animal."
    },
    {
        "Symbol Mapping": {
            "OccurIn(x, y)": "The entity y occurs in the entity x",
            "Get(x, y)": "The entity x gets the entity y (e.g., a disease)",
            "Animal(x)": "x is an animal",
            "Human(x)": "x is a human",
            "Mammal(x)": "x is a mammal",
            "SymptomOf(x, y)": "x is a symptom of y (e.g., a disease)",
            "Fever(x)": "x has a fever",
            "Headache(x)": "x has a headache",
            "MusclePain(x)": "x has muscle pain",
            "Tired(x)": "x is tired",
            "Feel(x, y)": "x feels y (e.g., a state or condition)",
            "flu": "The flu (a disease)",
            "monkeypoxVirus": "The Monkeypox virus (a disease)"
        },
        "Premise": {
            "P1": "∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))",
            "P2": "∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))",
            "P3": "∀x (Human(x) → Mammal(x))",
            "P4": "∀x (Mammal(x) → Animal(x))",
            "P5": "∃x (SymptomOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))",
            "P6": "∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))"
        },
        "Conclusion": "∀x (Human(x) → ¬Get(x, flu))",
        "Label": "Uncertain",
        "ori_premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "ori_conclusion": "No one gets the flu.",
        "metadata": "FOLIO_198",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:When the Monkeypox virus occurs in a being, it may get Monkeypox. \nFact2:Monkeypox virus can occur in certain animals.\nFact3:Humans are mammals.\nFact4:Mammals are animals.\nFact5:Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nFact6:People feel tired when they get the flu.\nHypothesis:No one gets the flu."
    },
    {
        "Symbol Mapping": {
            "OccurIn(virus, x)": "The virus occurs in entity x",
            "Get(x, virus)": "Entity x gets the virus",
            "Animal(x)": "Entity x is an animal",
            "Human(x)": "Entity x is a human",
            "Mammal(x)": "Entity x is a mammal",
            "SymptomOf(x, virus)": "Entity x is a symptom of the virus",
            "Fever(x)": "Entity x is the symptom of fever",
            "Headache(x)": "Entity x is the symptom of headache",
            "MusclePain(x)": "Entity x is the symptom of muscle pain",
            "Tired(x)": "Entity x is the symptom of tiredness",
            "Coughing(x)": "Entity x is the symptom of coughing",
            "Feel(x, tired)": "Entity x feels tired",
            "Get(x, flu)": "Entity x gets the flu"
        },
        "Premise": {
            "P1": "∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))",
            "P2": "∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))",
            "P3": "∀x (Human(x) → Mammal(x))",
            "P4": "∀x (Mammal(x) → Animal(x))",
            "P5": "∃x (SymptomOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))",
            "P6": "∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))"
        },
        "Conclusion": "∃x (SymptomOf(x, monkeypoxVirus) ∧ Coughing(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "When the Monkeypox virus occurs in a being, it may get Monkeypox. ",
            "Monkeypox virus can occur in certain animals.",
            "Humans are mammals.",
            "Mammals are animals.",
            "Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. ",
            "People feel tired when they get the flu."
        ],
        "ori_conclusion": "Symptoms of Monkeypox include coughing.",
        "metadata": "FOLIO_198",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:When the Monkeypox virus occurs in a being, it may get Monkeypox. \nFact2:Monkeypox virus can occur in certain animals.\nFact3:Humans are mammals.\nFact4:Mammals are animals.\nFact5:Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nFact6:People feel tired when they get the flu.\nHypothesis:Symptoms of Monkeypox include coughing."
    },
    {
        "Symbol Mapping": {
            "WildTurkey(x)": "x is a wild turkey",
            "EasternWildTurkey(x)": "x is an Eastern wild turkey",
            "OsceolaWildTurkey(x)": "x is an Osceola wild turkey",
            "GouldsWildTurkey(x)": "x is a Gould's wild turkey",
            "MerriamsWildTurkey(x)": "x is a Merriam's wild turkey",
            "RiograndeWildTurkey(x)": "x is a Rio Grande wild turkey",
            "OcellatedWildTurkey(x)": "x is an Ocellated wild turkey"
        },
        "Premise": {
            "P1": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))",
            "P2": "¬(EasternWildTurkey(tom))",
            "P3": "¬(OsceolaWildTurkey(tom))",
            "P4": "¬(GouldsWildTurkey(tom))",
            "P5": "¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))",
            "P6": "WildTurkey(tom)"
        },
        "Conclusion": "OcellatedWildTurkey(tom)",
        "Label": "True",
        "ori_premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "ori_conclusion": "Tom is an Ocellated wild turkey.",
        "metadata": "FOLIO_0",
        "proof_label": "__PROVED__",
        "input": "Fact1:There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nFact2:Tom is not an Eastern wild turkey.\nFact3:Tom is not an Osceola wild turkey.\nFact4:Tom is not a Gould's wild turkey.\nFact5:Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nFact6:Tom is a wild turkey.\nHypothesis:Tom is an Ocellated wild turkey."
    },
    {
        "Symbol Mapping": {
            "WildTurkey(x)": "x is a wild turkey",
            "EasternWildTurkey(x)": "x is an Eastern wild turkey",
            "OsceolaWildTurkey(x)": "x is an Osceola wild turkey",
            "GouldsWildTurkey(x)": "x is a Gould's wild turkey",
            "MerriamsWildTurkey(x)": "x is a Merriam's wild turkey",
            "RiograndeWildTurkey(x)": "x is a Rio Grande wild turkey",
            "OcellatedWildTurkey(x)": "x is an Ocellated wild turkey",
            "tom": "A specific individual named Tom"
        },
        "Premise": {
            "P1": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))",
            "P2": "¬(EasternWildTurkey(tom))",
            "P3": "¬(OsceolaWildTurkey(tom))",
            "P4": "¬(GouldsWildTurkey(tom))",
            "P5": "¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))",
            "P6": "WildTurkey(tom)"
        },
        "Conclusion": "EasternWildTurkey(tom)",
        "Label": "False",
        "ori_premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "ori_conclusion": "Tom is an Eastern wild turkey.",
        "metadata": "FOLIO_0",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nFact2:Tom is not an Eastern wild turkey.\nFact3:Tom is not an Osceola wild turkey.\nFact4:Tom is not a Gould's wild turkey.\nFact5:Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nFact6:Tom is a wild turkey.\nHypothesis:Tom is an Eastern wild turkey."
    },
    {
        "Symbol Mapping": {
            "WildTurkey(x)": "x is a wild turkey",
            "EasternWildTurkey(x)": "x is an Eastern wild turkey",
            "OsceolaWildTurkey(x)": "x is an Osceola wild turkey",
            "GouldsWildTurkey(x)": "x is a Gould's wild turkey",
            "MerriamsWildTurkey(x)": "x is a Merriam's wild turkey",
            "RiograndeWildTurkey(x)": "x is a Rio Grande wild turkey",
            "OcellatedWildTurkey(x)": "x is an Ocellated wild turkey"
        },
        "Premise": {
            "P1": "∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))",
            "P2": "¬(EasternWildTurkey(tom))",
            "P3": "¬(OsceolaWildTurkey(tom))",
            "P4": "¬(GouldsWildTurkey(tom))",
            "P5": "¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))",
            "P6": "WildTurkey(tom)"
        },
        "Conclusion": "WildTurkey(joey)",
        "Label": "Uncertain",
        "ori_premises": [
            "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.",
            "Tom is not an Eastern wild turkey.",
            "Tom is not an Osceola wild turkey.",
            "Tom is not a Gould's wild turkey.",
            "Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.",
            "Tom is a wild turkey."
        ],
        "ori_conclusion": "Joey is a wild turkey.",
        "metadata": "FOLIO_0",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nFact2:Tom is not an Eastern wild turkey.\nFact3:Tom is not an Osceola wild turkey.\nFact4:Tom is not a Gould's wild turkey.\nFact5:Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nFact6:Tom is a wild turkey.\nHypothesis:Joey is a wild turkey."
    },
    {
        "Symbol Mapping": {
            "Game(x)": "x is a game",
            "Japanese(x)": "x is Japanese",
            "VideoGameCompany(x)": "x is a video game company",
            "Created(x, y)": "x created y",
            "InTop10(x)": "x is in the Top 10 list",
            "GreaterThan(x, y)": "x is greater than y",
            "CopiesSold(x, y)": "x sold y copies",
            "Top10(x)": "x is in the Top 10 list"
        },
        "Premise": {
            "P1": "Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))",
            "P2": "∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))",
            "P3": "∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x))",
            "P4": "∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))"
        },
        "Conclusion": "Top10(thelegendofzelda)",
        "Label": "True",
        "ori_premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "ori_conclusion": "The Legend of Zelda is on the Top 10 list.",
        "metadata": "FOLIO_20",
        "proof_label": "__PROVED__",
        "input": "Fact1:A Japanese game company created the game the Legend of Zelda.\nFact2:All games on the Top 10 list are made by Japanese game companies.\nFact3:If a game sells more than one million copies, then it will be included in the Top 10 list.\nFact4:The Legend of Zelda sold more than one million copies.\nHypothesis:The Legend of Zelda is on the Top 10 list."
    },
    {
        "Symbol Mapping": {
            "Game(x)": "x is a game",
            "InTop10(x)": "x is in the Top 10 list",
            "Created(x, y)": "x created y",
            "Japanese(x)": "x is Japanese",
            "VideoGameCompany(x)": "x is a video game company",
            "GreaterThan(x, y)": "x is greater than y",
            "CopiesSold(x, y)": "x sold y copies",
            "Top10(x)": "x is included in the Top 10 list"
        },
        "Premise": {
            "P1": "Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))",
            "P2": "∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))",
            "P3": "∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x))",
            "P4": "∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))"
        },
        "Conclusion": "∃x(Created(x, fifa22) ∧ Japanese(x) ∧ VideoGameCompany(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "ori_conclusion": "FIFA 22 is made by a Japanese video game company.",
        "metadata": "FOLIO_20",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:A Japanese game company created the game the Legend of Zelda.\nFact2:All games on the Top 10 list are made by Japanese game companies.\nFact3:If a game sells more than one million copies, then it will be included in the Top 10 list.\nFact4:The Legend of Zelda sold more than one million copies.\nHypothesis:FIFA 22 is made by a Japanese video game company."
    },
    {
        "Symbol Mapping": {
            "Game(x)": "x is a game",
            "Japanese(x)": "x is Japanese",
            "VideoGameCompany(x)": "x is a video game company",
            "Created(x, y)": "x created y",
            "InTop10(x)": "x is in the Top 10 list",
            "GreaterThan(x, y)": "x is greater than y",
            "CopiesSold(x, y)": "x sold y copies",
            "Top10(x)": "x is in the Top 10 list"
        },
        "Premise": {
            "P1": "Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))",
            "P2": "∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))",
            "P3": "∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x))",
            "P4": "∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))"
        },
        "Conclusion": "¬Top10(thelegendofzelda)",
        "Label": "False",
        "ori_premises": [
            "A Japanese game company created the game the Legend of Zelda.",
            "All games on the Top 10 list are made by Japanese game companies.",
            "If a game sells more than one million copies, then it will be included in the Top 10 list.",
            "The Legend of Zelda sold more than one million copies."
        ],
        "ori_conclusion": "The Legend of Zelda is not on the Top 10 list.",
        "metadata": "FOLIO_20",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:A Japanese game company created the game the Legend of Zelda.\nFact2:All games on the Top 10 list are made by Japanese game companies.\nFact3:If a game sells more than one million copies, then it will be included in the Top 10 list.\nFact4:The Legend of Zelda sold more than one million copies.\nHypothesis:The Legend of Zelda is not on the Top 10 list."
    },
    {
        "Symbol Mapping": {
            "Square(x)": "x is a square",
            "FourSided(x)": "x is four-sided",
            "Shape(x)": "x is a shape"
        },
        "Premise": {
            "P1": "∀x (Square(x) → FourSided(x))",
            "P2": "∀x (FourSided(x) → Shape(x))"
        },
        "Conclusion": "∀x (Square(x) → Shape(x))",
        "Label": "True",
        "ori_premises": [
            "All squares are four-sided.",
            "All four-sided things are shapes. "
        ],
        "ori_conclusion": "All squares are shapes.",
        "metadata": "FOLIO_282",
        "proof_label": "__PROVED__",
        "input": "Fact1:All squares are four-sided.\nFact2:All four-sided things are shapes. \nHypothesis:All squares are shapes."
    },
    {
        "Symbol Mapping": {
            "Rabbit(x)": "x is a rabbit",
            "Turtle(x)": "x is a turtle",
            "Squirrel(x)": "x is a squirrel",
            "CanBeSpottedNear(x, campus)": "x can be spotted near the campus",
            "Cute(x)": "x is cute",
            "Skittish(x)": "x is skittish",
            "Calm(x)": "x is calm",
            "rockie": "A specific entity named Rockie"
        },
        "Premise": {
            "P1": "∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))",
            "P2": "∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))",
            "P3": "∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))",
            "P4": "∀x (Skittish(x) → ¬Calm(x))",
            "P5": "∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))",
            "P6": "CanBeSpottedNear(rockie, campus) ∧ Calm(rockie)"
        },
        "Conclusion": "Turtle(rockie)",
        "Label": "Uncertain",
        "ori_premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "ori_conclusion": "Rockie is a turtle.",
        "metadata": "FOLIO_471",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All rabbits that can be spotted near the campus are cute. \nFact2:Some turtles can be spotted near the campus. \nFact3:The only animals that can be spotted near the campus are rabbits and squirrels.\nFact4:If something is skittish, then it is not calm.\nFact5:All the squirrels that can be spotted near the campus are skittish.\nFact6:Rockie can be spotted near the campus, and it is calm.\nHypothesis:Rockie is a turtle."
    },
    {
        "Symbol Mapping": {
            "Rabbit(x)": "x is a rabbit",
            "CanBeSpottedNear(x, campus)": "x can be spotted near the campus",
            "Cute(x)": "x is cute",
            "Turtle(x)": "x is a turtle",
            "Squirrel(x)": "x is a squirrel",
            "Skittish(x)": "x is skittish",
            "Calm(x)": "x is calm",
            "rockie": "A specific individual named Rockie"
        },
        "Premise": {
            "P1": "∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))",
            "P2": "∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))",
            "P3": "∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))",
            "P4": "∀x (Skittish(x) → ¬Calm(x))",
            "P5": "∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))",
            "P6": "CanBeSpottedNear(rockie, campus) ∧ Calm(rockie)"
        },
        "Conclusion": "¬Turtle(rockie)",
        "Label": "Uncertain",
        "ori_premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "ori_conclusion": "Rockie is not a turtle.",
        "metadata": "FOLIO_471",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All rabbits that can be spotted near the campus are cute. \nFact2:Some turtles can be spotted near the campus. \nFact3:The only animals that can be spotted near the campus are rabbits and squirrels.\nFact4:If something is skittish, then it is not calm.\nFact5:All the squirrels that can be spotted near the campus are skittish.\nFact6:Rockie can be spotted near the campus, and it is calm.\nHypothesis:Rockie is not a turtle."
    },
    {
        "Symbol Mapping": {
            "Rabbit(x)": "x is a rabbit",
            "CanBeSpottedNear(x, campus)": "x can be spotted near the campus",
            "Cute(x)": "x is cute",
            "Turtle(x)": "x is a turtle",
            "Squirrel(x)": "x is a squirrel",
            "Skittish(x)": "x is skittish",
            "Calm(x)": "x is calm",
            "rockie": "A specific entity named Rockie"
        },
        "Premise": {
            "P1": "∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))",
            "P2": "∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))",
            "P3": "∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))",
            "P4": "∀x (Skittish(x) → ¬Calm(x))",
            "P5": "∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))",
            "P6": "CanBeSpottedNear(rockie, campus) ∧ Calm(rockie)"
        },
        "Conclusion": "Turtle(rockie) ∨ Cute(rockie)",
        "Label": "True",
        "ori_premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "ori_conclusion": "Rockie is a turtle or cute.",
        "metadata": "FOLIO_471",
        "proof_label": "__PROVED__",
        "input": "Fact1:All rabbits that can be spotted near the campus are cute. \nFact2:Some turtles can be spotted near the campus. \nFact3:The only animals that can be spotted near the campus are rabbits and squirrels.\nFact4:If something is skittish, then it is not calm.\nFact5:All the squirrels that can be spotted near the campus are skittish.\nFact6:Rockie can be spotted near the campus, and it is calm.\nHypothesis:Rockie is a turtle or cute."
    },
    {
        "Symbol Mapping": {
            "Rabbit(x)": "x is a rabbit",
            "CanBeSpottedNear(x, campus)": "x can be spotted near the campus",
            "Cute(x)": "x is cute",
            "Turtle(x)": "x is a turtle",
            "Squirrel(x)": "x is a squirrel",
            "Skittish(x)": "x is skittish",
            "Calm(x)": "x is calm",
            "CanBeSpottedNear(rockie, campus)": "Rockie can be spotted near the campus",
            "Calm(rockie)": "Rockie is calm",
            "¬(Turtle(rockie) ∧ Squirrel(rockie))": "Rockie is not both a turtle and a squirrel",
            "Cute(rockie)": "Rockie is cute",
            "Skittish(rockie)": "Rockie is skittish"
        },
        "Premise": {
            "P1": "∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))",
            "P2": "∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))",
            "P3": "∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))",
            "P4": "∀x (Skittish(x) → ¬Calm(x))",
            "P5": "∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))",
            "P6": "CanBeSpottedNear(rockie, campus) ∧ Calm(rockie)"
        },
        "Conclusion": "¬(Turtle(rockie) ∧ Squirrel(rockie)) → Cute(rockie) ⊕ Skittish(rockie)",
        "Label": "True",
        "ori_premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "ori_conclusion": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
        "metadata": "FOLIO_471",
        "proof_label": "__PROVED__",
        "input": "Fact1:All rabbits that can be spotted near the campus are cute. \nFact2:Some turtles can be spotted near the campus. \nFact3:The only animals that can be spotted near the campus are rabbits and squirrels.\nFact4:If something is skittish, then it is not calm.\nFact5:All the squirrels that can be spotted near the campus are skittish.\nFact6:Rockie can be spotted near the campus, and it is calm.\nHypothesis:If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish."
    },
    {
        "Symbol Mapping": {
            "Rabbit(x)": "x is a rabbit",
            "CanBeSpottedNear(x, y)": "x can be spotted near y",
            "Cute(x)": "x is cute",
            "Turtle(x)": "x is a turtle",
            "Squirrel(x)": "x is a squirrel",
            "Skittish(x)": "x is skittish",
            "Calm(x)": "x is calm",
            "rockie": "A specific entity named Rockie"
        },
        "Premise": {
            "P1": "∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))",
            "P2": "∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))",
            "P3": "∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))",
            "P4": "∀x (Skittish(x) → ¬Calm(x))",
            "P5": "∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))",
            "P6": "CanBeSpottedNear(rockie, campus) ∧ Calm(rockie)"
        },
        "Conclusion": "Cute(rockie) ∧ Calm(rockie) → Turtle(rockie) ∧ Skittish(rockie)",
        "Label": "False",
        "ori_premises": [
            "All rabbits that can be spotted near the campus are cute. ",
            "Some turtles can be spotted near the campus. ",
            "The only animals that can be spotted near the campus are rabbits and squirrels.",
            "If something is skittish, then it is not calm.",
            "All the squirrels that can be spotted near the campus are skittish.",
            "Rockie can be spotted near the campus, and it is calm."
        ],
        "ori_conclusion": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
        "metadata": "FOLIO_471",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All rabbits that can be spotted near the campus are cute. \nFact2:Some turtles can be spotted near the campus. \nFact3:The only animals that can be spotted near the campus are rabbits and squirrels.\nFact4:If something is skittish, then it is not calm.\nFact5:All the squirrels that can be spotted near the campus are skittish.\nFact6:Rockie can be spotted near the campus, and it is calm.\nHypothesis:If Rockie is cute and calm, then Rockie is a skittish turtle."
    },
    {
        "Symbol Mapping": {
            "NetflixShow(x)": "x is a Netflix show",
            "Popular(x)": "x is popular",
            "BingeWatch(karen, x)": "Karen binge-watches x",
            "Download(karen, x)": "Karen downloads x",
            "ShareWith(karen, x, lisa)": "Karen shares x with Lisa",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "→": "Logical implication (if...then)",
            "↔": "Logical biconditional (if and only if)",
            "∀x": "Universal quantifier (for all x)"
        },
        "Premise": {
            "P1": "NetflixShow(strangerThings) ∧ Popular(strangerThings)",
            "P2": "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))",
            "P3": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))",
            "P4": "¬Download(karen, blackMirror)",
            "P5": "NetflixShow(blackMirror)",
            "P6": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))"
        },
        "Conclusion": "ShareWith(karen, strangerThings, lisa)",
        "Label": "True",
        "ori_premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "ori_conclusion": "Karen will share \"Stranger Things\" with Lisa.",
        "metadata": "FOLIO_184",
        "proof_label": "__PROVED__",
        "input": "Fact1:\"Stranger Things\" is a popular Netflix show.\nFact2:If a Netflix show is popular, Karen will binge-watch it.\nFact3:If and only if Karen binge-watches a Netflix show, she will download it.\nFact4:Karen does not download \"Black Mirror.\"\nFact5:\"Black Mirror\" is a Netflix show.\nFact6:If Karen binge-watches a Netflix show, she will share it with Lisa.\nHypothesis:Karen will share \"Stranger Things\" with Lisa."
    },
    {
        "Symbol Mapping": {
            "NetflixShow(x)": "x is a Netflix show",
            "Popular(x)": "x is popular",
            "BingeWatch(karen, x)": "Karen binge-watches x",
            "Download(karen, x)": "Karen downloads x",
            "ShareWith(karen, x, lisa)": "Karen shares x with Lisa"
        },
        "Premise": {
            "P1": "NetflixShow(strangerThings) ∧ Popular(strangerThings)",
            "P2": "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))",
            "P3": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))",
            "P4": "¬Download(karen, blackMirror)",
            "P5": "NetflixShow(blackMirror)",
            "P6": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))"
        },
        "Conclusion": "Popular(blackMirror)",
        "Label": "False",
        "ori_premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "ori_conclusion": "\"Black Mirror\" is popular.",
        "metadata": "FOLIO_184",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:\"Stranger Things\" is a popular Netflix show.\nFact2:If a Netflix show is popular, Karen will binge-watch it.\nFact3:If and only if Karen binge-watches a Netflix show, she will download it.\nFact4:Karen does not download \"Black Mirror.\"\nFact5:\"Black Mirror\" is a Netflix show.\nFact6:If Karen binge-watches a Netflix show, she will share it with Lisa.\nHypothesis:\"Black Mirror\" is popular."
    },
    {
        "Symbol Mapping": {
            "NetflixShow(x)": "x is a Netflix show",
            "Popular(x)": "x is popular",
            "BingeWatch(karen, x)": "Karen binge-watches x",
            "Download(karen, x)": "Karen downloads x",
            "ShareWith(karen, x, lisa)": "Karen shares x with Lisa"
        },
        "Premise": {
            "P1": "NetflixShow(strangerThings) ∧ Popular(strangerThings)",
            "P2": "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))",
            "P3": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))",
            "P4": "¬Download(karen, blackMirror)",
            "P5": "NetflixShow(blackMirror)",
            "P6": "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))"
        },
        "Conclusion": "ShareWith(karen, blackMirror, lisa)",
        "Label": "Uncertain",
        "ori_premises": [
            "\"Stranger Things\" is a popular Netflix show.",
            "If a Netflix show is popular, Karen will binge-watch it.",
            "If and only if Karen binge-watches a Netflix show, she will download it.",
            "Karen does not download \"Black Mirror.\"",
            "\"Black Mirror\" is a Netflix show.",
            "If Karen binge-watches a Netflix show, she will share it with Lisa."
        ],
        "ori_conclusion": "Karen will share \"Black Mirror\" with Lisa.",
        "metadata": "FOLIO_184",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:\"Stranger Things\" is a popular Netflix show.\nFact2:If a Netflix show is popular, Karen will binge-watch it.\nFact3:If and only if Karen binge-watches a Netflix show, she will download it.\nFact4:Karen does not download \"Black Mirror.\"\nFact5:\"Black Mirror\" is a Netflix show.\nFact6:If Karen binge-watches a Netflix show, she will share it with Lisa.\nHypothesis:Karen will share \"Black Mirror\" with Lisa."
    },
    {
        "Symbol Mapping": {
            "CapitalOf(x, y)": "x is the capital of y",
            "WorldsMostPopulousNation(x)": "x is the world's most populous nation",
            "LocatedIn(x, y)": "x is located in y",
            "Hosted(x, y)": "x hosted event y",
            "University(x)": "x is a university",
            "InBeijing(x)": "x is located in Beijing",
            "ConsistentlyRankAmongTheBestIn(x, y)": "x consistently ranks among the best in y"
        },
        "Premise": {
            "P1": "CapitalOf(beijing, peoplesRepublicOfChina)",
            "P2": "∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))",
            "P3": "LocatedIn(beijing, northernChina)",
            "P4": "Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)",
            "P5": "Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames) ∧ Hosted(beijing, winterParalympicGames)",
            "P6": "∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))"
        },
        "Conclusion": "Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics)",
        "Label": "True",
        "ori_premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "ori_conclusion": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
        "metadata": "FOLIO_232",
        "proof_label": "__PROVED__",
        "input": "Fact1:Beijing is the capital of the People's Republic of China. \nFact2:Beijing is the capital city of the world's most populous nation.\nFact3:Beijing is located in Northern China.\nFact4:Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFact5:Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nFact6:Many of Beijing's 91 universities consistently rank among the best universities in the world.\nHypothesis:Beijing hosted both the 2008 Summer Olympics and the Winter Olympics."
    },
    {
        "Symbol Mapping": {
            "CapitalOf(x, y)": "x is the capital of y",
            "WorldsMostPopulousNation(x)": "x is the world's most populous nation",
            "LocatedIn(x, y)": "x is located in y",
            "Hosted(x, y)": "x hosted event y",
            "University(x)": "x is a university",
            "InBeijing(x)": "x is located in Beijing",
            "ConsistentlyRankAmongTheBestIn(x, y)": "x consistently ranks among the best in y"
        },
        "Premise": {
            "P1": "CapitalOf(beijing, peoplesRepublicOfChina)",
            "P2": "∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))",
            "P3": "LocatedIn(beijing, northernChina)",
            "P4": "Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)",
            "P5": "Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames) ∧ Hosted(beijing, winterParalympicGames)",
            "P6": "∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))"
        },
        "Conclusion": "LocatedIn(beijing, southernChina)",
        "Label": "Uncertain",
        "ori_premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "ori_conclusion": "Beijing is located in southern China.",
        "metadata": "FOLIO_232",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Beijing is the capital of the People's Republic of China. \nFact2:Beijing is the capital city of the world's most populous nation.\nFact3:Beijing is located in Northern China.\nFact4:Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFact5:Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nFact6:Many of Beijing's 91 universities consistently rank among the best universities in the world.\nHypothesis:Beijing is located in southern China."
    },
    {
        "Symbol Mapping": {
            "CapitalOf(x, y)": "x is the capital of y",
            "WorldsMostPopulousNation(x)": "x is the world's most populous nation",
            "LocatedIn(x, y)": "x is located in y",
            "Hosted(x, y)": "x hosted event y",
            "University(x)": "x is a university",
            "InBeijing(x)": "x is located in Beijing",
            "ConsistentlyRankAmongTheBestIn(x, y)": "x consistently ranks among the best in y",
            "SecondLargestChineseCity(x)": "x is the second largest Chinese city"
        },
        "Premise": {
            "P1": "CapitalOf(beijing, peoplesRepublicOfChina)",
            "P2": "∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))",
            "P3": "LocatedIn(beijing, northernChina)",
            "P4": "Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)",
            "P5": "Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames) ∧ Hosted(beijing, winterParalympicGames)",
            "P6": "∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))"
        },
        "Conclusion": "SecondLargestChineseCity(beijing)",
        "Label": "Uncertain",
        "ori_premises": [
            "Beijing is the capital of the People's Republic of China. ",
            "Beijing is the capital city of the world's most populous nation.",
            "Beijing is located in Northern China.",
            "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.",
            "Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.",
            "Many of Beijing's 91 universities consistently rank among the best universities in the world."
        ],
        "ori_conclusion": "Beijing is the second largest Chinese city.",
        "metadata": "FOLIO_232",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Beijing is the capital of the People's Republic of China. \nFact2:Beijing is the capital city of the world's most populous nation.\nFact3:Beijing is located in Northern China.\nFact4:Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFact5:Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nFact6:Many of Beijing's 91 universities consistently rank among the best universities in the world.\nHypothesis:Beijing is the second largest Chinese city."
    },
    {
        "Symbol Mapping": {
            "Alien(x)": "x is an alien",
            "Extraterrestrial(x)": "x is an extraterrestrial",
            "From(x, y)": "x is from location y",
            "Human(x)": "x is a human",
            "HighlyIntelligentBeing(x)": "x is a highly intelligent being",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive OR (either...or, but not both)"
        },
        "Premise": {
            "P1": "∀x (Alien(x) → Extraterrestrial(x))",
            "P2": "∀x (From(x, mars) → Alien(x))",
            "P3": "∀x (Extraterrestrial(x) → ¬Human(x))",
            "P4": "∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))",
            "P5": "HighlyIntelligentBeing(marvin)",
            "P6": "¬(From(marvin, earth) ⊕ From(marvin, mars))",
            "P7": "¬From(marvin, earth) → Extraterrestrial(marvin)"
        },
        "Conclusion": "Alien(marvin)",
        "Label": "Uncertain",
        "ori_premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "ori_conclusion": "Marvin is an alien.",
        "metadata": "FOLIO_452",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All aliens are extraterrestrials.\nFact2:If someone is from Mars, then they are an alien.\nFact3:No extraterrestrials are human.\nFact4:All highly intelligent beings from Earth are humans.\nFact5:Marvin is a highly intelligent being.\nFact6:Marvin is either from Earth and from Mars, or he is from neither.\nFact7:If Marvin is not from Earth, then Marvin is an extraterrestrial.\nHypothesis:Marvin is an alien."
    },
    {
        "Symbol Mapping": {
            "Alien(x)": "x is an alien",
            "Extraterrestrial(x)": "x is an extraterrestrial",
            "From(x, mars)": "x is from Mars",
            "From(x, earth)": "x is from Earth",
            "Human(x)": "x is a human",
            "HighlyIntelligentBeing(x)": "x is a highly intelligent being",
            "¬": "Logical negation (NOT)",
            "∧": "Logical conjunction (AND)",
            "→": "Logical implication (IF-THEN)",
            "⊕": "Exclusive OR (XOR)"
        },
        "Premise": {
            "P1": "∀x (Alien(x) → Extraterrestrial(x))",
            "P2": "∀x (From(x, mars) → Alien(x))",
            "P3": "∀x (Extraterrestrial(x) → ¬Human(x))",
            "P4": "∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))",
            "P5": "HighlyIntelligentBeing(marvin)",
            "P6": "¬(From(marvin, earth) ⊕ From(marvin, mars))",
            "P7": "¬From(marvin, earth) → Extraterrestrial(marvin)"
        },
        "Conclusion": "¬Human(marvin) ∧ ¬From(marvin, mars)",
        "Label": "True",
        "ori_premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "ori_conclusion": "Marvin is neither a human nor from Mars.",
        "metadata": "FOLIO_452",
        "proof_label": "__PROVED__",
        "input": "Fact1:All aliens are extraterrestrials.\nFact2:If someone is from Mars, then they are an alien.\nFact3:No extraterrestrials are human.\nFact4:All highly intelligent beings from Earth are humans.\nFact5:Marvin is a highly intelligent being.\nFact6:Marvin is either from Earth and from Mars, or he is from neither.\nFact7:If Marvin is not from Earth, then Marvin is an extraterrestrial.\nHypothesis:Marvin is neither a human nor from Mars."
    },
    {
        "Symbol Mapping": {
            "Alien(x)": "x is an alien",
            "Extraterrestrial(x)": "x is an extraterrestrial",
            "From(x, y)": "x is from location y",
            "Human(x)": "x is a human",
            "HighlyIntelligentBeing(x)": "x is a highly intelligent being",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive OR (exactly one is true)",
            "∀x": "For all x (universal quantifier)"
        },
        "Premise": {
            "P1": "∀x (Alien(x) → Extraterrestrial(x))",
            "P2": "∀x (From(x, mars) → Alien(x))",
            "P3": "∀x (Extraterrestrial(x) → ¬Human(x))",
            "P4": "∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))",
            "P5": "HighlyIntelligentBeing(marvin)",
            "P6": "¬(From(marvin, earth) ⊕ From(marvin, mars))",
            "P7": "¬From(marvin, earth) → Extraterrestrial(marvin)"
        },
        "Conclusion": "¬From(marvin, mars) → Human(marvin)",
        "Label": "False",
        "ori_premises": [
            "All aliens are extraterrestrials.",
            "If someone is from Mars, then they are an alien.",
            "No extraterrestrials are human.",
            "All highly intelligent beings from Earth are humans.",
            "Marvin is a highly intelligent being.",
            "Marvin is either from Earth and from Mars, or he is from neither.",
            "If Marvin is not from Earth, then Marvin is an extraterrestrial."
        ],
        "ori_conclusion": "If Marvin is not from Mars, then Marvin is a human.",
        "metadata": "FOLIO_452",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All aliens are extraterrestrials.\nFact2:If someone is from Mars, then they are an alien.\nFact3:No extraterrestrials are human.\nFact4:All highly intelligent beings from Earth are humans.\nFact5:Marvin is a highly intelligent being.\nFact6:Marvin is either from Earth and from Mars, or he is from neither.\nFact7:If Marvin is not from Earth, then Marvin is an extraterrestrial.\nHypothesis:If Marvin is not from Mars, then Marvin is a human."
    },
    {
        "Symbol Mapping": {
            "At(x, mixer)": "x is at the mixer",
            "GrandSlam(x)": "x is a Grand Slam champion",
            "Champion(x)": "x is a champion",
            "OscarNominated(x)": "x is an Oscar-nominated actor",
            "Actor(x)": "x is an actor",
            "Professional(x)": "x is a professional",
            "TennisPlayer(x)": "x is a tennis player",
            "Celebrity(x)": "x is a celebrity",
            "WellPaid(x)": "x is well-paid",
            "Athlete(x)": "x is an athlete",
            "Famous(x)": "x is famous",
            "LiveIn(x, taxHaven)": "x lives in a tax haven",
            "At(djokovic, mixer)": "Djokovic is at the mixer",
            "Famous(djokovic)": "Djokovic is famous",
            "Athlete(djokovic)": "Djokovic is an athlete",
            "WellPaid(djokovic)": "Djokovic is well-paid",
            "GrandSlam(djokovic)": "Djokovic is a Grand Slam champion",
            "Champion(djokovic)": "Djokovic is a champion"
        },
        "Premise": {
            "P1": "∀x (At(x, mixer) → (GrandSlam(x) ∨ (OscarNominated(x) ∧ Actor(x))))",
            "P2": "∀x (At(x, mixer) ∧ GrandSlam(x) → Professional(x) ∧ TennisPlayer(x))",
            "P3": "∀x (At(x, mixer) ∧ OscarNominated(x) ∧ Actor(x) → Celebrity(x))",
            "P4": "∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))",
            "P5": "∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))",
            "P6": "∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))",
            "P7": "∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))",
            "P8": "At(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))"
        },
        "Conclusion": "GrandSlam(djokovic) ∧ Champion(djokovic)",
        "Label": "Uncertain",
        "ori_premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "ori_conclusion": "Djokovic is a Grand Slam champion.",
        "metadata": "FOLIO_340",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nFact2:Every Grand Slam champion at the mixer is a professional tennis player.\nFact3:All Oscar-nominated actors at the mixer are celebrities.\nFact4:All professional tennis players at the mixer are athletes.\nFact5:If a person at the mixer is a celebrity, then they are well paid.\nFact6:If a person at the mixer is an athlete, then they are famous.\nFact7:All well-paid people at the mixer live in tax havens.\nFact8:Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nHypothesis:Djokovic is a Grand Slam champion."
    },
    {
        "Symbol Mapping": {
            "At(x, mixer)": "x is at the mixer",
            "GrandSlam(x)": "x is a Grand Slam champion",
            "Champion(x)": "x is a champion",
            "OscarNominated(x)": "x is an Oscar-nominated actor",
            "Actor(x)": "x is an actor",
            "Professional(x)": "x is a professional",
            "TennisPlayer(x)": "x is a tennis player",
            "Athlete(x)": "x is an athlete",
            "Celebrity(x)": "x is a celebrity",
            "WellPaid(x)": "x is well paid",
            "LiveIn(x, taxHaven)": "x lives in a tax haven",
            "Famous(x)": "x is famous",
            "At(djokovic, mixer)": "Djokovic is at the mixer",
            "Famous(djokovic)": "Djokovic is famous",
            "Athlete(djokovic)": "Djokovic is an athlete",
            "WellPaid(djokovic)": "Djokovic is well paid",
            "LiveIn(djokovic, taxHaven)": "Djokovic lives in a tax haven"
        },
        "Premise": {
            "P1": "∀x (At(x, mixer) → (GrandSlam(x) ∨ OscarNominated(x)))",
            "P2": "∀x ((GrandSlam(x) ∧ At(x, mixer)) → Professional(x) ∧ TennisPlayer(x))",
            "P3": "∀x ((OscarNominated(x) ∧ At(x, mixer)) → Celebrity(x))",
            "P4": "∀x ((Professional(x) ∧ TennisPlayer(x) ∧ At(x, mixer)) → Athlete(x))",
            "P5": "∀x ((Celebrity(x) ∧ At(x, mixer)) → WellPaid(x))",
            "P6": "∀x ((Athlete(x) ∧ At(x, mixer)) → Famous(x))",
            "P7": "∀x ((WellPaid(x) ∧ At(x, mixer)) → LiveIn(x, taxHaven))",
            "P8": "At(djokovic, mixer) ∧ ((Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic))"
        },
        "Conclusion": "LiveIn(djokovic, taxHaven)",
        "Label": "True",
        "ori_premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "ori_conclusion": "Djokovic lives in a tax haven.",
        "metadata": "FOLIO_340",
        "proof_label": "__PROVED__",
        "input": "Fact1:Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nFact2:Every Grand Slam champion at the mixer is a professional tennis player.\nFact3:All Oscar-nominated actors at the mixer are celebrities.\nFact4:All professional tennis players at the mixer are athletes.\nFact5:If a person at the mixer is a celebrity, then they are well paid.\nFact6:If a person at the mixer is an athlete, then they are famous.\nFact7:All well-paid people at the mixer live in tax havens.\nFact8:Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nHypothesis:Djokovic lives in a tax haven."
    },
    {
        "Symbol Mapping": {
            "At(x, mixer)": "x is at the mixer",
            "GrandSlam(x)": "x is a Grand Slam champion",
            "Champion(x)": "x is a champion",
            "OscarNominated(x)": "x is an Oscar-nominated individual",
            "Actor(x)": "x is an actor",
            "Professional(x)": "x is a professional",
            "TennisPlayer(x)": "x is a tennis player",
            "Athlete(x)": "x is an athlete",
            "Celebrity(x)": "x is a celebrity",
            "WellPaid(x)": "x is well-paid",
            "LiveIn(x, taxHaven)": "x lives in a tax haven",
            "Famous(x)": "x is famous",
            "At(djokovic, mixer)": "Djokovic is at the mixer",
            "Famous(djokovic)": "Djokovic is famous",
            "Athlete(djokovic)": "Djokovic is an athlete",
            "WellPaid(djokovic)": "Djokovic is well-paid",
            "LiveIn(djokovic, taxHaven)": "Djokovic lives in a tax haven"
        },
        "Premise": {
            "P1": "∀x (At(x, mixer) → (GrandSlam(x) ∨ OscarNominated(x)))",
            "P2": "∀x ((At(x, mixer) ∧ GrandSlam(x)) → (Professional(x) ∧ TennisPlayer(x)))",
            "P3": "∀x ((At(x, mixer) ∧ OscarNominated(x)) → Celebrity(x))",
            "P4": "∀x ((At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x)) → Athlete(x))",
            "P5": "∀x ((At(x, mixer) ∧ Celebrity(x)) → WellPaid(x))",
            "P6": "∀x ((At(x, mixer) ∧ Athlete(x)) → Famous(x))",
            "P7": "∀x ((At(x, mixer) ∧ WellPaid(x)) → LiveIn(x, taxHaven))",
            "P8": "At(djokovic, mixer) ∧ ((Famous(djokovic) ∧ Athlete(djokovic)) → WellPaid(djokovic))"
        },
        "Conclusion": "¬LiveIn(djokovic, taxHaven)",
        "Label": "False",
        "ori_premises": [
            "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.",
            "Every Grand Slam champion at the mixer is a professional tennis player.",
            "All Oscar-nominated actors at the mixer are celebrities.",
            "All professional tennis players at the mixer are athletes.",
            "If a person at the mixer is a celebrity, then they are well paid.",
            "If a person at the mixer is an athlete, then they are famous.",
            "All well-paid people at the mixer live in tax havens.",
            "Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."
        ],
        "ori_conclusion": "Djokovic does not live in a tax haven.",
        "metadata": "FOLIO_340",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nFact2:Every Grand Slam champion at the mixer is a professional tennis player.\nFact3:All Oscar-nominated actors at the mixer are celebrities.\nFact4:All professional tennis players at the mixer are athletes.\nFact5:If a person at the mixer is a celebrity, then they are well paid.\nFact6:If a person at the mixer is an athlete, then they are famous.\nFact7:All well-paid people at the mixer live in tax havens.\nFact8:Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\nHypothesis:Djokovic does not live in a tax haven."
    },
    {
        "Symbol Mapping": {
            "ProfessionalWrestlingStable(x)": "x is a professional wrestling stable",
            "In(x, y)": "x is formed in or exists in y",
            "Leads(x, y)": "x leads y",
            "Includes(x, y)": "x includes y as a member",
            "Feuds(x, y)": "x has a feud with y",
            "∃x (Leads(x, y) ∧ ProfessionalWrestlingStable(y))": "There exists an entity y such that x leads y and y is a professional wrestling stable"
        },
        "Premise": {
            "P1": "ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)",
            "P2": "Leads(roderickStrong, diamondMine)",
            "P3": "Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)",
            "P4": "Feuds(imperium, diamondMine)"
        },
        "Conclusion": "∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))",
        "Label": "True",
        "ori_premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "ori_conclusion": "Roderick Strong leads a professional wrestling stable.",
        "metadata": "FOLIO_96",
        "proof_label": "__PROVED__",
        "input": "Fact1:Diamond Mine is a professional wrestling stable formed in WWE.\nFact2:Roderick Strong leads Diamond Mine.\nFact3:Diamond Mine includes the Creed Brothers and Ivy Nile.\nFact4:Imperium has a feud with Diamond Mine.\nHypothesis:Roderick Strong leads a professional wrestling stable."
    },
    {
        "Symbol Mapping": {
            "ProfessionalWrestlingStable(x)": "x is a professional wrestling stable.",
            "In(x, y)": "x is part of or formed in y.",
            "Leads(x, y)": "x leads y.",
            "Includes(x, y)": "x includes y as a member.",
            "Feuds(x, y)": "x has a feud with y."
        },
        "Premise": {
            "P1": "ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)",
            "P2": "Leads(roderickStrong, diamondMine)",
            "P3": "Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)",
            "P4": "Feuds(imperium, diamondMine)"
        },
        "Conclusion": "Leads(roderickstrong, creedbrothers)",
        "Label": "Uncertain",
        "ori_premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "ori_conclusion": "Roderick Strong leads the Creed Brothers.",
        "metadata": "FOLIO_96",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Diamond Mine is a professional wrestling stable formed in WWE.\nFact2:Roderick Strong leads Diamond Mine.\nFact3:Diamond Mine includes the Creed Brothers and Ivy Nile.\nFact4:Imperium has a feud with Diamond Mine.\nHypothesis:Roderick Strong leads the Creed Brothers."
    },
    {
        "Symbol Mapping": {
            "ProfessionalWrestlingStable(x)": "x is a professional wrestling stable",
            "In(x, y)": "x is formed in or associated with y",
            "Leads(x, y)": "x leads y",
            "Includes(x, y)": "x includes y as a member",
            "Feuds(x, y)": "x has a feud with y",
            "¬Feuds(x, y)": "x does not have a feud with y",
            "∀x": "For all x",
            "∧": "Logical AND",
            "→": "Logical implication"
        },
        "Premise": {
            "P1": "ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)",
            "P2": "Leads(roderickStrong, diamondMine)",
            "P3": "Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)",
            "P4": "Feuds(imperium, diamondMine)"
        },
        "Conclusion": "∀x ((ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile)) → ¬Feuds(imperium, x))",
        "Label": "False",
        "ori_premises": [
            "Diamond Mine is a professional wrestling stable formed in WWE.",
            "Roderick Strong leads Diamond Mine.",
            "Diamond Mine includes the Creed Brothers and Ivy Nile.",
            "Imperium has a feud with Diamond Mine."
        ],
        "ori_conclusion": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "metadata": "FOLIO_96",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Diamond Mine is a professional wrestling stable formed in WWE.\nFact2:Roderick Strong leads Diamond Mine.\nFact3:Diamond Mine includes the Creed Brothers and Ivy Nile.\nFact4:Imperium has a feud with Diamond Mine.\nHypothesis:Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
    },
    {
        "Symbol Mapping": {
            "MusicPiece(x)": "x is a music piece",
            "Composer(y)": "y is a composer",
            "Write(y, x)": "y writes x",
            "Writtenby(x, y)": "x is written by y",
            "Premiered(x, y)": "x premiered y",
            "Orchestra(x)": "x is an orchestra",
            "Lead(x, y)": "x leads y",
            "Conductor(y)": "y is a conductor"
        },
        "Premise": {
            "P1": "MusicPiece(symphony9)",
            "P2": "∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))",
            "P3": "Writtenby(symphony9, beethoven)",
            "P4": "Premiered(viennaMusicSociety, symphony9)",
            "P5": "Orchestra(viennaMusicSociety)",
            "P6": "Lead(beethoven, viennaMusicSociety)",
            "P7": "∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))"
        },
        "Conclusion": "Composer(beethoven)",
        "Label": "True",
        "ori_premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "ori_conclusion": "Beethoven is a composer.",
        "metadata": "FOLIO_219",
        "proof_label": "__PROVED__",
        "input": "Fact1:Symphony No. 9 is a music piece.\nFact2:Composers write music pieces.\nFact3:Beethoven wrote Symphony No. 9.\nFact4:Vienna Music Society premiered Symphony No. 9.\nFact5:Vienna Music Society is an orchestra.\nFact6:Beethoven leads the Vienna Music Society.\nFact7:Orchestras are led by conductors.\nHypothesis:Beethoven is a composer."
    },
    {
        "Symbol Mapping": {
            "MusicPiece(x)": "x is a music piece",
            "Composer(y)": "y is a composer",
            "Write(y, x)": "y writes x",
            "Writtenby(x, y)": "x is written by y",
            "Premiered(x, y)": "x premiered y",
            "Orchestra(x)": "x is an orchestra",
            "Lead(x, y)": "x leads y",
            "Conductor(y)": "y is a conductor"
        },
        "Premise": {
            "P1": "MusicPiece(symphony9)",
            "P2": "∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))",
            "P3": "Writtenby(symphony9, beethoven)",
            "P4": "Premiered(viennaMusicSociety, symphony9)",
            "P5": "Orchestra(viennaMusicSociety)",
            "P6": "Lead(beethoven, viennaMusicSociety)",
            "P7": "∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))"
        },
        "Conclusion": "∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))",
        "Label": "True",
        "ori_premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "ori_conclusion": "Some orchestras premiered music pieces.",
        "metadata": "FOLIO_219",
        "proof_label": "__PROVED__",
        "input": "Fact1:Symphony No. 9 is a music piece.\nFact2:Composers write music pieces.\nFact3:Beethoven wrote Symphony No. 9.\nFact4:Vienna Music Society premiered Symphony No. 9.\nFact5:Vienna Music Society is an orchestra.\nFact6:Beethoven leads the Vienna Music Society.\nFact7:Orchestras are led by conductors.\nHypothesis:Some orchestras premiered music pieces."
    },
    {
        "Symbol Mapping": {
            "MusicPiece(x)": "x is a music piece",
            "Composer(y)": "y is a composer",
            "Write(y, x)": "y writes x",
            "Writtenby(x, y)": "x is written by y",
            "Premiered(x, y)": "x premiered y",
            "Orchestra(x)": "x is an orchestra",
            "Lead(x, y)": "x leads y",
            "Conductor(x)": "x is a conductor"
        },
        "Premise": {
            "P1": "MusicPiece(symphony9)",
            "P2": "∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))",
            "P3": "Writtenby(symphony9, beethoven)",
            "P4": "Premiered(viennaMusicSociety, symphony9)",
            "P5": "Orchestra(viennaMusicSociety)",
            "P6": "Lead(beethoven, viennaMusicSociety)",
            "P7": "∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))"
        },
        "Conclusion": "¬Conductor(beethoven)",
        "Label": "False",
        "ori_premises": [
            "Symphony No. 9 is a music piece.",
            "Composers write music pieces.",
            "Beethoven wrote Symphony No. 9.",
            "Vienna Music Society premiered Symphony No. 9.",
            "Vienna Music Society is an orchestra.",
            "Beethoven leads the Vienna Music Society.",
            "Orchestras are led by conductors."
        ],
        "ori_conclusion": "Beethoven is not a conductor.",
        "metadata": "FOLIO_219",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Symphony No. 9 is a music piece.\nFact2:Composers write music pieces.\nFact3:Beethoven wrote Symphony No. 9.\nFact4:Vienna Music Society premiered Symphony No. 9.\nFact5:Vienna Music Society is an orchestra.\nFact6:Beethoven leads the Vienna Music Society.\nFact7:Orchestras are led by conductors.\nHypothesis:Beethoven is not a conductor."
    },
    {
        "Symbol Mapping": {
            "Adore(x, y)": "x adores y",
            "ZahaHadid(x)": "x is a design style by Zaha Hadid",
            "DesignStyle(x)": "x is a design style",
            "InterestingGeometry(x)": "x has interesting geometries",
            "BrutalistBuilding(x)": "x is a brutalist building",
            "KellyWearstler(x)": "x is a design style by Kelly Wearstler",
            "Evocative(x)": "x is evocative",
            "Dreamy(x)": "x is dreamy",
            "Design(x)": "x is a design",
            "ByMax(x)": "x is a design by Max"
        },
        "Premise": {
            "P1": "∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))",
            "P2": "∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))",
            "P3": "∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x))))",
            "P4": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))",
            "P5": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))",
            "P6": "∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))"
        },
        "Conclusion": "∃x (Design(x) ∧ ByMax(x) ∧ BrutalistBuilding(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "ori_conclusion": "A design by Max is a brutalist building.",
        "metadata": "FOLIO_350",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All of Zaha Hadid's design styles that Max adores have interesting geometries.\nFact2:No brutalist buildings that Max adores have interesting geometries.\nFact3:Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nFact4:All of Kelly Wearstler's design styles that Max adores are evocative.\nFact5:All of Kelly Wearstler's design styles that Max adores are dreamy.\nFact6:If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nHypothesis:A design by Max is a brutalist building."
    },
    {
        "Symbol Mapping": {
            "Adore(max, x)": "Max adores the design x",
            "ZahaHadid(x)": "x is a design style by Zaha Hadid",
            "DesignStyle(x)": "x is a design style",
            "InterestingGeometry(x)": "x has interesting geometries",
            "BrutalistBuilding(x)": "x is a brutalist building",
            "KellyWearstler(x)": "x is a design style by Kelly Wearstler",
            "Evocative(x)": "x is evocative",
            "Dreamy(x)": "x is dreamy",
            "Design(x)": "x is a design",
            "ByMax(x)": "x is a design by Max"
        },
        "Premise": {
            "P1": "∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))",
            "P2": "∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))",
            "P3": "∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x))))",
            "P4": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))",
            "P5": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))",
            "P6": "∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))"
        },
        "Conclusion": "∃x (Design(x) ∧ ByMax(x) ∧ Evocative(x) ∧ Dreamy(x))",
        "Label": "True",
        "ori_premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "ori_conclusion": "A design by Max is evocative and dreamy.",
        "metadata": "FOLIO_350",
        "proof_label": "__PROVED__",
        "input": "Fact1:All of Zaha Hadid's design styles that Max adores have interesting geometries.\nFact2:No brutalist buildings that Max adores have interesting geometries.\nFact3:Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nFact4:All of Kelly Wearstler's design styles that Max adores are evocative.\nFact5:All of Kelly Wearstler's design styles that Max adores are dreamy.\nFact6:If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nHypothesis:A design by Max is evocative and dreamy."
    },
    {
        "Symbol Mapping": {
            "Adore(max, x)": "Max adores x",
            "ZahaHadid(x)": "x is a design style by Zaha Hadid",
            "DesignStyle(x)": "x is a design style",
            "InterestingGeometry(x)": "x has interesting geometries",
            "BrutalistBuilding(x)": "x is a brutalist building",
            "KellyWearstler(x)": "x is a design style by Kelly Wearstler",
            "Evocative(x)": "x is evocative",
            "Dreamy(x)": "x is dreamy",
            "Design(x)": "x is a design",
            "ByMax(x)": "x is a design by Max"
        },
        "Premise": {
            "P1": "∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))",
            "P2": "∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))",
            "P3": "∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x))))",
            "P4": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))",
            "P5": "∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))",
            "P6": "∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))"
        },
        "Conclusion": "∃x (Design(x) ∧ ByMax(x) ∧ (Evocative(x) ⊕ Dreamy(x)))",
        "Label": "False",
        "ori_premises": [
            "All of Zaha Hadid's design styles that Max adores have interesting geometries.",
            "No brutalist buildings that Max adores have interesting geometries.",
            "Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. ",
            "All of Kelly Wearstler's design styles that Max adores are evocative.",
            "All of Kelly Wearstler's design styles that Max adores are dreamy.",
            "If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."
        ],
        "ori_conclusion": "A design by Max is either evocative or dreamy.",
        "metadata": "FOLIO_350",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All of Zaha Hadid's design styles that Max adores have interesting geometries.\nFact2:No brutalist buildings that Max adores have interesting geometries.\nFact3:Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nFact4:All of Kelly Wearstler's design styles that Max adores are evocative.\nFact5:All of Kelly Wearstler's design styles that Max adores are dreamy.\nFact6:If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\nHypothesis:A design by Max is either evocative or dreamy."
    },
    {
        "Symbol Mapping": {
            "RankedHighlyBy(x, womensTennisAssociation)": "x is ranked highly by the Women's Tennis Association.",
            "MostActivePlayerIn(x, majorTennis)": "x is one of the most active players in major tennis tournaments.",
            "LostTo(x, świątek)": "x lost to Iga Świątek.",
            "At(x, rolandGarros2022)": "x is at Roland Garros 2022.",
            "FemaleTennisPlayer(x)": "x is a female tennis player.",
            "TennisPlayer(x)": "x is a tennis player.",
            "Male(x)": "x is male.",
            "LostAt(x, rolandGarros2022)": "x lost at Roland Garros 2022.",
            "¬(Male(x) ∧ TennisPlayer(x) ∧ AtRolandGarros2022(x))": "x is not a male tennis player at Roland Garros 2022."
        },
        "Premise": {
            "P1": "∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))",
            "P2": "∀x (LostTo(x, świątek) ∧ At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))",
            "P3": "∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek))",
            "P4": "∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ⊕ Male(x)))",
            "P5": "∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, nadal))",
            "P6": "RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ LostTo(cocoGauff, nadal) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))",
            "P7": "At(cocoGauff, rolandGarros2022)"
        },
        "Conclusion": "MostActivePlayerIn(cocoGauff, majorTennis)",
        "Label": "True",
        "ori_premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "ori_conclusion": "Coco Gauff is among the most active Grand-Slam players.",
        "metadata": "FOLIO_385",
        "proof_label": "__PROVED__",
        "input": "Fact1:If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nFact2:Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nFact3:All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nFact4:All tennis players at Roland Garros 2022 are either female or male.\nFact5:All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nFact6:If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFact7:Coco Gauff is at Roland Garros 2022.\nHypothesis:Coco Gauff is among the most active Grand-Slam players."
    },
    {
        "Symbol Mapping": {
            "RankedHighlyBy(x, womensTennisAssociation)": "x is ranked highly by the Women's Tennis Association",
            "MostActivePlayerIn(x, majorTennis)": "x is one of the most active players in major tennis",
            "LostTo(x, świątek)": "x lost to Iga Świątek",
            "At(x, rolandGarros2022)": "x is at Roland Garros 2022",
            "FemaleTennisPlayer(x)": "x is a female tennis player",
            "TennisPlayer(x)": "x is a tennis player",
            "Female(x)": "x is female",
            "Male(x)": "x is male",
            "LostAt(x, rolandGarros2022)": "x lost at Roland Garros 2022",
            "¬(Male(x) ∧ TennisPlayer(x) ∧ AtRolandGarros2022(x))": "x is not a male tennis player at Roland Garros 2022",
            "⊕": "Exclusive OR (either one or the other, but not both)"
        },
        "Premise": {
            "P1": "∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))",
            "P2": "∀x (LostTo(x, świątek) ∧ At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))",
            "P3": "∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek))",
            "P4": "∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ⊕ Male(x)))",
            "P5": "∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, nadal))",
            "P6": "RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ LostTo(cocoGauff, nadal) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022))",
            "P7": "At(cocoGauff, rolandGarros2022)"
        },
        "Conclusion": "LostTo(cocoGauff, nadal)",
        "Label": "Uncertain",
        "ori_premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "ori_conclusion": "Coco Gauff has lost to Rafael Nadal.",
        "metadata": "FOLIO_385",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nFact2:Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nFact3:All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nFact4:All tennis players at Roland Garros 2022 are either female or male.\nFact5:All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nFact6:If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFact7:Coco Gauff is at Roland Garros 2022.\nHypothesis:Coco Gauff has lost to Rafael Nadal."
    },
    {
        "Symbol Mapping": {
            "RankedHighlyBy(x, womensTennisAssociation)": "x is ranked highly by the Women's Tennis Association",
            "MostActivePlayerIn(x, majorTennis)": "x is one of the most active players in major tennis",
            "LostTo(x, świątek)": "x lost to Iga Świątek",
            "At(x, rolandGarros2022)": "x is at Roland Garros 2022",
            "FemaleTennisPlayer(x)": "x is a female tennis player",
            "TennisPlayer(x)": "x is a tennis player",
            "Female(x)": "x is female",
            "Male(x)": "x is male",
            "LostAt(x, rolandGarros2022)": "x lost at Roland Garros 2022",
            "AtRolandGarros2022(x)": "x is at Roland Garros 2022",
            "¬(Male(x) ∧ TennisPlayer(x) ∧ AtRolandGarros2022(x))": "x is not a male tennis player at Roland Garros 2022"
        },
        "Premise": {
            "P1": "∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))",
            "P2": "∀x (LostTo(x, świątek) ∧ At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))",
            "P3": "∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))",
            "P4": "∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x)))",
            "P5": "∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))",
            "P6": "RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))",
            "P7": "TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)"
        },
        "Conclusion": "¬(LostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)) ∨ ¬MostActivePlayerIn(cocoGauff, majorTennis)",
        "Label": "False",
        "ori_premises": [
            "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. ",
            "Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.",
            "All female tennis players at Roland Garros 2022 lost to Iga Świątek.",
            "All tennis players at Roland Garros 2022 are either female or male.",
            "All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.",
            "If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "Coco Gauff is at Roland Garros 2022."
        ],
        "ori_conclusion": "Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis.",
        "metadata": "FOLIO_385",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nFact2:Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nFact3:All female tennis players at Roland Garros 2022 lost to Iga Świątek.\nFact4:All tennis players at Roland Garros 2022 are either female or male.\nFact5:All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nFact6:If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFact7:Coco Gauff is at Roland Garros 2022.\nHypothesis:Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis."
    },
    {
        "Symbol Mapping": {
            "Cat(x)": "x is a cat",
            "Mammal(x)": "x is a mammal",
            "Pet(x)": "x is a pet",
            "¬Cat(x)": "x is not a cat",
            "¬Mammal(x)": "x is not a mammal"
        },
        "Premise": {
            "P1": "∀x (Cat(x) → Mammal(x))",
            "P2": "∃x (Pet(x) ∧ ¬Mammal(x))"
        },
        "Conclusion": "∀x (Pet(x) → ¬Cat(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "All cats are mammals.",
            "Some pets are not mammals."
        ],
        "ori_conclusion": "No pets are cats.",
        "metadata": "FOLIO_256",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All cats are mammals.\nFact2:Some pets are not mammals.\nHypothesis:No pets are cats."
    },
    {
        "Symbol Mapping": {
            "Season(x)": "x is a season (e.g., spring, summer, fall, winter)",
            "Want(x, longvacation)": "x wants to have a long vacation",
            "Favorite(x, y)": "x's favorite season is y",
            "¬(x = y)": "x and y are not the same"
        },
        "Premise": {
            "P1": "Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))",
            "P2": "∀x (Want(x, longvacation) → Favorite(x, summer))",
            "P3": "Favorite(emma, summer)",
            "P4": "∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x = y))",
            "P5": "Want(james, longVacation)"
        },
        "Conclusion": "Favorite(james, summer)",
        "Label": "True",
        "ori_premises": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "ori_conclusion": "James's favorite season is summer.",
        "metadata": "FOLIO_159",
        "proof_label": "__PROVED__",
        "input": "Fact1:There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFact2:All students who want to have a long vacation have summer as their favorite season.\nFact3:Emma's favorite season is summer.\nFact4:Mia's favorite season is not the same as Emma's. \nFact5:James wants to have a long vacation.\nHypothesis:James's favorite season is summer."
    },
    {
        "Symbol Mapping": {
            "Season(x)": "x is a season (e.g., spring, summer, fall, or winter)",
            "Want(x, longvacation)": "x wants to have a long vacation",
            "Favorite(x, y)": "x's favorite season is y",
            "¬(x = y)": "x and y are not the same"
        },
        "Premise": {
            "P1": "Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))",
            "P2": "∀x (Want(x, longvacation) → Favorite(x, summer))",
            "P3": "Favorite(emma, summer)",
            "P4": "∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x = y))",
            "P5": "Want(james, longVacation)"
        },
        "Conclusion": "Favorite(mia, spring)",
        "Label": "Uncertain",
        "ori_premises": [
            "There are four seasons in a year: Spring, Summer, Fall, and Winter.",
            "All students who want to have a long vacation have summer as their favorite season.",
            "Emma's favorite season is summer.",
            "Mia's favorite season is not the same as Emma's. ",
            "James wants to have a long vacation."
        ],
        "ori_conclusion": "Mia's favorite season is spring.",
        "metadata": "FOLIO_159",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFact2:All students who want to have a long vacation have summer as their favorite season.\nFact3:Emma's favorite season is summer.\nFact4:Mia's favorite season is not the same as Emma's. \nFact5:James wants to have a long vacation.\nHypothesis:Mia's favorite season is spring."
    },
    {
        "Symbol Mapping": {
            "DigitalMedia(x)": "x is a digital medium",
            "AnalogMedia(x)": "x is an analog medium",
            "PrintedText(x)": "x is a printed text",
            "StreamingService(x)": "x is a streaming service",
            "HardcoverBook(x)": "x is a hardcover book",
            "StreamingService(1984)": "1984 is a streaming service",
            "HardcoverBook(1984)": "1984 is a hardcover book",
            "PrintedText(y1984)": "1984 is a printed text"
        },
        "Premise": {
            "P1": "∀x (DigitalMedia(x) → ¬AnalogMedia(x))",
            "P2": "∀x (PrintedText(x) → AnalogMedia(x))",
            "P3": "∀x (StreamingService(x) → DigitalMedia(x))",
            "P4": "∀x (HardcoverBook(x) → PrintedText(x))",
            "P5": "StreamingService(1984) → HardcoverBook(1984)"
        },
        "Conclusion": "PrintedText(y1984)",
        "Label": "Uncertain",
        "ori_premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "ori_conclusion": "1984 is printed text.",
        "metadata": "FOLIO_343",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:No digital media are analog.\nFact2:Every printed text is analog media.\nFact3:All streaming services are digital media.\nFact4:If an object is a hardcover book, then it is printed text.\nFact5:If 1984 is a streaming service, then 1984 is a hardcover book.\nHypothesis:1984 is printed text."
    },
    {
        "Symbol Mapping": {
            "DigitalMedia(x)": "x is a digital medium",
            "AnalogMedia(x)": "x is an analog medium",
            "PrintedText(x)": "x is a printed text",
            "StreamingService(x)": "x is a streaming service",
            "HardcoverBook(x)": "x is a hardcover book",
            "StreamingService(1984)": "1984 is a streaming service",
            "HardcoverBook(1984)": "1984 is a hardcover book"
        },
        "Premise": {
            "P1": "∀x (DigitalMedia(x) → ¬AnalogMedia(x))",
            "P2": "∀x (PrintedText(x) → AnalogMedia(x))",
            "P3": "∀x (StreamingService(x) → DigitalMedia(x))",
            "P4": "∀x (HardcoverBook(x) → PrintedText(x))",
            "P5": "StreamingService(1984) → HardcoverBook(1984)"
        },
        "Conclusion": "StreamingService(y1984)",
        "Label": "False",
        "ori_premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "ori_conclusion": "1984 is a streaming service.",
        "metadata": "FOLIO_343",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:No digital media are analog.\nFact2:Every printed text is analog media.\nFact3:All streaming services are digital media.\nFact4:If an object is a hardcover book, then it is printed text.\nFact5:If 1984 is a streaming service, then 1984 is a hardcover book.\nHypothesis:1984 is a streaming service."
    },
    {
        "Symbol Mapping": {
            "DigitalMedia(x)": "x is a digital medium",
            "AnalogMedia(x)": "x is an analog medium",
            "PrintedText(x)": "x is a printed text",
            "StreamingService(x)": "x is a streaming service",
            "HardcoverBook(x)": "x is a hardcover book",
            "StreamingService(1984)": "The entity 1984 is a streaming service",
            "HardcoverBook(1984)": "The entity 1984 is a hardcover book",
            "¬StreamingService(y1984)": "The entity y1984 is not a streaming service"
        },
        "Premise": {
            "P1": "∀x (DigitalMedia(x) → ¬AnalogMedia(x))",
            "P2": "∀x (PrintedText(x) → AnalogMedia(x))",
            "P3": "∀x (StreamingService(x) → DigitalMedia(x))",
            "P4": "∀x (HardcoverBook(x) → PrintedText(x))",
            "P5": "StreamingService(1984) → HardcoverBook(1984)"
        },
        "Conclusion": "¬StreamingService(y1984)",
        "Label": "True",
        "ori_premises": [
            "No digital media are analog.",
            "Every printed text is analog media.",
            "All streaming services are digital media.",
            "If an object is a hardcover book, then it is printed text.",
            "If 1984 is a streaming service, then 1984 is a hardcover book."
        ],
        "ori_conclusion": "1984 is not a streaming service.",
        "metadata": "FOLIO_343",
        "proof_label": "__PROVED__",
        "input": "Fact1:No digital media are analog.\nFact2:Every printed text is analog media.\nFact3:All streaming services are digital media.\nFact4:If an object is a hardcover book, then it is printed text.\nFact5:If 1984 is a streaming service, then 1984 is a hardcover book.\nHypothesis:1984 is not a streaming service."
    },
    {
        "Symbol Mapping": {
            "RomanceLanguage(x)": "x is a Romance language",
            "IndoEuropeanLanguage(x)": "x is an Indo-European language",
            "MemberOf(x, z)": "x is a member of the group or category z",
            "Related(x, y)": "x is related to y",
            "Language(x)": "x is a language",
            "RomanceLanguage(french)": "French is a Romance language",
            "RomanceLanguage(spanish)": "Spanish is a Romance language",
            "Related(german, spanish)": "German is related to Spanish",
            "¬Related(basque, x)": "Basque is not related to x"
        },
        "Premise": {
            "P1": "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
            "P2": "∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))",
            "P3": "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))",
            "P4": "RomanceLanguage(french) ∧ RomanceLanguage(spanish)",
            "P5": "Related(german, spanish)",
            "P6": "∀x (Language(x) → ¬Related(basque, x))"
        },
        "Conclusion": "RomanceLanguage(basque)",
        "Label": "False",
        "ori_premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "ori_conclusion": "Basque is a Romance language.",
        "metadata": "FOLIO_213",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All Romance languages are Indo-European languages.\nFact2:Romance languages are a language family.\nFact3:All languages within a language family are related to each other.\nFact4:French and Spanish are both Romance languages.\nFact5:German is related to Spanish.\nFact6:Basque is not related to any other language.\nHypothesis:Basque is a Romance language."
    },
    {
        "Symbol Mapping": {
            "RomanceLanguage(x)": "x is a Romance language",
            "IndoEuropeanLanguage(x)": "x is an Indo-European language",
            "MemberOf(x, z)": "x is a member of the group or category z",
            "Related(x, y)": "x is related to y",
            "Language(x)": "x is a language",
            "french": "The French language",
            "spanish": "The Spanish language",
            "german": "The German language",
            "basque": "The Basque language",
            "languageFamily": "The category of language families"
        },
        "Premise": {
            "P1": "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
            "P2": "∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))",
            "P3": "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))",
            "P4": "RomanceLanguage(french) ∧ RomanceLanguage(spanish)",
            "P5": "Related(german, spanish)",
            "P6": "∀x (Language(x) → ¬Related(basque, x))"
        },
        "Conclusion": "RomanceLanguage(german)",
        "Label": "Uncertain",
        "ori_premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "ori_conclusion": "German is a Romance language.",
        "metadata": "FOLIO_213",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All Romance languages are Indo-European languages.\nFact2:Romance languages are a language family.\nFact3:All languages within a language family are related to each other.\nFact4:French and Spanish are both Romance languages.\nFact5:German is related to Spanish.\nFact6:Basque is not related to any other language.\nHypothesis:German is a Romance language."
    },
    {
        "Symbol Mapping": {
            "RomanceLanguage(x)": "x is a Romance language",
            "IndoEuropeanLanguage(x)": "x is an Indo-European language",
            "MemberOf(x, z)": "x is a member of the group or category z",
            "Related(x, y)": "x is related to y",
            "Language(x)": "x is a language",
            "french": "The language French",
            "spanish": "The language Spanish",
            "german": "The language German",
            "basque": "The language Basque",
            "languageFamily": "The category of language families"
        },
        "Premise": {
            "P1": "∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))",
            "P2": "∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))",
            "P3": "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))",
            "P4": "RomanceLanguage(french) ∧ RomanceLanguage(spanish)",
            "P5": "Related(german, spanish)",
            "P6": "∀x (Language(x) → ¬Related(basque, x))"
        },
        "Conclusion": "IndoEuropeanLanguage(french)",
        "Label": "True",
        "ori_premises": [
            "All Romance languages are Indo-European languages.",
            "Romance languages are a language family.",
            "All languages within a language family are related to each other.",
            "French and Spanish are both Romance languages.",
            "German is related to Spanish.",
            "Basque is not related to any other language."
        ],
        "ori_conclusion": "French is an Indo-European language.",
        "metadata": "FOLIO_213",
        "proof_label": "__PROVED__",
        "input": "Fact1:All Romance languages are Indo-European languages.\nFact2:Romance languages are a language family.\nFact3:All languages within a language family are related to each other.\nFact4:French and Spanish are both Romance languages.\nFact5:German is related to Spanish.\nFact6:Basque is not related to any other language.\nHypothesis:French is an Indo-European language."
    },
    {
        "Symbol Mapping": {
            "Striker(x)": "x is a striker",
            "SoccerPlayer(x)": "x is a soccer player",
            "Left(x, y)": "x left y, where x is a player and y is a team",
            "PlaysFor(x, y)": "x plays for y, where x is a player and y is a team"
        },
        "Premise": {
            "P1": "Striker(robertLewandowski)",
            "P2": "∀x (Striker(x) → SoccerPlayer(x))",
            "P3": "Left(robertLewandowski, bayernMunchen)",
            "P4": "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
        },
        "Conclusion": "SoccerPlayer(robertLewandowski)",
        "Label": "True",
        "ori_premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "ori_conclusion": "Robert Lewandowski is a soccer player.",
        "metadata": "FOLIO_79",
        "proof_label": "__PROVED__",
        "input": "Fact1:Robert Lewandowski is a striker.\nFact2:Strikers are soccer players.\nFact3:Robert Lewandowski left Bayern Munchen.\nFact4:If a player leaves a team they no longer play for that team.\nHypothesis:Robert Lewandowski is a soccer player."
    },
    {
        "Symbol Mapping": {
            "Striker(x)": "x is a striker",
            "SoccerPlayer(x)": "x is a soccer player",
            "Left(x, y)": "x left team y",
            "PlaysFor(x, y)": "x plays for team y",
            "¬PlaysFor(x, y)": "x does not play for team y",
            "∀x": "For all entities x",
            "∀y": "For all entities y",
            "→": "If-then implication"
        },
        "Premise": {
            "P1": "Striker(robertLewandowski)",
            "P2": "∀x (Striker(x) → SoccerPlayer(x))",
            "P3": "Left(robertLewandowski, bayernMunchen)",
            "P4": "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
        },
        "Conclusion": "PlaysFor(robertLewandowski, bayernMunchen)",
        "Label": "False",
        "ori_premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "ori_conclusion": "Robert Lewandowski plays for Bayern Munchen.",
        "metadata": "FOLIO_79",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Robert Lewandowski is a striker.\nFact2:Strikers are soccer players.\nFact3:Robert Lewandowski left Bayern Munchen.\nFact4:If a player leaves a team they no longer play for that team.\nHypothesis:Robert Lewandowski plays for Bayern Munchen."
    },
    {
        "Symbol Mapping": {
            "Striker(x)": "x is a striker",
            "SoccerPlayer(x)": "x is a soccer player",
            "Left(x, y)": "x left team y",
            "PlaysFor(x, y)": "x plays for team y",
            "SoccerStar(x)": "x is a soccer star"
        },
        "Premise": {
            "P1": "Striker(robertLewandowski)",
            "P2": "∀x (Striker(x) → SoccerPlayer(x))",
            "P3": "Left(robertLewandowski, bayernMunchen)",
            "P4": "∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))"
        },
        "Conclusion": "SoccerStar(robertLewandowski)",
        "Label": "Uncertain",
        "ori_premises": [
            "Robert Lewandowski is a striker.",
            "Strikers are soccer players.",
            "Robert Lewandowski left Bayern Munchen.",
            "If a player leaves a team they no longer play for that team."
        ],
        "ori_conclusion": "Robert Lewandowski is a star.",
        "metadata": "FOLIO_79",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Robert Lewandowski is a striker.\nFact2:Strikers are soccer players.\nFact3:Robert Lewandowski left Bayern Munchen.\nFact4:If a player leaves a team they no longer play for that team.\nHypothesis:Robert Lewandowski is a star."
    },
    {
        "Symbol Mapping": {
            "City(x)": "x is a city",
            "In(x, y)": "x is located in y",
            "¬(x = y)": "x is not equal to y",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x",
            "∧": "Logical AND (both conditions must be true)",
            "→": "Logical implication (if the first condition is true, then the second must also be true)",
            "¬": "Logical negation (not true)"
        },
        "Premise": {
            "P1": "City(billings) ∧ In(billings, montana)",
            "P2": "City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)",
            "P3": "∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))",
            "P4": "City(pierre) ∧ ¬(In(pierre, montana))",
            "P5": "∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))",
            "P6": "∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity))) → ¬∃z (¬(z=y) ∧ In(x, z)))"
        },
        "Conclusion": "∃x (In(butte, x) ∧ In(stPierre, x))",
        "Label": "False",
        "ori_premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "ori_conclusion": "Butte and St Pierre are in the same state.",
        "metadata": "FOLIO_2",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Billings is a city in the state of Montana in U.S.\nFact2:The state of Montana includes the cities of Butte, Helena, and Missoula.\nFact3:White Sulphur Springs and Butte are cities in the same state in U.S.\nFact4:The city of St Pierre is not in the state of Montana.\nFact5:Any city in Butte is not in St Pierre.\nFact6:A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nHypothesis:Butte and St Pierre are in the same state."
    },
    {
        "Symbol Mapping": {
            "City(x)": "x is a city",
            "In(x, y)": "x is located in state y",
            "¬(x = y)": "x is not equal to y",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x"
        },
        "Premise": {
            "P1": "City(billings) ∧ In(billings, montana)",
            "P2": "City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)",
            "P3": "∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))",
            "P4": "City(pierre) ∧ ¬(In(pierre, montana))",
            "P5": "∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))",
            "P6": "∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity))) → ¬∃z (¬(z=y) ∧ In(x, z)))"
        },
        "Conclusion": "∃x (City(pierre) ∧ In(pierre, x) ∧ City(bismarck) ∧ In(bismarck, x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "ori_conclusion": "St Pierre and Bismarck are in the same state.",
        "metadata": "FOLIO_2",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Billings is a city in the state of Montana in U.S.\nFact2:The state of Montana includes the cities of Butte, Helena, and Missoula.\nFact3:White Sulphur Springs and Butte are cities in the same state in U.S.\nFact4:The city of St Pierre is not in the state of Montana.\nFact5:Any city in Butte is not in St Pierre.\nFact6:A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nHypothesis:St Pierre and Bismarck are in the same state."
    },
    {
        "Symbol Mapping": {
            "City(x)": "x is a city",
            "In(x, y)": "x is located in y",
            "¬(x = y)": "x is not equal to y",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x",
            "∧": "Logical AND (both conditions must be true)",
            "→": "Logical implication (if the first condition is true, then the second must also be true)",
            "¬": "Logical NOT (negation of a condition)"
        },
        "Premise": {
            "P1": "City(billings) ∧ In(billings, montana)",
            "P2": "City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)",
            "P3": "∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))",
            "P4": "City(pierre) ∧ ¬(In(pierre, montana))",
            "P5": "∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))",
            "P6": "∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity))) → ¬∃z (¬(z=y) ∧ In(x, z)))"
        },
        "Conclusion": "City(missoula) ∧ In(missoula, montana)",
        "Label": "True",
        "ori_premises": [
            "Billings is a city in the state of Montana in U.S.",
            "The state of Montana includes the cities of Butte, Helena, and Missoula.",
            "White Sulphur Springs and Butte are cities in the same state in U.S.",
            "The city of St Pierre is not in the state of Montana.",
            "Any city in Butte is not in St Pierre.",
            "A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."
        ],
        "ori_conclusion": "Montana is home to the city of Missoula.",
        "metadata": "FOLIO_2",
        "proof_label": "__PROVED__",
        "input": "Fact1:Billings is a city in the state of Montana in U.S.\nFact2:The state of Montana includes the cities of Butte, Helena, and Missoula.\nFact3:White Sulphur Springs and Butte are cities in the same state in U.S.\nFact4:The city of St Pierre is not in the state of Montana.\nFact5:Any city in Butte is not in St Pierre.\nFact6:A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\nHypothesis:Montana is home to the city of Missoula."
    },
    {
        "Symbol Mapping": {
            "InternationalStudent(x)": "x is an international student",
            "In(x, unitedStates)": "x is in the United States",
            "F1Visa(x)": "x has an F1 visa",
            "J1Visa(x)": "x has a J1 visa",
            "WantToWorkIn(x, unitedStates)": "x wants to work in the United States",
            "Apply(x, cpt)": "x applies for CPT",
            "Apply(x, opt)": "x applies for OPT",
            "⊕": "Exclusive OR (either one or the other, but not both)"
        },
        "Premise": {
            "P1": "∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))",
            "P2": "∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))",
            "P3": "InternationalStudent(mike)",
            "P4": "WantToWorkIn(mike, unitedStates) → Apply(mike, cpt)"
        },
        "Conclusion": "F1Visa(mike)",
        "Label": "Uncertain",
        "ori_premises": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "ori_conclusion": "Mike has an F1 visa.",
        "metadata": "FOLIO_192",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:International students in the US have either an F1 visa or a J1 visa.\nFact2:An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFact3:Mike is an international student.\nFact4:Mike needs to apply for CPT if he wants to work in the US.\nHypothesis:Mike has an F1 visa."
    },
    {
        "Symbol Mapping": {
            "InternationalStudent(x)": "x is an international student",
            "In(x, unitedStates)": "x is in the United States",
            "F1Visa(x)": "x has an F1 visa",
            "J1Visa(x)": "x has a J1 visa",
            "WantToWorkIn(x, unitedStates)": "x wants to work in the United States",
            "Apply(x, cpt)": "x applies for CPT",
            "Apply(x, opt)": "x applies for OPT",
            "⊕": "Exclusive OR (either one but not both)"
        },
        "Premise": {
            "P1": "∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))",
            "P2": "∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))",
            "P3": "InternationalStudent(mike)",
            "P4": "WantToWorkIn(mike, unitedStates) → Apply(mike, cpt)"
        },
        "Conclusion": "J1Visa(mike)",
        "Label": "Uncertain",
        "ori_premises": [
            "International students in the US have either an F1 visa or a J1 visa.",
            "An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.",
            "Mike is an international student.",
            "Mike needs to apply for CPT if he wants to work in the US."
        ],
        "ori_conclusion": "Mike has a J1 visa.",
        "metadata": "FOLIO_192",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:International students in the US have either an F1 visa or a J1 visa.\nFact2:An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFact3:Mike is an international student.\nFact4:Mike needs to apply for CPT if he wants to work in the US.\nHypothesis:Mike has a J1 visa."
    },
    {
        "Symbol Mapping": {
            "BrownSwissCattle(x)": "x is a Brown Swiss cattle",
            "Cow(x)": "x is a cow",
            "Pet(x)": "x is a pet",
            "DomesticatedAnimal(x)": "x is a domesticated animal",
            "Alligator(x)": "x is an alligator",
            "ted": "A constant representing the individual Ted"
        },
        "Premise": {
            "P1": "∀x (BrownSwissCattle(x) → Cow(x))",
            "P2": "∃x (Pet(x) ∧ BrownSwissCattle(x))",
            "P3": "∀x (Cow(x) → DomesticatedAnimal(x))",
            "P4": "∀x (Alligator(x) → ¬DomesticatedAnimal(x))",
            "P5": "Alligator(ted)"
        },
        "Conclusion": "Pet(ted)",
        "Label": "Uncertain",
        "ori_premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "ori_conclusion": "Ted is a pet.",
        "metadata": "FOLIO_442",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All Brown Swiss cattle are cows.\nFact2:Some pets are Brown Swiss Cattle.\nFact3:All cows are domesticated animals.\nFact4:Alligators are not domesticated animals.\nFact5:Ted is an alligator.\nHypothesis:Ted is a pet."
    },
    {
        "Symbol Mapping": {
            "BrownSwissCattle(x)": "x is a Brown Swiss cattle",
            "Cow(x)": "x is a cow",
            "Pet(x)": "x is a pet",
            "DomesticatedAnimal(x)": "x is a domesticated animal",
            "Aligator(x)": "x is an alligator",
            "ted": "The individual Ted"
        },
        "Premise": {
            "P1": "∀x (BrownSwissCattle(x) → Cow(x))",
            "P2": "∃x (Pet(x) ∧ BrownSwissCattle(x))",
            "P3": "∀x (Cow(x) → DomesticatedAnimal(x))",
            "P4": "∀x (Aligator(x) → ¬DomesticatedAnimal(x))",
            "P5": "Aligator(ted)"
        },
        "Conclusion": "Pet(ted) ∧ BrownSwissCattle(ted)",
        "Label": "False",
        "ori_premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "ori_conclusion": "Ted is a pet and Brown Swiss cattle",
        "metadata": "FOLIO_442",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All Brown Swiss cattle are cows.\nFact2:Some pets are Brown Swiss Cattle.\nFact3:All cows are domesticated animals.\nFact4:Alligators are not domesticated animals.\nFact5:Ted is an alligator.\nHypothesis:Ted is a pet and Brown Swiss cattle"
    },
    {
        "Symbol Mapping": {
            "BrownSwissCattle(x)": "x is a Brown Swiss cattle",
            "Cow(x)": "x is a cow",
            "Pet(x)": "x is a pet",
            "DomesticatedAnimal(x)": "x is a domesticated animal",
            "Aligator(x)": "x is an alligator",
            "BrownSwissCattle(ted)": "Ted is a Brown Swiss cattle",
            "Pet(ted)": "Ted is a pet",
            "¬": "Logical negation (not)",
            "→": "Logical implication (if...then)",
            "∧": "Logical conjunction (and)",
            "∀x": "Universal quantifier (for all x)",
            "∃x": "Existential quantifier (there exists an x)"
        },
        "Premise": {
            "P1": "∀x (BrownSwissCattle(x) → Cow(x))",
            "P2": "∃x (Pet(x) ∧ BrownSwissCattle(x))",
            "P3": "∀x (Cow(x) → DomesticatedAnimal(x))",
            "P4": "∀x (Aligator(x) → ¬DomesticatedAnimal(x))",
            "P5": "Aligator(ted)"
        },
        "Conclusion": "BrownSwissCattle(ted) → ¬Pet(ted)",
        "Label": "True",
        "ori_premises": [
            "All Brown Swiss cattle are cows.",
            "Some pets are Brown Swiss Cattle.",
            "All cows are domesticated animals.",
            "Alligators are not domesticated animals.",
            "Ted is an alligator."
        ],
        "ori_conclusion": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
        "metadata": "FOLIO_442",
        "proof_label": "__PROVED__",
        "input": "Fact1:All Brown Swiss cattle are cows.\nFact2:Some pets are Brown Swiss Cattle.\nFact3:All cows are domesticated animals.\nFact4:Alligators are not domesticated animals.\nFact5:Ted is an alligator.\nHypothesis:If Ted is a Brown Swiss cattle, then Ted is not a pet."
    },
    {
        "Symbol Mapping": {
            "PrivateIvyLeagueResearchUniversity(x)": "x is a private Ivy League research university",
            "MovedTo(x, y)": "x moved to location y",
            "MovedIn(x, y)": "x moved in year y",
            "ValuedAt(x, y)": "x is valued at y",
            "ResidentialCollege(x)": "x is a residential college",
            "At(x, y)": "x is located at y",
            "BenjaminFranklinCollege(x)": "x is Benjamin Franklin College",
            "BerkleyCollege(x)": "x is Berkeley College",
            "BranfordCollege(x)": "x is Branford College",
            "DavenportCollege(x)": "x is Davenport College",
            "EzraStilesCollege(x)": "x is Ezra Stiles College",
            "GraceHopperCollege(x)": "x is Grace Hopper College",
            "JonathanEdwardsCollege(x)": "x is Jonathan Edwards College",
            "MorseCollege(x)": "x is Morse College",
            "PauliMurrayCollege(x)": "x is Pauli Murray College",
            "PiersonCollege(x)": "x is Pierson College",
            "SaybrookCollege(x)": "x is Saybrook College",
            "SillimanCollege(x)": "x is Silliman College",
            "TimothyDwightCollege(x)": "x is Timothy Dwight College",
            "TrumbullCollege(x)": "x is Trumbull College"
        },
        "Premise": {
            "P1": "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "P2": "MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)",
            "P3": "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "P4": "∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))"
        },
        "Conclusion": "∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newHaven))",
        "Label": "True",
        "ori_premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "ori_conclusion": "A private Ivy League research university moved to New Haven.",
        "metadata": "FOLIO_234",
        "proof_label": "__PROVED__",
        "input": "Fact1:Yale University is a private Ivy League research university.\nFact2:Yale University moved to New Haven in 1716.\nFact3:Yale university's endowment was valued at $42.3 billion.\nFact4:A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nHypothesis:A private Ivy League research university moved to New Haven."
    },
    {
        "Symbol Mapping": {
            "PrivateIvyLeagueResearchUniversity(x)": "x is a private Ivy League research university",
            "MovedTo(x, y)": "x moved to location y",
            "MovedIn(x, y)": "x moved in year y",
            "ValuedAt(x, y)": "x is valued at y",
            "ResidentialCollege(x)": "x is a residential college",
            "At(x, y)": "x is located at y",
            "BenjaminFranklinCollege(x)": "x is Benjamin Franklin College",
            "BerkleyCollege(x)": "x is Berkeley College",
            "BranfordCollege(x)": "x is Branford College",
            "DavenportCollege(x)": "x is Davenport College",
            "EzraStilesCollege(x)": "x is Ezra Stiles College",
            "GraceHopperCollege(x)": "x is Grace Hopper College",
            "JonathanEdwardsCollege(x)": "x is Jonathan Edwards College",
            "MorseCollege(x)": "x is Morse College",
            "PauliMurrayCollege(x)": "x is Pauli Murray College",
            "PiersonCollege(x)": "x is Pierson College",
            "SaybrookCollege(x)": "x is Saybrook College",
            "SillimanCollege(x)": "x is Silliman College",
            "TimothyDwightCollege(x)": "x is Timothy Dwight College",
            "TrumbullCollege(x)": "x is Trumbull College",
            "LargestUniversityEndowmentOf(x, y)": "x has the largest university endowment compared to y"
        },
        "Premise": {
            "P1": "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "P2": "MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)",
            "P3": "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "P4": "∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))"
        },
        "Conclusion": "LargestUniversityEndowmentOf(yale, anyEducationalInstitution)",
        "Label": "Uncertain",
        "ori_premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "ori_conclusion": "Yale University has the largest university endowment of any educational institution.",
        "metadata": "FOLIO_234",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Yale University is a private Ivy League research university.\nFact2:Yale University moved to New Haven in 1716.\nFact3:Yale university's endowment was valued at $42.3 billion.\nFact4:A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nHypothesis:Yale University has the largest university endowment of any educational institution."
    },
    {
        "Symbol Mapping": {
            "PrivateIvyLeagueResearchUniversity(x)": "x is a private Ivy League research university",
            "MovedTo(x, y)": "x moved to location y",
            "MovedIn(x, y)": "x moved in year y",
            "ValuedAt(x, y)": "x is valued at y",
            "ResidentialCollege(x)": "x is a residential college",
            "At(x, y)": "x is at location y",
            "BenjaminFranklinCollege(x)": "x is Benjamin Franklin College",
            "BerkeleyCollege(x)": "x is Berkeley College",
            "BranfordCollege(x)": "x is Branford College",
            "DavenportCollege(x)": "x is Davenport College",
            "EzraStilesCollege(x)": "x is Ezra Stiles College",
            "GraceHopperCollege(x)": "x is Grace Hopper College",
            "JonathanEdwardsCollege(x)": "x is Jonathan Edwards College",
            "MorseCollege(x)": "x is Morse College",
            "PauliMurrayCollege(x)": "x is Pauli Murray College",
            "PiersonCollege(x)": "x is Pierson College",
            "SaybrookCollege(x)": "x is Saybrook College",
            "SillimanCollege(x)": "x is Silliman College",
            "TimothyDwightCollege(x)": "x is Timothy Dwight College",
            "TrumbullCollege(x)": "x is Trumbull College"
        },
        "Premise": {
            "P1": "PrivateIvyLeagueResearchUniversity(yaleUniversity)",
            "P2": "MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)",
            "P3": "ValuedAt(yaleUniversitysEndowment, 42point3billion)",
            "P4": "∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkeleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))"
        },
        "Conclusion": "ResidentialCollege(piersonCollege) ∧ At(piersonCollege, yale)",
        "Label": "True",
        "ori_premises": [
            "Yale University is a private Ivy League research university.",
            "Yale University moved to New Haven in 1716.",
            "Yale university's endowment was valued at $42.3 billion.",
            "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."
        ],
        "ori_conclusion": "Pierson College is a residential college at Yale.",
        "metadata": "FOLIO_234",
        "proof_label": "__PROVED__",
        "input": "Fact1:Yale University is a private Ivy League research university.\nFact2:Yale University moved to New Haven in 1716.\nFact3:Yale university's endowment was valued at $42.3 billion.\nFact4:A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nHypothesis:Pierson College is a residential college at Yale."
    },
    {
        "Symbol Mapping": {
            "BritishSitcom(x)": "x is a British sitcom",
            "Series(x)": "x is a series",
            "MemberOf(x, y)": "x is a member of y",
            "Starring(x, y)": "x stars y",
            "PilotedIn(x, y)": "x was piloted in y",
            "PilotedOn(x, y)": "x was piloted on y",
            "WorkingTitle(x, y)": "x is the working title of y",
            "UsedFor(x, y)": "x was used for y",
            "ScriptEditorFor(x, y)": "x is the script editor for y"
        },
        "Premise": {
            "P1": "∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))",
            "P2": "PilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)",
            "P3": "WorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)",
            "P4": "ScriptEditorFor(andrewCollins, badults)"
        },
        "Conclusion": "∃x (ScriptEditorFor(andrewCollins, x) ∧ Series(x) ∧ WorkingTitle(theSecretDudeSociety, x))",
        "Label": "True",
        "ori_premises": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "ori_conclusion": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "metadata": "FOLIO_120",
        "proof_label": "__PROVED__",
        "input": "Fact1:Badults is a British Sitcom series starring members of Pappy's.\nFact2:Badults was piloted in July 2013 on BBC Three.\nFact3:The Working title \"The Secret Dude Society\" was used for Badults.\nFact4:Andrew Collins was the script editor for Badults.\nHypothesis:Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."
    },
    {
        "Symbol Mapping": {
            "BritishSitcom(x)": "x is a British sitcom",
            "Series(x)": "x is a series",
            "MemberOf(x, y)": "x is a member of group y",
            "Starring(x, y)": "x stars y",
            "PilotedIn(x, y)": "x was piloted in time y",
            "PilotedOn(x, y)": "x was piloted on platform y",
            "WorkingTitle(x, y)": "x is a working title for y",
            "UsedFor(x, y)": "x was used for y",
            "ScriptEditorFor(x, y)": "x is the script editor for y",
            "¬(x)": "Negation of x",
            "∧": "Logical AND",
            "∨": "Logical OR",
            "→": "Logical implication",
            "∀x": "For all x",
            "∃x": "There exists an x"
        },
        "Premise": {
            "P1": "∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))",
            "P2": "PilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)",
            "P3": "WorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)",
            "P4": "ScriptEditorFor(andrewCollins, badults)"
        },
        "Conclusion": "∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bBCTwo) ∨ PilotedOn(y, bBCThree)))",
        "Label": "False",
        "ori_premises": [
            "Badults is a British Sitcom series starring members of Pappy's.",
            "Badults was piloted in July 2013 on BBC Three.",
            "The Working title \"The Secret Dude Society\" was used for Badults.",
            "Andrew Collins was the script editor for Badults."
        ],
        "ori_conclusion": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
        "metadata": "FOLIO_120",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Badults is a British Sitcom series starring members of Pappy's.\nFact2:Badults was piloted in July 2013 on BBC Three.\nFact3:The Working title \"The Secret Dude Society\" was used for Badults.\nFact4:Andrew Collins was the script editor for Badults.\nHypothesis:No members of Pappy's have starred in a show piloting on BBC Two or BBC Three."
    },
    {
        "Symbol Mapping": {
            "GrowthStock(x)": "x is a growth stock",
            "BoughtToEarnProfitFrom(x, rapidPriceAppreciation)": "x is bought to earn profits from rapid price appreciation",
            "BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation)": "x is bought to earn profits from rapid price appreciation (with earnProfit explicitly mentioned)",
            "SuitableFor(x, retirementFund)": "x is suitable for a retirement fund",
            "Stock(x)": "x is a stock",
            "MatureStock(x)": "x is a mature stock",
            "kO": "The specific entity KO (likely a stock or company)"
        },
        "Premise": {
            "P1": "∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "P2": "∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund))",
            "P3": "∃x (Stock(x) ∧ GrowthStock(x))",
            "P4": "∀x (MatureStock(x) → SuitableFor(x, retirementFund))",
            "P5": "MatureStock(kO)"
        },
        "Conclusion": "Stock(kO)",
        "Label": "Uncertain",
        "ori_premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "ori_conclusion": "KO is a stock.",
        "metadata": "FOLIO_322",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All growth stocks are bought to earn profits from rapid price appreciation.\nFact2:If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nFact3:Some stocks are growth stocks.\nFact4:All mature stocks are suitable for a retirement fund.\nFact5:KO is a mature stock.\nHypothesis:KO is a stock."
    },
    {
        "Symbol Mapping": {
            "GrowthStock(x)": "x is a growth stock",
            "BoughtToEarnProfitFrom(x, rapidPriceAppreciation)": "x is bought to earn profits from rapid price appreciation",
            "BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation)": "x is bought to earn profits from rapid price appreciation (with earnProfit explicitly mentioned)",
            "SuitableFor(x, retirementFund)": "x is suitable for a retirement fund",
            "Stock(x)": "x is a stock",
            "MatureStock(x)": "x is a mature stock",
            "MatureStock(kO)": "kO is a mature stock",
            "¬GrowthStock(kO)": "kO is not a growth stock"
        },
        "Premise": {
            "P1": "∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "P2": "∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund))",
            "P3": "∃x (Stock(x) ∧ GrowthStock(x))",
            "P4": "∀x (MatureStock(x) → SuitableFor(x, retirementFund))",
            "P5": "MatureStock(kO)"
        },
        "Conclusion": "¬GrowthStock(kO)",
        "Label": "False",
        "ori_premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "ori_conclusion": "KO is a stock and a growth stock.",
        "metadata": "FOLIO_322",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All growth stocks are bought to earn profits from rapid price appreciation.\nFact2:If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nFact3:Some stocks are growth stocks.\nFact4:All mature stocks are suitable for a retirement fund.\nFact5:KO is a mature stock.\nHypothesis:KO is a stock and a growth stock."
    },
    {
        "Symbol Mapping": {
            "GrowthStock(x)": "x is a growth stock",
            "BoughtToEarnProfitFrom(x, y)": "x is bought to earn profits from y",
            "Stock(x)": "x is a stock",
            "SuitableFor(x, y)": "x is suitable for y",
            "MatureStock(x)": "x is a mature stock",
            "kO": "A specific stock entity, KO",
            "rapidPriceAppreciation": "The concept of rapid price appreciation",
            "retirementFund": "The concept of a retirement fund",
            "earnProfit": "The concept of earning profit"
        },
        "Premise": {
            "P1": "∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))",
            "P2": "∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund))",
            "P3": "∃x (Stock(x) ∧ GrowthStock(x))",
            "P4": "∀x (MatureStock(x) → SuitableFor(x, retirementFund))",
            "P5": "MatureStock(kO)"
        },
        "Conclusion": "GrowthStock(kO) ∨ BoughtToEarnProfitFrom(kO, earnProfit, rapidPriceAppreciation) → ¬Stock(kO) ∧ ¬BoughtToEarnProfitFrom(kO, rapidPriceAppreciation)",
        "Label": "True",
        "ori_premises": [
            "All growth stocks are bought to earn profits from rapid price appreciation.",
            "If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.",
            "Some stocks are growth stocks.",
            "All mature stocks are suitable for a retirement fund.",
            "KO is a mature stock."
        ],
        "ori_conclusion": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
        "metadata": "FOLIO_322",
        "proof_label": "__PROVED__",
        "input": "Fact1:All growth stocks are bought to earn profits from rapid price appreciation.\nFact2:If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nFact3:Some stocks are growth stocks.\nFact4:All mature stocks are suitable for a retirement fund.\nFact5:KO is a mature stock.\nHypothesis:If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile."
    },
    {
        "Symbol Mapping": {
            "VehicleRegistrationPlateIn(x, y)": "x is a vehicle registration plate in location y",
            "BeginWith(x, num34)": "x begins with the number 34",
            "BeginWith(x, num35)": "x begins with the number 35",
            "FromIstanbul(x)": "x is from Istanbul",
            "Owns(x, y)": "x owns y"
        },
        "Premise": {
            "P1": "∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))",
            "P2": "∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))",
            "P3": "∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))",
            "P4": "∃x (Owns(tom, x) ∧ BeginWith(x, num35))",
            "P5": "∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))"
        },
        "Conclusion": "∃x (Owns(joe, x) ∧ BeginWith(x, num34))",
        "Label": "True",
        "ori_premises": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "ori_conclusion": "Joe's license plate begins with the number 34.",
        "metadata": "FOLIO_83",
        "proof_label": "__PROVED__",
        "input": "Fact1:All vehicle registration plates in Istanbul begin with the number 34.\nFact2:Plates that do not begin with the number 34 are not from Istanbul. \nFact3:Joe's vehicle registration plate is from Istanbul. \nFact4:Tom's license plate begins with the number 35. \nFact5:If a license plate begins with the number 35, then it does not begin with the number 34.\nHypothesis:Joe's license plate begins with the number 34."
    },
    {
        "Symbol Mapping": {
            "VehicleRegistrationPlateIn(x, y)": "x is a vehicle registration plate in location y",
            "BeginWith(x, num34)": "x begins with the number 34",
            "BeginWith(x, num35)": "x begins with the number 35",
            "FromIstanbul(x)": "x is from Istanbul",
            "Owns(x, y)": "x owns y"
        },
        "Premise": {
            "P1": "∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))",
            "P2": "∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))",
            "P3": "∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))",
            "P4": "∃x (Owns(tom, x) ∧ BeginWith(x, num35))",
            "P5": "∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))"
        },
        "Conclusion": "∃x (Owns(tom, x) ∧ VehicleRegistrationPlateIn(x, istanbul))",
        "Label": "False",
        "ori_premises": [
            "All vehicle registration plates in Istanbul begin with the number 34.",
            "Plates that do not begin with the number 34 are not from Istanbul. ",
            "Joe's vehicle registration plate is from Istanbul. ",
            "Tom's license plate begins with the number 35. ",
            "If a license plate begins with the number 35, then it does not begin with the number 34."
        ],
        "ori_conclusion": "Tom's license plate is from Istanbul.",
        "metadata": "FOLIO_83",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All vehicle registration plates in Istanbul begin with the number 34.\nFact2:Plates that do not begin with the number 34 are not from Istanbul. \nFact3:Joe's vehicle registration plate is from Istanbul. \nFact4:Tom's license plate begins with the number 35. \nFact5:If a license plate begins with the number 35, then it does not begin with the number 34.\nHypothesis:Tom's license plate is from Istanbul."
    },
    {
        "Symbol Mapping": {
            "At(x, y)": "x is at location y",
            "WorkIn(x, y, z)": "x works in job y at location z",
            "NeedToEarnMoneyToHelpPayFor(x, y)": "x needs to earn money to help pay for y",
            "OrderFrequently(x, y)": "x frequently orders y",
            "Enjoy(x, y)": "x enjoys y",
            "PickyEater(x)": "x is a picky eater",
            "Spend(x, y, z)": "x spends y amount of time doing z",
            "Spend(x, y, z, w)": "x spends y amount of time doing z at location w"
        },
        "Premise": {
            "P1": "∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "P2": "∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))",
            "P3": "∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))",
            "P4": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))",
            "P5": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "P6": "At(hannah, marysSchool)",
            "P7": "(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)))"
        },
        "Conclusion": "NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)",
        "Label": "Uncertain",
        "ori_premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "ori_conclusion": "Hannah needs to earn money to help pay for her college tuition.",
        "metadata": "FOLIO_368",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFact2:If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nFact3:People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nFact4:If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nFact5:If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFact6:Hannah is at Mary's school.\nFact7:Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nHypothesis:Hannah needs to earn money to help pay for her college tuition."
    },
    {
        "Symbol Mapping": {
            "At(x, y)": "x is at location y",
            "WorkIn(x, job, location)": "x works in a job of type job at location",
            "NeedToEarnMoneyToHelpPayFor(x, y)": "x needs to earn money to help pay for y",
            "OrderFrequently(x, y)": "x frequently orders y",
            "Enjoy(x, y)": "x enjoys y",
            "PickyEater(x)": "x is a picky eater",
            "Spend(x, time, activity)": "x spends a lot of time doing activity",
            "Spend(x, time, activity, location)": "x spends a lot of time doing activity at location"
        },
        "Premise": {
            "P1": "∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "P2": "∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))",
            "P3": "∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))",
            "P4": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))",
            "P5": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "P6": "At(hannah, marysSchool)",
            "P7": "(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)))"
        },
        "Conclusion": "¬(PickyEater(hannah) ∧ Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "Label": "True",
        "ori_premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "ori_conclusion": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "metadata": "FOLIO_368",
        "proof_label": "__PROVED__",
        "input": "Fact1:If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFact2:If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nFact3:People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nFact4:If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nFact5:If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFact6:Hannah is at Mary's school.\nFact7:Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nHypothesis:Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
    },
    {
        "Symbol Mapping": {
            "At(x, y)": "x is at location y",
            "WorkIn(x, job, location)": "x works in a job of type job at location",
            "NeedToEarnMoneyToHelpPayFor(x, expense)": "x needs to earn money to help pay for expense",
            "OrderFrequently(x, item)": "x orders item frequently",
            "Enjoy(x, diningHallMeal)": "x enjoys dining hall meals",
            "PickyEater(x)": "x is a picky eater",
            "Spend(x, aLotOfTime, activity)": "x spends a lot of time doing activity",
            "Spend(x, aLotOfTime, activity, location)": "x spends a lot of time doing activity at location"
        },
        "Premise": {
            "P1": "∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))",
            "P2": "∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))",
            "P3": "∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))",
            "P4": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))",
            "P5": "∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))",
            "P6": "At(hannah, marysSchool)",
            "P7": "(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)))"
        },
        "Conclusion": "PickyEater(hannah) ⊕ (Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))",
        "Label": "False",
        "ori_premises": [
            "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.",
            "If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.",
            "People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.",
            "If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.",
            "Hannah is at Mary's school.",
            "Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."
        ],
        "ori_conclusion": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "metadata": "FOLIO_368",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFact2:If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nFact3:People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nFact4:If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nFact5:If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFact6:Hannah is at Mary's school.\nFact7:Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\nHypothesis:Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."
    },
    {
        "Symbol Mapping": {
            "BakedSweet(x)": "x is a baked sweet",
            "Spicy(x)": "x is spicy",
            "Cupcake(x)": "x is a cupcake",
            "MalaHotpot(x)": "x is a mala hotpot",
            "Product(x)": "x is a product",
            "From(x, y)": "x is from y",
            "bakedByMelissa": "The entity Baked by Melissa",
            "driedThaiChili": "The entity Dried Thai Chili"
        },
        "Premise": {
            "P1": "∀x (BakedSweet(x) → ¬Spicy(x))",
            "P2": "∀x (Cupcake(x) → BakedSweet(x))",
            "P3": "∀x (MalaHotpot(x) → Spicy(x))",
            "P4": "∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))",
            "P5": "Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili) ∨ ¬BakedSweet(driedThaiChili)"
        },
        "Conclusion": "Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)",
        "Label": "False",
        "ori_premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "ori_conclusion": "Dried Thai chilies are products of Baked by Melissa.",
        "metadata": "FOLIO_319",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:No baked sweets are spicy.\nFact2:All cupcakes are baked sweets.\nFact3:All mala hotpots are spicy.\nFact4:All products from Baked by Melissa are cupcakes.\nFact5:Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nHypothesis:Dried Thai chilies are products of Baked by Melissa."
    },
    {
        "Symbol Mapping": {
            "BakedSweet(x)": "x is a baked sweet",
            "Spicy(x)": "x is spicy",
            "Cupcake(x)": "x is a cupcake",
            "MalaHotpot(x)": "x is a mala hotpot",
            "Product(x)": "x is a product",
            "From(x, y)": "x is from y",
            "bakedByMelissa": "The entity Baked by Melissa",
            "driedThaiChili": "The entity dried Thai chili"
        },
        "Premise": {
            "P1": "∀x (BakedSweet(x) → ¬Spicy(x))",
            "P2": "∀x (Cupcake(x) → BakedSweet(x))",
            "P3": "∀x (MalaHotpot(x) → Spicy(x))",
            "P4": "∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))",
            "P5": "Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili) ∨ ¬BakedSweet(driedThaiChili)"
        },
        "Conclusion": "¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa))",
        "Label": "True",
        "ori_premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "ori_conclusion": "Dried Thai chilies are not products of Baked by Melissa.",
        "metadata": "FOLIO_319",
        "proof_label": "__PROVED__",
        "input": "Fact1:No baked sweets are spicy.\nFact2:All cupcakes are baked sweets.\nFact3:All mala hotpots are spicy.\nFact4:All products from Baked by Melissa are cupcakes.\nFact5:Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nHypothesis:Dried Thai chilies are not products of Baked by Melissa."
    },
    {
        "Symbol Mapping": {
            "BakedSweet(x)": "x is a baked sweet",
            "Spicy(x)": "x is spicy",
            "Cupcake(x)": "x is a cupcake",
            "MalaHotpot(x)": "x is a mala hotpot",
            "Product(x)": "x is a product",
            "From(x, bakedByMelissa)": "x is from Baked by Melissa",
            "driedThaiChili": "A specific entity representing dried Thai chilies"
        },
        "Premise": {
            "P1": "∀x (BakedSweet(x) → ¬Spicy(x))",
            "P2": "∀x (Cupcake(x) → BakedSweet(x))",
            "P3": "∀x (MalaHotpot(x) → Spicy(x))",
            "P4": "∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))",
            "P5": "Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili) ∨ ¬BakedSweet(driedThaiChili)"
        },
        "Conclusion": "MalaHotpot(driedThaiChili)",
        "Label": "Uncertain",
        "ori_premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "ori_conclusion": "Dried Thai chilies are a mala hotpot.",
        "metadata": "FOLIO_319",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:No baked sweets are spicy.\nFact2:All cupcakes are baked sweets.\nFact3:All mala hotpots are spicy.\nFact4:All products from Baked by Melissa are cupcakes.\nFact5:Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nHypothesis:Dried Thai chilies are a mala hotpot."
    },
    {
        "Symbol Mapping": {
            "BakedSweet(x)": "x is a baked sweet",
            "Spicy(x)": "x is spicy",
            "Cupcake(x)": "x is a cupcake",
            "MalaHotpot(x)": "x is a mala hotpot",
            "Product(x)": "x is a product",
            "From(x, y)": "x is from y",
            "bakedByMelissa": "The entity Baked by Melissa",
            "driedThaiChili": "The entity dried Thai chili"
        },
        "Premise": {
            "P1": "∀x (BakedSweet(x) → ¬Spicy(x))",
            "P2": "∀x (Cupcake(x) → BakedSweet(x))",
            "P3": "∀x (MalaHotpot(x) → Spicy(x))",
            "P4": "∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))",
            "P5": "Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili) ∨ ¬BakedSweet(driedThaiChili)"
        },
        "Conclusion": "¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)) ∧ ¬BakedSweet(driedThaiChili)",
        "Label": "True",
        "ori_premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "ori_conclusion": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
        "metadata": "FOLIO_319",
        "proof_label": "__PROVED__",
        "input": "Fact1:No baked sweets are spicy.\nFact2:All cupcakes are baked sweets.\nFact3:All mala hotpots are spicy.\nFact4:All products from Baked by Melissa are cupcakes.\nFact5:Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nHypothesis:Dried Thai chilies are neither products of Baked by Melissa nor baked sweets."
    },
    {
        "Symbol Mapping": {
            "BakedSweet(x)": "x is a baked sweet",
            "Spicy(x)": "x is spicy",
            "Cupcake(x)": "x is a cupcake",
            "MalaHotpot(x)": "x is a mala hotpot",
            "Product(x)": "x is a product",
            "From(x, y)": "x is from y",
            "bakedByMelissa": "The entity Baked by Melissa",
            "driedThaiChili": "The entity Dried Thai Chili"
        },
        "Premise": {
            "P1": "∀x (BakedSweet(x) → ¬Spicy(x))",
            "P2": "∀x (Cupcake(x) → BakedSweet(x))",
            "P3": "∀x (MalaHotpot(x) → Spicy(x))",
            "P4": "∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))",
            "P5": "Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili) ∨ ¬BakedSweet(driedThaiChili)"
        },
        "Conclusion": "Cupcake(driedThaiChili) ∧ Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)",
        "Label": "False",
        "ori_premises": [
            "No baked sweets are spicy.",
            "All cupcakes are baked sweets.",
            "All mala hotpots are spicy.",
            "All products from Baked by Melissa are cupcakes.",
            "Dried Thai chilies are spicy or mala hotpots or not baked sweets."
        ],
        "ori_conclusion": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
        "metadata": "FOLIO_319",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:No baked sweets are spicy.\nFact2:All cupcakes are baked sweets.\nFact3:All mala hotpots are spicy.\nFact4:All products from Baked by Melissa are cupcakes.\nFact5:Dried Thai chilies are spicy or mala hotpots or not baked sweets.\nHypothesis:Dried Thai chilies are cupcakes and products of Baked by Melissa."
    },
    {
        "Symbol Mapping": {
            "ListedIn(x, yelpRecommendation)": "x is listed in Yelp's recommendations",
            "NegativeReview(y)": "y is a negative review",
            "Receive(x, y)": "x receives y",
            "HaveRating(x, y)": "x has a rating y",
            "GreaterThan(y, 4)": "y is greater than 4",
            "Provide(x, takeOutService)": "x provides take-out service",
            "PopularAmong(x, localResidents)": "x is popular among local residents",
            "TakeOutService(hamdenPlazaSubway)": "The Hamden Plaza Subway store provides take-out service"
        },
        "Premise": {
            "P1": "∀x (ListedIn(x, yelpRecommendation) → ¬∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P2": "∀x (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))",
            "P3": "∃x (¬Provide(x, takeOutService) ∧ ∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P4": "∀x (PopularAmong(x, localResidents) → ∃y (HaveRating(x, y) ∧ GreaterThan(y, 4)))",
            "P5": "(HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4)) ∨ PopularAmong(hamdenPlazaSubway, localResidents)"
        },
        "Conclusion": "∃x ((TakeOutService(hamdenPlazaSubway) ∧ NegativeReview(x) ∧ Receive(hamdenPlazaSubway, x)) → (HaveRating(hamdenPlazaSubway, y) ∧ GreaterThan(y, 4) ∧ ¬Provide(hamdenPlazaSubway, takeOutService)))",
        "Label": "False",
        "ori_premises": [
            "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "ori_conclusion": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
        "metadata": "FOLIO_306",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\nFact2:All restaurants with a rating greater than four are listed in Yelp’s recommendations.\nFact3:Some restaurants that do not provide take-out service receive many negative reviews.\nFact4:All restaurants that are popular among local residents have ratings greater than four.\nFact5:The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nHypothesis:If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service."
    },
    {
        "Symbol Mapping": {
            "ListedIn(x, yelpRecommendation)": "x is listed in Yelp's recommendations.",
            "NegativeReview(y)": "y is a negative review.",
            "Receive(x, y)": "x receives the review y.",
            "HaveRating(x, y)": "x has a rating y.",
            "GreaterThan(y, 4)": "y is greater than 4.",
            "Provide(x, takeOutService)": "x provides take-out service.",
            "PopularAmong(x, localResidents)": "x is popular among local residents.",
            "hamdenPlazaSubway": "The Hamden Plaza Subway store."
        },
        "Premise": {
            "P1": "∀x (ListedIn(x, yelpRecommendation) → ¬∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P2": "∀x (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))",
            "P3": "∃x (¬Provide(x, takeOutService) ∧ ∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P4": "∀x (PopularAmong(x, localResidents) → ∃y (HaveRating(x, y) ∧ GreaterThan(y, 4)))",
            "P5": "HaveRating(hamdenPlazaSubway, y) ∧ GreaterThan(y, 4) ∨ PopularAmong(hamdenPlazaSubway, localResidents)"
        },
        "Conclusion": "∃x (Provide(hamdenPlazaSubway, takeOutService) ∨ (NegativeReview(x) ∧ ¬Receive(hamdenPlazaSubway, x)))",
        "Label": "True",
        "ori_premises": [
            "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "ori_conclusion": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
        "metadata": "FOLIO_306",
        "proof_label": "__PROVED__",
        "input": "Fact1:If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\nFact2:All restaurants with a rating greater than four are listed in Yelp’s recommendations.\nFact3:Some restaurants that do not provide take-out service receive many negative reviews.\nFact4:All restaurants that are popular among local residents have ratings greater than four.\nFact5:The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nHypothesis:The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews."
    },
    {
        "Symbol Mapping": {
            "ListedIn(x, yelpRecommendation)": "x is listed in Yelp's recommendations.",
            "NegativeReview(y)": "y is a negative review.",
            "Receive(x, y)": "x (a restaurant) receives y (a review).",
            "HaveRating(x, y)": "x (a restaurant) has a rating y.",
            "GreaterThan(y, 4)": "y (a rating) is greater than 4.",
            "Provide(x, takeOutService)": "x (a restaurant) provides take-out service.",
            "PopularAmong(x, localResidents)": "x (a restaurant) is popular among local residents.",
            "hamdenPlazaSubway": "The Hamden Plaza Subway store."
        },
        "Premise": {
            "P1": "∀x (ListedIn(x, yelpRecommendation) → ¬∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P2": "∀x (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))",
            "P3": "∃x (¬Provide(x, takeOutService) ∧ ∃y (NegativeReview(y) ∧ Receive(x, y)))",
            "P4": "∀x (PopularAmong(x, localResidents) → ∃y (HaveRating(x, y) ∧ GreaterThan(y, 4)))",
            "P5": "HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ∨ PopularAmong(hamdenPlazaSubway, localResidents)"
        },
        "Conclusion": "¬Provide(hamdenPlazaSubway, takeOutService)",
        "Label": "Uncertain",
        "ori_premises": [
            "If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.",
            "All restaurants with a rating greater than four are listed in Yelp’s recommendations.",
            "Some restaurants that do not provide take-out service receive many negative reviews.",
            "All restaurants that are popular among local residents have ratings greater than four.",
            "The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."
        ],
        "ori_conclusion": "The Hamden Plaza store does not provide take-out service.",
        "metadata": "FOLIO_306",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews.\nFact2:All restaurants with a rating greater than four are listed in Yelp’s recommendations.\nFact3:Some restaurants that do not provide take-out service receive many negative reviews.\nFact4:All restaurants that are popular among local residents have ratings greater than four.\nFact5:The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\nHypothesis:The Hamden Plaza store does not provide take-out service."
    },
    {
        "Symbol Mapping": {
            "SuperheroMovie(x)": "x is a superhero movie",
            "In(y, x)": "Character y is in movie x",
            "GoodGuy(y)": "y is a good guy",
            "Wins(y)": "y wins",
            "Fight(x, y)": "x fights y",
            "BadGuy(y)": "y is a bad guy",
            "NamedAfter(x, y)": "Movie x is named after character y",
            "Fights(x, y)": "x fights y",
            "Win(x)": "x wins",
            "¬Wins(y)": "y does not win"
        },
        "Premise": {
            "P1": "∀x ∀y (SuperheroMovie(x) ∧ In(y, x) ∧ GoodGuy(y) → Wins(y))",
            "P2": "SuperheroMovie(theSurprisingAdventuresofSirDigbyChickenCaesar)",
            "P3": "∀x ∀y (GoodGuy(x) ∧ Fight(x, y) ⟷ BadGuy(y) ∧ Fight(y, x))",
            "P4": "Fight(sirDigby, sirDigbysNemesis)",
            "P5": "∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y))",
            "P6": "NamedAfter(theSurprisingAdventuresofSirDigbyChickenCaesar, sirDigby)",
            "P7": "∀x ∀y (Fights(x, y) ∧ Win(x) → ¬Wins(y))",
            "P8": "∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → In(y, x))"
        },
        "Conclusion": "¬Win(sirDigbysNemesis)",
        "Label": "True",
        "ori_premises": [
            "In superhero movies, the good guys always win.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.",
            "Good guys fight bad guys and vice versa.",
            "Sir Digby fights his nemesis.",
            "If a superhero movie is named after a character, that character is a good guy.",
            "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.",
            "If somebody wins a fight, the person they are fighting does not win.",
            "If a superhero movie is named after a character, that character is in the movie."
        ],
        "ori_conclusion": "Sir Digby’s nemesis does not win.",
        "metadata": "FOLIO_245",
        "proof_label": "__PROVED__",
        "input": "Fact1:In superhero movies, the good guys always win.\nFact2:The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nFact3:Good guys fight bad guys and vice versa.\nFact4:Sir Digby fights his nemesis.\nFact5:If a superhero movie is named after a character, that character is a good guy.\nFact6:The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nFact7:If somebody wins a fight, the person they are fighting does not win.\nFact8:If a superhero movie is named after a character, that character is in the movie.\nHypothesis:Sir Digby’s nemesis does not win."
    },
    {
        "Symbol Mapping": {
            "Book(x)": "x is a book",
            "Contains(x, knowledge)": "x contains knowledge",
            "ReadBook(x, y)": "x reads the book y",
            "Gains(x, knowledge)": "x gains knowledge",
            "Smarter(x)": "x becomes smarter"
        },
        "Premise": {
            "P1": "∀x (Book(x) → Contains(x, knowledge))",
            "P2": "∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))",
            "P3": "∀x (Gains(x, knowledge) → Smarter(x))",
            "P4": "ReadBook(harry, walden) ∧ Book(walden)"
        },
        "Conclusion": "Gains(harry, knowledge)",
        "Label": "True",
        "ori_premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book “Walden” by Henry Thoreau."
        ],
        "ori_conclusion": "Walden contains knowledge.",
        "metadata": "FOLIO_58",
        "proof_label": "__PROVED__",
        "input": "Fact1:Books contain tons of knowledge.\nFact2:When a person reads a book, that person gains knowledge. \nFact3:If a person gains knowledge, they become smarter.\nFact4:Harry read the book “Walden” by Henry Thoreau.\nHypothesis:Walden contains knowledge."
    },
    {
        "Symbol Mapping": {
            "Book(x)": "x is a book",
            "Contains(x, knowledge)": "x contains knowledge",
            "ReadBook(x, y)": "x reads the book y",
            "Gains(x, knowledge)": "x gains knowledge",
            "Smarter(x)": "x is smarter",
            "harry": "The individual Harry",
            "walden": "The book 'Walden'"
        },
        "Premise": {
            "P1": "∀x (Book(x) → Contains(x, knowledge))",
            "P2": "∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))",
            "P3": "∀x (Gains(x, knowledge) → Smarter(x))",
            "P4": "ReadBook(harry, walden) ∧ Book(walden)"
        },
        "Conclusion": "Smarter(harry)",
        "Label": "True",
        "ori_premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book “Walden” by Henry Thoreau."
        ],
        "ori_conclusion": "Harry is smarter than before.",
        "metadata": "FOLIO_58",
        "proof_label": "__PROVED__",
        "input": "Fact1:Books contain tons of knowledge.\nFact2:When a person reads a book, that person gains knowledge. \nFact3:If a person gains knowledge, they become smarter.\nFact4:Harry read the book “Walden” by Henry Thoreau.\nHypothesis:Harry is smarter than before."
    },
    {
        "Symbol Mapping": {
            "Book(x)": "x is a book",
            "Contains(x, knowledge)": "x contains knowledge",
            "ReadBook(x, y)": "x reads the book y",
            "Gains(x, knowledge)": "x gains knowledge",
            "Smarter(x)": "x is smarter",
            "ReadBook(harry, walden)": "Harry reads the book Walden",
            "Book(walden)": "Walden is a book",
            "GainKnowledge(x)": "x has gained knowledge"
        },
        "Premise": {
            "P1": "∀x (Book(x) → Contains(x, knowledge))",
            "P2": "∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))",
            "P3": "∀x (Gains(x, knowledge) → Smarter(x))",
            "P4": "ReadBook(harry, walden) ∧ Book(walden)"
        },
        "Conclusion": "∀x (Smarter(x) → GainKnowledge(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Books contain tons of knowledge.",
            "When a person reads a book, that person gains knowledge. ",
            "If a person gains knowledge, they become smarter.",
            "Harry read the book “Walden” by Henry Thoreau."
        ],
        "ori_conclusion": "A smarter person has gained knowledge.",
        "metadata": "FOLIO_58",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Books contain tons of knowledge.\nFact2:When a person reads a book, that person gains knowledge. \nFact3:If a person gains knowledge, they become smarter.\nFact4:Harry read the book “Walden” by Henry Thoreau.\nHypothesis:A smarter person has gained knowledge."
    },
    {
        "Symbol Mapping": {
            "NaturalLanguageProcessingTask(x)": "x is a natural language processing task",
            "LanguageGenerationTask(x)": "x is a language generation task",
            "LanguageUnderstandingTask(x)": "x is a language understanding task",
            "OutputSequence(x, text)": "The output of x is a text sequence",
            "⊕": "Exclusive OR (either one or the other, but not both)"
        },
        "Premise": {
            "P1": "∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))",
            "P2": "∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))",
            "P3": "NaturalLanguageProcessingTask(machineTranslation)",
            "P4": "OutputSequence(machineTranslation, text)"
        },
        "Conclusion": "LanguageGenerationTask(machineTranslation)",
        "Label": "True",
        "ori_premises": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "ori_conclusion": "Machine translation is a language generation task.",
        "metadata": "FOLIO_191",
        "proof_label": "__PROVED__",
        "input": "Fact1:A natural language processing task can be categorized as either a language generation task or a language understanding task.\nFact2:If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFact3:Machine translation is a natural language processing task.\nFact4:The output of machine translation is a text sequence.\nHypothesis:Machine translation is a language generation task."
    },
    {
        "Symbol Mapping": {
            "NaturalLanguageProcessingTask(x)": "x is a natural language processing task",
            "LanguageGenerationTask(x)": "x is a language generation task",
            "LanguageUnderstandingTask(x)": "x is a language understanding task",
            "OutputSequence(x, text)": "The output of x is a text sequence",
            "⊕": "Exclusive OR (XOR), meaning x can belong to exactly one of the two categories"
        },
        "Premise": {
            "P1": "∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))",
            "P2": "∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))",
            "P3": "NaturalLanguageProcessingTask(machineTranslation)",
            "P4": "OutputSequence(machineTranslation, text)"
        },
        "Conclusion": "LanguageUnderstandingTask(machineTranslation)",
        "Label": "False",
        "ori_premises": [
            "A natural language processing task can be categorized as either a language generation task or a language understanding task.",
            "If the output of a natural language processing task is a text sequence, then it is a language generation task.",
            "Machine translation is a natural language processing task.",
            "The output of machine translation is a text sequence."
        ],
        "ori_conclusion": "Machine translation is a language understanding task.",
        "metadata": "FOLIO_191",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:A natural language processing task can be categorized as either a language generation task or a language understanding task.\nFact2:If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFact3:Machine translation is a natural language processing task.\nFact4:The output of machine translation is a text sequence.\nHypothesis:Machine translation is a language understanding task."
    },
    {
        "Symbol Mapping": {
            "ManagedBuilding(x)": "x is a managed building",
            "AllowPet(x)": "Pets are allowed in the managed building x",
            "RentApartmentIn(y, x)": "Person y rents an apartment in the managed building x",
            "DepositRequired(y)": "A deposit is required for person y to rent an apartment",
            "SecurityDeposit(x)": "x is a security deposit",
            "MonthlyRentAt(y, z)": "y is the monthly rent at the managed building z",
            "MoreThan(x, y)": "x is more than y",
            "Equal(x, y)": "x is equal to y",
            "Cat(x)": "x is a cat",
            "BelongTo(x, y)": "x belongs to y",
            "Pet(x)": "x is a pet",
            "AllowedToMoveInWith(y, x, z)": "Person y is allowed to move into the managed building x with pet z",
            "uSD2000": "The monetary value $2000 in US dollars",
            "uSD1500": "The monetary value $1500 in US dollars",
            "fluffy": "The specific entity Fluffy (a cat)",
            "tom": "The specific entity Tom (a person)",
            "oliveGarden": "The specific entity The Olive Garden (a managed building)"
        },
        "Premise": {
            "P1": "∃x (ManagedBuilding(x) ∧ AllowPet(x))",
            "P2": "∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))",
            "P3": "∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y)))",
            "P4": "Cat(fluffy) ∧ BelongTo(fluffy, tom)",
            "P5": "∀x (Cat(x) → Pet(x))",
            "P6": "ManagedBuilding(oliveGarden)",
            "P7": "MonthlyRentAt(uSD2000, oliveGarden)",
            "P8": "MoreThan(uSD2000, uSD1500)",
            "P9": "∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))",
            "P10": "∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))"
        },
        "Conclusion": "RentApartmentIn(tom, oliveGarden)",
        "Label": "False",
        "ori_premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "ori_conclusion": "Tom will rent an apartment in The Olive Garden.",
        "metadata": "FOLIO_166",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Pets are allowed in some managed buildings.\nFact2:A deposit is required to rent an apartment in a managed building.\nFact3:The security deposit can be either equal to the monthly rent at a managed building or more.\nFact4:Fluffy is Tom's cat.\nFact5:Cats are pets.\nFact6:The Olive Garden is a managed building.\nFact7:The monthly rent at the Olive Garden is $2000.\nFact8:$2000 is more than $1500.\nFact9:Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFact10:If a managed building allows pets, then people are allowed to move in with a pet. \nHypothesis:Tom will rent an apartment in The Olive Garden."
    },
    {
        "Symbol Mapping": {
            "ManagedBuilding(x)": "x is a managed building",
            "AllowPet(x)": "Pets are allowed in building x",
            "RentApartmentIn(y, x)": "Person y rents an apartment in building x",
            "DepositRequired(y)": "A deposit is required for person y to rent an apartment",
            "SecurityDeposit(x)": "x is a security deposit",
            "MonthlyRentAt(y, z)": "y is the monthly rent at building z",
            "MoreThan(x, y)": "x is more than y",
            "Equal(x, y)": "x is equal to y",
            "Cat(x)": "x is a cat",
            "BelongTo(x, y)": "x belongs to y",
            "Pet(x)": "x is a pet",
            "AllowedToMoveInWith(y, x, z)": "Person y is allowed to move into building x with pet z",
            "uSD2000": "The monetary value $2000",
            "uSD1500": "The monetary value $1500",
            "oliveGarden": "The Olive Garden building",
            "fluffy": "Fluffy, a specific cat",
            "tom": "Tom, a specific person"
        },
        "Premise": {
            "P1": "∃x (ManagedBuilding(x) ∧ AllowPet(x))",
            "P2": "∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))",
            "P3": "∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y)))",
            "P4": "Cat(fluffy) ∧ BelongTo(fluffy, tom)",
            "P5": "∀x (Cat(x) → Pet(x))",
            "P6": "ManagedBuilding(oliveGarden)",
            "P7": "MonthlyRentAt(uSD2000, oliveGarden)",
            "P8": "MoreThan(uSD2000, uSD1500)",
            "P9": "∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))",
            "P10": "∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))"
        },
        "Conclusion": "AllowedToMoveInWith(tom, oliveGarden, fluffy)",
        "Label": "Uncertain",
        "ori_premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "ori_conclusion": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
        "metadata": "FOLIO_166",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Pets are allowed in some managed buildings.\nFact2:A deposit is required to rent an apartment in a managed building.\nFact3:The security deposit can be either equal to the monthly rent at a managed building or more.\nFact4:Fluffy is Tom's cat.\nFact5:Cats are pets.\nFact6:The Olive Garden is a managed building.\nFact7:The monthly rent at the Olive Garden is $2000.\nFact8:$2000 is more than $1500.\nFact9:Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFact10:If a managed building allows pets, then people are allowed to move in with a pet. \nHypothesis:Tom is allowed to move into an apartment in The Olive Garden with Fluffy."
    },
    {
        "Symbol Mapping": {
            "ManagedBuilding(x)": "x is a managed building",
            "AllowPet(x)": "Pets are allowed in the managed building x",
            "RentApartmentIn(y, x)": "Person y rents an apartment in the managed building x",
            "DepositRequired(y)": "A deposit is required for person y to rent an apartment",
            "SecurityDeposit(x)": "x is a security deposit",
            "MonthlyRentAt(y, z)": "y is the monthly rent at the managed building z",
            "MoreThan(x, y)": "x is more than y",
            "Equal(x, y)": "x is equal to y",
            "Cat(x)": "x is a cat",
            "BelongTo(x, y)": "x belongs to y",
            "Pet(x)": "x is a pet",
            "AllowedToMoveInWith(y, x, z)": "Person y is allowed to move into the managed building x with pet z",
            "SecurityDeposit(x, z)": "x is the security deposit for the managed building z"
        },
        "Premise": {
            "P1": "∃x (ManagedBuilding(x) ∧ AllowPet(x))",
            "P2": "∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))",
            "P3": "∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y)))",
            "P4": "Cat(fluffy) ∧ BelongTo(fluffy, tom)",
            "P5": "∀x (Cat(x) → Pet(x))",
            "P6": "ManagedBuilding(oliveGarden)",
            "P7": "MonthlyRentAt(uSD2000, oliveGarden)",
            "P8": "MoreThan(uSD2000, uSD1500)",
            "P9": "∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))",
            "P10": "∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))"
        },
        "Conclusion": "∀x (SecurityDeposit(x, oliveGarden) → MoreThan(x, uSD2000) ⊕ Equal(x, uSD2000))",
        "Label": "True",
        "ori_premises": [
            "Pets are allowed in some managed buildings.",
            "A deposit is required to rent an apartment in a managed building.",
            "The security deposit can be either equal to the monthly rent at a managed building or more.",
            "Fluffy is Tom's cat.",
            "Cats are pets.",
            "The Olive Garden is a managed building.",
            "The monthly rent at the Olive Garden is $2000.",
            "$2000 is more than $1500.",
            "Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.",
            "If a managed building allows pets, then people are allowed to move in with a pet. "
        ],
        "ori_conclusion": "The security deposit at the Olive Garden is either $2000 or more.",
        "metadata": "FOLIO_166",
        "proof_label": "__PROVED__",
        "input": "Fact1:Pets are allowed in some managed buildings.\nFact2:A deposit is required to rent an apartment in a managed building.\nFact3:The security deposit can be either equal to the monthly rent at a managed building or more.\nFact4:Fluffy is Tom's cat.\nFact5:Cats are pets.\nFact6:The Olive Garden is a managed building.\nFact7:The monthly rent at the Olive Garden is $2000.\nFact8:$2000 is more than $1500.\nFact9:Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFact10:If a managed building allows pets, then people are allowed to move in with a pet. \nHypothesis:The security deposit at the Olive Garden is either $2000 or more."
    },
    {
        "Symbol Mapping": {
            "BusinessOrganization(x)": "x is a business organization",
            "LegalEntity(x)": "x is a legal entity",
            "Company(x)": "x is a company",
            "PrivateCompany(x)": "x is a private company",
            "CreatedUnderLaw(x)": "x is created under law",
            "LegalObligation(x)": "x has legal obligations",
            "harvardWeeklyBookClub": "The Harvard Weekly Book Club"
        },
        "Premise": {
            "P1": "∀x (BusinessOrganization(x) → LegalEntity(x))",
            "P2": "∀x (Company(x) → BusinessOrganization(x))",
            "P3": "∀x (PrivateCompany(x) → Company(x))",
            "P4": "∀x (LegalEntity(x) → CreatedUnderLaw(x))",
            "P5": "∀x (LegalEntity(x) → LegalObligation(x))",
            "P6": "CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)"
        },
        "Conclusion": "LegalObligation(harvardWeeklyBookClub)",
        "Label": "Uncertain",
        "ori_premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "ori_conclusion": "The Harvard Weekly Book club has legal obligations.",
        "metadata": "FOLIO_352",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All business organizations are legal entities.\nFact2:All companies are business organizations.\nFact3:All private companies are companies.\nFact4:All legal entities are created under law. \nFact5:All legal entities have legal obligations.\nFact6:If the Harvard Weekly Book Club is created under law, then it is not a private company. \nHypothesis:The Harvard Weekly Book club has legal obligations."
    },
    {
        "Symbol Mapping": {
            "BusinessOrganization(x)": "x is a business organization",
            "LegalEntity(x)": "x is a legal entity",
            "Company(x)": "x is a company",
            "PrivateCompany(x)": "x is a private company",
            "CreatedUnderLaw(x)": "x is created under law",
            "LegalObligation(x)": "x has legal obligations",
            "harvardWeeklyBookClub": "The Harvard Weekly Book Club"
        },
        "Premise": {
            "P1": "∀x (BusinessOrganization(x) → LegalEntity(x))",
            "P2": "∀x (Company(x) → BusinessOrganization(x))",
            "P3": "∀x (PrivateCompany(x) → Company(x))",
            "P4": "∀x (LegalEntity(x) → CreatedUnderLaw(x))",
            "P5": "∀x (LegalEntity(x) → LegalObligation(x))",
            "P6": "CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)"
        },
        "Conclusion": "LegalObligation(harvardWeeklyBookClub) ∧ PrivateCompany(harvardWeeklyBookClub)",
        "Label": "False",
        "ori_premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "ori_conclusion": "The Harvard Weekly Book club has legal obligations and is a private company.",
        "metadata": "FOLIO_352",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All business organizations are legal entities.\nFact2:All companies are business organizations.\nFact3:All private companies are companies.\nFact4:All legal entities are created under law. \nFact5:All legal entities have legal obligations.\nFact6:If the Harvard Weekly Book Club is created under law, then it is not a private company. \nHypothesis:The Harvard Weekly Book club has legal obligations and is a private company."
    },
    {
        "Symbol Mapping": {
            "BusinessOrganization(x)": "x is a business organization",
            "LegalEntity(x)": "x is a legal entity",
            "Company(x)": "x is a company",
            "PrivateCompany(x)": "x is a private company",
            "CreatedUnderLaw(x)": "x is created under law",
            "LegalObligation(x)": "x has legal obligations",
            "harvardWeeklyBookClub": "The Harvard Weekly Book Club",
            "¬": "Logical negation (not)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive or (XOR, exactly one of the two conditions is true)"
        },
        "Premise": {
            "P1": "∀x (BusinessOrganization(x) → LegalEntity(x))",
            "P2": "∀x (Company(x) → BusinessOrganization(x))",
            "P3": "∀x (PrivateCompany(x) → Company(x))",
            "P4": "∀x (LegalEntity(x) → CreatedUnderLaw(x))",
            "P5": "∀x (LegalEntity(x) → LegalObligation(x))",
            "P6": "CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)"
        },
        "Conclusion": "PrivateCompany(harvardWeeklyBookClub) → LegalObligation(harvardWeeklyBookClub) ⊕ CreatedUnderLaw(harvardWeeklyBookClub)",
        "Label": "True",
        "ori_premises": [
            "All business organizations are legal entities.",
            "All companies are business organizations.",
            "All private companies are companies.",
            "All legal entities are created under law. ",
            "All legal entities have legal obligations.",
            "If the Harvard Weekly Book Club is created under law, then it is not a private company. "
        ],
        "ori_conclusion": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
        "metadata": "FOLIO_352",
        "proof_label": "__PROVED__",
        "input": "Fact1:All business organizations are legal entities.\nFact2:All companies are business organizations.\nFact3:All private companies are companies.\nFact4:All legal entities are created under law. \nFact5:All legal entities have legal obligations.\nFact6:If the Harvard Weekly Book Club is created under law, then it is not a private company. \nHypothesis:If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Invertebrate(x)": "x is an invertebrate",
            "Vertebrate(x)": "x is a vertebrate",
            "With(x, backbone)": "x has a backbone",
            "ReproduceBy(x, male-and-femaleMating)": "x reproduces by male-and-female mating",
            "Bee(x)": "x is a bee",
            "QueenBee(x)": "x is a queen bee",
            "harry": "A specific individual named Harry"
        },
        "Premise": {
            "P1": "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
            "P2": "∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))",
            "P3": "∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))",
            "P4": "∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))",
            "P5": "∀x (QueenBee(x) → Bee(x))",
            "P6": "Bee(harry)"
        },
        "Conclusion": "QueenBee(harry)",
        "Label": "Uncertain",
        "ori_premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "ori_conclusion": "Harry is a queen bee.",
        "metadata": "FOLIO_472",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Animals are either invertebrates or vertebrates.\nFact2:All animals with backbones reproduce by male-and-female mating. \nFact3:All vertebrate animals have a backbone.\nFact4:All bees do not reproduce by male-and-female mating.\nFact5:All queen bees are bees.\nFact6:Harry is a bee.\nHypothesis:Harry is a queen bee."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Invertebrate(x)": "x is an invertebrate",
            "Vertebrate(x)": "x is a vertebrate",
            "With(x, backbone)": "x has a backbone",
            "ReproduceBy(x, male-and-femaleMating)": "x reproduces by male-and-female mating",
            "Bee(x)": "x is a bee",
            "QueenBee(x)": "x is a queen bee",
            "Invertebrate(harry)": "Harry is an invertebrate",
            "QueenBee(harry)": "Harry is a queen bee"
        },
        "Premise": {
            "P1": "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
            "P2": "∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))",
            "P3": "∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))",
            "P4": "∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))",
            "P5": "∀x (QueenBee(x) → Bee(x))",
            "P6": "Bee(harry)"
        },
        "Conclusion": "Invertebrate(harry) ∨ QueenBee(harry)",
        "Label": "True",
        "ori_premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "ori_conclusion": "Harry is an invertebrate or a queen bee.",
        "metadata": "FOLIO_472",
        "proof_label": "__PROVED__",
        "input": "Fact1:Animals are either invertebrates or vertebrates.\nFact2:All animals with backbones reproduce by male-and-female mating. \nFact3:All vertebrate animals have a backbone.\nFact4:All bees do not reproduce by male-and-female mating.\nFact5:All queen bees are bees.\nFact6:Harry is a bee.\nHypothesis:Harry is an invertebrate or a queen bee."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Invertebrate(x)": "x is an invertebrate",
            "Vertebrate(x)": "x is a vertebrate",
            "With(x, backbone)": "x has a backbone",
            "ReproduceBy(x, male-and-femaleMating)": "x reproduces by male-and-female mating",
            "Bee(x)": "x is a bee",
            "QueenBee(x)": "x is a queen bee",
            "harry": "A specific individual named Harry"
        },
        "Premise": {
            "P1": "∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))",
            "P2": "∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))",
            "P3": "∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))",
            "P4": "∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))",
            "P5": "∀x (QueenBee(x) → Bee(x))",
            "P6": "Bee(harry)"
        },
        "Conclusion": "¬(Invertebrate(harry) ⊕ With(harry, backbone)) → ¬Invertebrate(harry) ∧ ¬QueenBee(harry)",
        "Label": "False",
        "ori_premises": [
            "Animals are either invertebrates or vertebrates.",
            "All animals with backbones reproduce by male-and-female mating. ",
            "All vertebrate animals have a backbone.",
            "All bees do not reproduce by male-and-female mating.",
            "All queen bees are bees.",
            "Harry is a bee."
        ],
        "ori_conclusion": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
        "metadata": "FOLIO_472",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Animals are either invertebrates or vertebrates.\nFact2:All animals with backbones reproduce by male-and-female mating. \nFact3:All vertebrate animals have a backbone.\nFact4:All bees do not reproduce by male-and-female mating.\nFact5:All queen bees are bees.\nFact6:Harry is a bee.\nHypothesis:If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, multipleBirth)": "x is born in a multiple birth",
            "SpendTimePlayingWith(x, sibling)": "x spends time playing with their siblings",
            "Sibling(x, y)": "y is a sibling of x",
            "BornTogether(y)": "y was born together with their sibling(s)",
            "ComplainAboutOften(x, annoyingSiblings)": "x complains often about annoying siblings",
            "LiveAt(x, home)": "x lives at home",
            "LiveWith(x, strangers)": "x lives with strangers",
            "SpendTime(luke, playingWith, siblings)": "Luke spends time playing with his siblings"
        },
        "Premise": {
            "P1": "∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))",
            "P2": "∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))",
            "P3": "∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))",
            "P4": "∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))",
            "P5": "∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))",
            "P6": "¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))"
        },
        "Conclusion": "SpendTime(luke, playingWith, siblings)",
        "Label": "Uncertain",
        "ori_premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "ori_conclusion": "Luke spends a lot of time hanging out and playing with his siblings.",
        "metadata": "FOLIO_379",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nFact2:If people have siblings who were born together, then they were born in a multiple birth.\nFact3:If people complain often about annoying siblings, then they have siblings who were born together.\nFact4:If people live at home, then they do not live with strangers.\nFact5:If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nFact6:Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nHypothesis:Luke spends a lot of time hanging out and playing with his siblings."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, multipleBirth)": "x is born in a multiple birth",
            "SpendTimePlayingWith(x, sibling)": "x spends time playing with their siblings",
            "Sibling(x, y)": "y is a sibling of x",
            "BornTogether(y)": "y was born together with their sibling(s)",
            "ComplainAboutOften(x, annoyingSiblings)": "x complains often about annoying siblings",
            "LiveAt(x, home)": "x lives at home",
            "LiveWith(x, strangers)": "x lives with strangers",
            "¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))": "It is not true that Luke being born in a multiple birth and living with strangers are in an exclusive-or (XOR) relationship"
        },
        "Premise": {
            "P1": "∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))",
            "P2": "∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))",
            "P3": "∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))",
            "P4": "∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))",
            "P5": "∀x (SpendTimePlayingWith(x, sibling) → LiveAt(x, home))",
            "P6": "¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))"
        },
        "Conclusion": "ComplainAboutOften(luke, annoyingSiblings)",
        "Label": "False",
        "ori_premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "ori_conclusion": "Luke complains often about annoying siblings.",
        "metadata": "FOLIO_379",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nFact2:If people have siblings who were born together, then they were born in a multiple birth.\nFact3:If people complain often about annoying siblings, then they have siblings who were born together.\nFact4:If people live at home, then they do not live with strangers.\nFact5:If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nFact6:Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nHypothesis:Luke complains often about annoying siblings."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, multipleBirth)": "x is born in a multiple birth",
            "SpendTimePlayingWith(x, sibling)": "x spends time playing with their siblings",
            "Sibling(x, y)": "y is a sibling of x",
            "BornTogether(y)": "y was born together with others",
            "ComplainAboutOften(x, annoyingSiblings)": "x complains often about annoying siblings",
            "LiveAt(x, home)": "x lives at home",
            "LiveWith(x, strangers)": "x lives with strangers",
            "BornIn(luke, multipleBirth)": "Luke is born in a multiple birth",
            "LiveWith(luke, strangers)": "Luke lives with strangers",
            "ComplainAbout(luke, often, annoyingSiblings)": "Luke complains often about annoying siblings"
        },
        "Premise": {
            "P1": "∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))",
            "P2": "∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))",
            "P3": "∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))",
            "P4": "∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))",
            "P5": "∀x (SpendTimePlayingWith(x, sibling) → LiveAt(x, home))",
            "P6": "¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))"
        },
        "Conclusion": "¬(BornIn(luke, multipleBirth) ∨ ComplainAbout(luke, often, annoyingSiblings))",
        "Label": "True",
        "ori_premises": [
            "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.",
            "If people have siblings who were born together, then they were born in a multiple birth.",
            "If people complain often about annoying siblings, then they have siblings who were born together.",
            "If people live at home, then they do not live with strangers.",
            "If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. ",
            "Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"
        ],
        "ori_conclusion": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
        "metadata": "FOLIO_379",
        "proof_label": "__PROVED__",
        "input": "Fact1:People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nFact2:If people have siblings who were born together, then they were born in a multiple birth.\nFact3:If people complain often about annoying siblings, then they have siblings who were born together.\nFact4:If people live at home, then they do not live with strangers.\nFact5:If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nFact6:Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\nHypothesis:Luke is neither born in a multiple birth nor complains often about annoying siblings."
    },
    {
        "Symbol Mapping": {
            "Cost(x, y)": "Represents that the cost of x is y (e.g., Cost(gRE, 205) means the GRE test costs $205).",
            "Cheaper(x, y)": "Represents that x is cheaper than y (e.g., Cheaper(205, 300) means $205 is cheaper than $300).",
            "ApplicantOf(x, y)": "Represents that x is an applicant for y (e.g., ApplicantOf(tom, gre) means Tom is an applicant for the GRE test).",
            "Prove(x, y)": "Represents that x proves y (e.g., Prove(x, economicHardship) means x proves economic hardship).",
            "ProvideTo(x, y, z)": "Represents that x provides y to z (e.g., ProvideTo(ets, financialAid, x) means ETS provides financial aid to x).",
            "LivingIn(x, y)": "Represents that x lives in y (e.g., LivingIn(tom, singleParentFamily) means Tom lives in a single-parent family).",
            "AvailableTo(x, y)": "Represents that x is available to y (e.g., AvailableTo(fewResources, tom) means few resources are available to Tom).",
            "OutOfWork(x)": "Represents that x is out of work (e.g., OutOfWork(tomsDad) means Tom's dad is out of work).",
            "ProvidesFinancialAidTo(x, y)": "Represents that x provides financial aid to y (e.g., ProvidesFinancialAidTo(eTS, tom) means ETS provides financial aid to Tom)."
        },
        "Premise": {
            "P1": "Cost(gRE, 205) ∧ Cheaper(205, 300)",
            "P2": "∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))",
            "P3": "∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))",
            "P4": "LivingIn(tom, singleParentFamily)",
            "P5": "OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)",
            "P6": "ApplicantOf(tom, gre)"
        },
        "Conclusion": "ProvidesFinancialAidTo(eTS, tom)",
        "Label": "True",
        "ori_premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "ori_conclusion": "ETS provides financial aid to Tom.",
        "metadata": "FOLIO_197",
        "proof_label": "__PROVED__",
        "input": "Fact1:It costs $205 to take the GRE test, which is cheaper than $300.\nFact2:ETS provides financial aid to those GRE applicants who prove economic hardship.\nFact3:Those living in single-parent families or having few resources available to them can prove economic hardship.\nFact4:Tom lives in a single-parent family.\nFact5:Tom's dad has been out of work, and Tom has few resources available to them. \nFact6:Tom is applying to take the GRE test.\nHypothesis:ETS provides financial aid to Tom."
    },
    {
        "Symbol Mapping": {
            "Cost(x, y)": "Represents the cost of x being y (e.g., Cost(gRE, 205) means the cost of the GRE test is $205).",
            "Cheaper(x, y)": "Represents that x is cheaper than y (e.g., Cheaper(205, 300) means $205 is cheaper than $300).",
            "ApplicantOf(x, y)": "Represents that x is an applicant of y (e.g., ApplicantOf(tom, gre) means Tom is an applicant of the GRE test).",
            "Prove(x, y)": "Represents that x proves y (e.g., Prove(tom, economicHardship) means Tom proves economic hardship).",
            "ProvideTo(x, y, z)": "Represents that x provides y to z (e.g., ProvideTo(ets, financialAid, tom) means ETS provides financial aid to Tom).",
            "LivingIn(x, y)": "Represents that x lives in y (e.g., LivingIn(tom, singleParentFamily) means Tom lives in a single-parent family).",
            "AvailableTo(x, y)": "Represents that x is available to y (e.g., AvailableTo(fewResources, tom) means few resources are available to Tom).",
            "OutOfWork(x)": "Represents that x is out of work (e.g., OutOfWork(tomsDad) means Tom's dad is out of work)."
        },
        "Premise": {
            "P1": "Cost(gRE, 205) ∧ Cheaper(205, 300)",
            "P2": "∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))",
            "P3": "∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))",
            "P4": "LivingIn(tom, singleParentFamily)",
            "P5": "OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)",
            "P6": "ApplicantOf(tom, gre)"
        },
        "Conclusion": "Cost(gRE, x) ∧ Cheaper(x, 300)",
        "Label": "True",
        "ori_premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "ori_conclusion": "It costs below US $300 to take the GRE test.",
        "metadata": "FOLIO_197",
        "proof_label": "__PROVED__",
        "input": "Fact1:It costs $205 to take the GRE test, which is cheaper than $300.\nFact2:ETS provides financial aid to those GRE applicants who prove economic hardship.\nFact3:Those living in single-parent families or having few resources available to them can prove economic hardship.\nFact4:Tom lives in a single-parent family.\nFact5:Tom's dad has been out of work, and Tom has few resources available to them. \nFact6:Tom is applying to take the GRE test.\nHypothesis:It costs below US $300 to take the GRE test."
    },
    {
        "Symbol Mapping": {
            "Cost(x, y)": "x costs y dollars",
            "Cheaper(x, y)": "x is cheaper than y",
            "ApplicantOf(x, y)": "x is an applicant of y",
            "Prove(x, y)": "x proves y",
            "ProvideTo(x, y, z)": "x provides y to z",
            "LivingIn(x, y)": "x lives in y",
            "AvailableTo(x, y)": "x is available to y",
            "OutOfWork(x)": "x is out of work",
            "ProvidesFinancialAidTo(x, y)": "x provides financial aid to y"
        },
        "Premise": {
            "P1": "Cost(gRE, 205) ∧ Cheaper(205, 300)",
            "P2": "∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))",
            "P3": "∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))",
            "P4": "LivingIn(tom, singleParentFamily)",
            "P5": "OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)",
            "P6": "ApplicantOf(tom, gre)"
        },
        "Conclusion": "¬(∃x ∃y (Applicant(x, gRE) ∧ ProvidesFinancialAidTo(y, x)))",
        "Label": "False",
        "ori_premises": [
            "It costs $205 to take the GRE test, which is cheaper than $300.",
            "ETS provides financial aid to those GRE applicants who prove economic hardship.",
            "Those living in single-parent families or having few resources available to them can prove economic hardship.",
            "Tom lives in a single-parent family.",
            "Tom's dad has been out of work, and Tom has few resources available to them. ",
            "Tom is applying to take the GRE test."
        ],
        "ori_conclusion": "No one taking the GRE test has financial aid provided to them by something.",
        "metadata": "FOLIO_197",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:It costs $205 to take the GRE test, which is cheaper than $300.\nFact2:ETS provides financial aid to those GRE applicants who prove economic hardship.\nFact3:Those living in single-parent families or having few resources available to them can prove economic hardship.\nFact4:Tom lives in a single-parent family.\nFact5:Tom's dad has been out of work, and Tom has few resources available to them. \nFact6:Tom is applying to take the GRE test.\nHypothesis:No one taking the GRE test has financial aid provided to them by something."
    },
    {
        "Symbol Mapping": {
            "Spill(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "NotablyTidy(x)": "x is notably tidy",
            "ClumsyFoodie(x)": "x is a clumsy foodie",
            "GoOutFrequentlyToFindToTry(x, newFoodRestaurant)": "x goes out frequently to find and try new food restaurants",
            "SpillOn(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "Cleanly(x)": "x is cleanly",
            "Value(x, order)": "x values order",
            "Value(x, spotlessness)": "x values spotlessness",
            "FamilyOf(y, x)": "y is a family member of x",
            "Prioritize(y, order)": "y prioritizes order",
            "Prioritize(y, spotlessness)": "y prioritizes spotlessness",
            "⊕": "Exclusive OR (XOR) operator, meaning either one or the other, but not both",
            "¬": "Negation operator, meaning 'not'"
        },
        "Premise": {
            "P1": "∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))",
            "P2": "∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))",
            "P3": "∀x (Cleanly(x) → NotablyTidy(x))",
            "P4": "∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))",
            "P5": "∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness))",
            "P6": "¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))"
        },
        "Conclusion": "NotablyTidy(peter)",
        "Label": "Uncertain",
        "ori_premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "ori_conclusion": "Peter is notably tidy.",
        "metadata": "FOLIO_361",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If people spill a lot of food on their clothing, then they are not notably tidy.\nFact2:All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nFact3:If people are cleanly, then they are notably tidy.\nFact4:If people value order and spotlessness, then they are cleanly.\nFact5:All people whose families prioritize order and spotlessness themselves value order and spotlessness.\nFact6:Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nHypothesis:Peter is notably tidy."
    },
    {
        "Symbol Mapping": {
            "Spill(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "NotablyTidy(x)": "x is notably tidy",
            "ClumsyFoodie(x)": "x is a clumsy foodie",
            "GoOutFrequentlyToFindToTry(x, newFoodRestaurant)": "x goes out frequently to find and try new food restaurants",
            "SpillOn(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "Cleanly(x)": "x is cleanly",
            "Value(x, order)": "x values order",
            "Value(x, spotlessness)": "x values spotlessness",
            "FamilyOf(y, x)": "y is a family member of x",
            "Prioritize(y, order)": "y prioritizes order",
            "Prioritize(y, spotlessness)": "y prioritizes spotlessness",
            "⊕": "Exclusive OR (XOR) operator, meaning exactly one of the two statements is true"
        },
        "Premise": {
            "P1": "∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))",
            "P2": "∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))",
            "P3": "∀x (Cleanly(x) → NotablyTidy(x))",
            "P4": "∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))",
            "P5": "∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)))",
            "P6": "¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))"
        },
        "Conclusion": "ClumsyFoodie(peter) ∨ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)))",
        "Label": "False",
        "ori_premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "ori_conclusion": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
        "metadata": "FOLIO_361",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If people spill a lot of food on their clothing, then they are not notably tidy.\nFact2:All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nFact3:If people are cleanly, then they are notably tidy.\nFact4:If people value order and spotlessness, then they are cleanly.\nFact5:All people whose families prioritize order and spotlessness themselves value order and spotlessness.\nFact6:Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nHypothesis:Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness."
    },
    {
        "Symbol Mapping": {
            "Spill(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "NotablyTidy(x)": "x is notably tidy",
            "ClumsyFoodie(x)": "x is a clumsy foodie",
            "GoOutFrequentlyToFindToTry(x, newFoodRestaurant)": "x goes out frequently to find and try new food restaurants",
            "SpillOn(x, aLotOfFood, clothing)": "x spills a lot of food on their clothing",
            "Cleanly(x)": "x is cleanly",
            "Value(x, order)": "x values order",
            "Value(x, spotlessness)": "x values spotlessness",
            "FamilyOf(y, x)": "y is a family member of x",
            "Prioritize(y, order)": "y prioritizes order",
            "Prioritize(y, spotlessness)": "y prioritizes spotlessness"
        },
        "Premise": {
            "P1": "∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))",
            "P2": "∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))",
            "P3": "∀x (Cleanly(x) → NotablyTidy(x))",
            "P4": "∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))",
            "P5": "∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness))",
            "P6": "¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))"
        },
        "Conclusion": "¬(ClumsyFoodie(peter) ⊕ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness))))",
        "Label": "True",
        "ori_premises": [
            "If people spill a lot of food on their clothing, then they are not notably tidy.",
            "All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.",
            "If people are cleanly, then they are notably tidy.",
            "If people value order and spotlessness, then they are cleanly.",
            "All people whose families prioritize order and spotlessness themselves value order and spotlessness.",
            "Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"
        ],
        "ori_conclusion": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
        "metadata": "FOLIO_361",
        "proof_label": "__PROVED__",
        "input": "Fact1:If people spill a lot of food on their clothing, then they are not notably tidy.\nFact2:All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nFact3:If people are cleanly, then they are notably tidy.\nFact4:If people value order and spotlessness, then they are cleanly.\nFact5:All people whose families prioritize order and spotlessness themselves value order and spotlessness.\nFact6:Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\nHypothesis:Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness."
    },
    {
        "Symbol Mapping": {
            "FirTree(x)": "x is a fir tree",
            "Evergreen(x)": "x is an evergreen",
            "ObjectOfWorship(x)": "x is an object of worship",
            "¬(x=y)": "x and y are not the same entity",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x",
            "∧": "Logical AND",
            "→": "Logical implication"
        },
        "Premise": {
            "P1": "∀x (FirTree(x) → Evergreen(x))",
            "P2": "∃x (ObjectOfWorship(x) ∧ FirTree(x))"
        },
        "Conclusion": "∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "All fir trees are evergreens.",
            "Some objects of worship are fir trees."
        ],
        "ori_conclusion": "Some evergreens are not objects of worship.",
        "metadata": "FOLIO_262",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All fir trees are evergreens.\nFact2:Some objects of worship are fir trees.\nHypothesis:Some evergreens are not objects of worship."
    },
    {
        "Symbol Mapping": {
            "MountainRange(x)": "x is a mountain range",
            "In(x, y)": "x is located in y",
            "Visited(x, y)": "x visited y",
            "Mine(x)": "x is a mine",
            "Donated(x)": "x has been donated",
            "⊕": "Exclusive OR (either one or the other, but not both)",
            "¬": "Negation (not)",
            "∀x": "For all x",
            "∃x": "There exists an x"
        },
        "Premise": {
            "P1": "MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))",
            "P2": "Visited(juanDeOnate, thePicurisMountains)",
            "P3": "In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)",
            "P4": "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"
        },
        "Conclusion": "∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, newMexico))",
        "Label": "True",
        "ori_premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "ori_conclusion": "Juan de Onate visited a mountain range in New Mexico.",
        "metadata": "FOLIO_124",
        "proof_label": "__PROVED__",
        "input": "Fact1:The Picuris Mountains are a mountain range in New Mexico or Texas.\nFact2:Juan de Onate visited the Picuris Mountains.\nFact3:The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFact4:There are no mountain ranges in texas that have mines that have been donated.\nHypothesis:Juan de Onate visited a mountain range in New Mexico."
    },
    {
        "Symbol Mapping": {
            "MountainRange(x)": "x is a mountain range",
            "In(x, y)": "x is located in y",
            "Visited(x, y)": "x visited y",
            "Mine(x)": "x is a mine",
            "Donated(x)": "x has been donated",
            "⊕": "Exclusive OR (either one or the other, but not both)",
            "∀x": "For all x (universal quantifier)",
            "∃x": "There exists an x (existential quantifier)",
            "¬": "Negation (not)"
        },
        "Premise": {
            "P1": "MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))",
            "P2": "Visited(juanDeOnate, thePicurisMountains)",
            "P3": "In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)",
            "P4": "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"
        },
        "Conclusion": "∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, texas))",
        "Label": "Uncertain",
        "ori_premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "ori_conclusion": "Juan de Onate visited a mountain range in Texas.",
        "metadata": "FOLIO_124",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:The Picuris Mountains are a mountain range in New Mexico or Texas.\nFact2:Juan de Onate visited the Picuris Mountains.\nFact3:The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFact4:There are no mountain ranges in texas that have mines that have been donated.\nHypothesis:Juan de Onate visited a mountain range in Texas."
    },
    {
        "Symbol Mapping": {
            "MountainRange(x)": "x is a mountain range",
            "In(x, y)": "x is located in y",
            "⊕": "Exclusive OR (either one or the other, but not both)",
            "Visited(x, y)": "x visited y",
            "Mine(x)": "x is a mine",
            "Donated(x)": "x has been donated",
            "¬": "Negation (not)",
            "∀x": "For all x"
        },
        "Premise": {
            "P1": "MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))",
            "P2": "Visited(juanDeOnate, thePicurisMountains)",
            "P3": "In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)",
            "P4": "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"
        },
        "Conclusion": "∀x (In(hardingPegmatiteMine, x) → ¬(MountainRange(x) ∧ In(x, newMexico)))",
        "Label": "False",
        "ori_premises": [
            "The Picuris Mountains are a mountain range in New Mexico or Texas.",
            "Juan de Onate visited the Picuris Mountains.",
            "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.",
            "There are no mountain ranges in texas that have mines that have been donated."
        ],
        "ori_conclusion": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "metadata": "FOLIO_124",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:The Picuris Mountains are a mountain range in New Mexico or Texas.\nFact2:Juan de Onate visited the Picuris Mountains.\nFact3:The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFact4:There are no mountain ranges in texas that have mines that have been donated.\nHypothesis:The Harding Pegmatite Mine is not located in a mountain range in New Mexico."
    },
    {
        "Symbol Mapping": {
            "Man(x)": "x is a man",
            "Taller(x, y)": "x is taller than y",
            "CanBlock(x, y)": "x can block y's shooting",
            "SameClass(x, y)": "x and y are in the same class",
            "JumpWhenShooting(x)": "x jumps when shooting",
            "GreatShooter(x)": "x is a great shooter"
        },
        "Premise": {
            "P1": "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))",
            "P2": "∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))",
            "P3": "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
            "P4": "Man(peter) ∧ Taller(peter, michael)",
            "P5": "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))",
            "P6": "¬CanBlock(michael, windy)",
            "P7": "∀x (JumpWhenShooting(x) → GreatShooter(x))"
        },
        "Conclusion": "∃x (Man(x) ∧ SameClass(x, michael) ∧ ¬Taller(peter, x))",
        "Label": "False",
        "ori_premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "ori_conclusion": "Peter is shorter than a man in Michael's class.",
        "metadata": "FOLIO_183",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If a man is taller than another man, the taller one can block the other's shooting.\nFact2:Michael is a man who is taller than everyone else in his class.\nFact3:If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFact4:Peter is a man who is taller than Michael.\nFact5:Michael can block any shooting from a person as long as the person does not jump when shooting.\nFact6:Michael cannot block Windy's shooting.\nFact7:Every shooter who can jump when shooting is a great shooter.\nHypothesis:Peter is shorter than a man in Michael's class."
    },
    {
        "Symbol Mapping": {
            "Man(x)": "x is a man",
            "Taller(x, y)": "x is taller than y",
            "CanBlock(x, y)": "x can block y's shooting",
            "SameClass(x, y)": "x and y are in the same class",
            "JumpWhenShooting(x)": "x jumps when shooting",
            "GreatShooter(x)": "x is a great shooter"
        },
        "Premise": {
            "P1": "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))",
            "P2": "∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))",
            "P3": "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
            "P4": "Man(peter) ∧ Taller(peter, michael)",
            "P5": "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))",
            "P6": "¬CanBlock(michael, windy)",
            "P7": "∀x (JumpWhenShooting(x) → GreatShooter(x))"
        },
        "Conclusion": "GreatShooter(windy)",
        "Label": "True",
        "ori_premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "ori_conclusion": "Windy is a great shooter.",
        "metadata": "FOLIO_183",
        "proof_label": "__PROVED__",
        "input": "Fact1:If a man is taller than another man, the taller one can block the other's shooting.\nFact2:Michael is a man who is taller than everyone else in his class.\nFact3:If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFact4:Peter is a man who is taller than Michael.\nFact5:Michael can block any shooting from a person as long as the person does not jump when shooting.\nFact6:Michael cannot block Windy's shooting.\nFact7:Every shooter who can jump when shooting is a great shooter.\nHypothesis:Windy is a great shooter."
    },
    {
        "Symbol Mapping": {
            "Man(x)": "x is a man",
            "Taller(x, y)": "x is taller than y",
            "CanBlock(x, y)": "x can block y's shooting",
            "SameClass(x, y)": "x and y are in the same class",
            "JumpWhenShooting(x)": "x jumps when shooting",
            "GreatShooter(x)": "x is a great shooter"
        },
        "Premise": {
            "P1": "∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))",
            "P2": "∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))",
            "P3": "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))",
            "P4": "Man(peter) ∧ Taller(peter, michael)",
            "P5": "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))",
            "P6": "¬CanBlock(michael, windy)",
            "P7": "∀x (JumpWhenShooting(x) → GreatShooter(x))"
        },
        "Conclusion": "CanBlock(peter, windy)",
        "Label": "Uncertain",
        "ori_premises": [
            "If a man is taller than another man, the taller one can block the other's shooting.",
            "Michael is a man who is taller than everyone else in his class.",
            "If person x is taller than person y, and person y is taller than person z, then x is taller than z",
            "Peter is a man who is taller than Michael.",
            "Michael can block any shooting from a person as long as the person does not jump when shooting.",
            "Michael cannot block Windy's shooting.",
            "Every shooter who can jump when shooting is a great shooter."
        ],
        "ori_conclusion": "Peter can block Windy's shooting.",
        "metadata": "FOLIO_183",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If a man is taller than another man, the taller one can block the other's shooting.\nFact2:Michael is a man who is taller than everyone else in his class.\nFact3:If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFact4:Peter is a man who is taller than Michael.\nFact5:Michael can block any shooting from a person as long as the person does not jump when shooting.\nFact6:Michael cannot block Windy's shooting.\nFact7:Every shooter who can jump when shooting is a great shooter.\nHypothesis:Peter can block Windy's shooting."
    },
    {
        "Symbol Mapping": {
            "Cove(x)": "x is a cove",
            "NamedAfter(x, y)": "x is named after y",
            "LocatedIn(x, y)": "x is located in y",
            "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))": "For all x, y, and z, if x is located in y and y is located in z, then x is located in z"
        },
        "Premise": {
            "P1": "Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)",
            "P2": "LocatedIn(barutinCove, snowIsland)",
            "P3": "LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)",
            "P4": "LocatedIn(southShetlandIslands, antarctica)",
            "P5": "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
        },
        "Conclusion": "∀x (LocatedIn(x, antarctica) → NamedAfter(barutinCove, x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "ori_conclusion": "Barutin Cove is named after all islands in Antarctica.",
        "metadata": "FOLIO_151",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nFact2:Barutin Cove is on the southwest coast of Snow Island.\nFact3:Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nFact4:Antarctica is located on the South Shetland Islands. \nFact5:If place A is located in place B and place B is located in place C, then place A is located in place C.\nHypothesis:Barutin Cove is named after all islands in Antarctica."
    },
    {
        "Symbol Mapping": {
            "Cove(x)": "x is a cove",
            "NamedAfter(x, y)": "x is named after y",
            "LocatedIn(x, y)": "x is located in y",
            "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))": "If x is located in y and y is located in z, then x is located in z",
            "∃x ∃y (Cove(x) ∧ LocatedIn(x, antarctica) ∧ NameAfter(x, y) ∧ LocatedIn(y, bulgaria))": "There exists a cove x in Antarctica named after a place y in Bulgaria"
        },
        "Premise": {
            "P1": "Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)",
            "P2": "LocatedIn(barutinCove, snowIsland)",
            "P3": "LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)",
            "P4": "LocatedIn(southShetlandIslands, antarctica)",
            "P5": "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
        },
        "Conclusion": "∃x ∃y (Cove(x) ∧ LocatedIn(x, antarctica) ∧ NameAfter(x, y) ∧ LocatedIn(y, bulgaria))",
        "Label": "True",
        "ori_premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "ori_conclusion": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "metadata": "FOLIO_151",
        "proof_label": "__PROVED__",
        "input": "Fact1:Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nFact2:Barutin Cove is on the southwest coast of Snow Island.\nFact3:Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nFact4:Antarctica is located on the South Shetland Islands. \nFact5:If place A is located in place B and place B is located in place C, then place A is located in place C.\nHypothesis:There is at least one cove in Antarctica named after a place in Bulgaria."
    },
    {
        "Symbol Mapping": {
            "Cove(x)": "x is a cove",
            "NamedAfter(x, y)": "x is named after y",
            "LocatedIn(x, y)": "x is located in y",
            "¬LocatedIn(x, y)": "x is not located in y",
            "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))": "For all x, y, and z, if x is located in y and y is located in z, then x is located in z"
        },
        "Premise": {
            "P1": "Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)",
            "P2": "LocatedIn(barutinCove, snowIsland)",
            "P3": "LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)",
            "P4": "LocatedIn(southShetlandIslands, antarctica)",
            "P5": "∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))"
        },
        "Conclusion": "¬LocatedIn(barutinCove, antarctica)",
        "Label": "False",
        "ori_premises": [
            "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.",
            "Barutin Cove is on the southwest coast of Snow Island.",
            "Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.",
            "Antarctica is located on the South Shetland Islands. ",
            "If place A is located in place B and place B is located in place C, then place A is located in place C."
        ],
        "ori_conclusion": "Barutin Cove is not located in Antarctica.",
        "metadata": "FOLIO_151",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nFact2:Barutin Cove is on the southwest coast of Snow Island.\nFact3:Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nFact4:Antarctica is located on the South Shetland Islands. \nFact5:If place A is located in place B and place B is located in place C, then place A is located in place C.\nHypothesis:Barutin Cove is not located in Antarctica."
    },
    {
        "Symbol Mapping": {
            "Affection(x)": "x has the property of being affection",
            "Love(x)": "x has the property of being love",
            "Positive(x)": "x has the property of being positive"
        },
        "Premise": {
            "P1": "∃x (Affection(x) ∧ Love(x))",
            "P2": "∃x (Love(x) ∧ Positive(x))"
        },
        "Conclusion": "∃x (Affection(x) ∧ Positive(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Some affection is love.",
            "Some love is positive."
        ],
        "ori_conclusion": "Some affection is positive.",
        "metadata": "FOLIO_295",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Some affection is love.\nFact2:Some love is positive.\nHypothesis:Some affection is positive."
    },
    {
        "Symbol Mapping": {
            "Passenger(x)": "x is a passenger",
            "Transport(x, y)": "x can transport passenger y",
            "OneSeater(x)": "x is a one-seater",
            "TeslaModel3(x)": "x is a Tesla Model 3",
            "SingleSeat(x)": "x is a single-seat vehicle",
            "ElectricCar(x)": "x is an electric car",
            "SoloEV(x)": "x is a Solo EV car",
            "Car(x)": "x is a car",
            "johnsCar": "The car owned by John"
        },
        "Premise": {
            "P1": "∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y=z)) → ¬OneSeater(x))",
            "P2": "∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y=z))))",
            "P3": "∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))",
            "P4": "∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))",
            "P5": "¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))"
        },
        "Conclusion": "TeslaModel3(johnsCar)",
        "Label": "Uncertain",
        "ori_premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "ori_conclusion": "John's car is a Tesla Model 3.",
        "metadata": "FOLIO_315",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If something can transport multiple passengers, then they are not one-seaters.\nFact2:All Tesla Model 3 can transport multiple passengers.\nFact3:All single-seat electric cars are one-seaters.\nFact4:All Solo EV cars are single-seat electric cars. \nFact5:If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nHypothesis:John's car is a Tesla Model 3."
    },
    {
        "Symbol Mapping": {
            "Passenger(x)": "x is a passenger",
            "Transport(x, y)": "x transports y",
            "OneSeater(x)": "x is a one-seater",
            "TeslaModel3(x)": "x is a Tesla Model 3",
            "SingleSeat(x)": "x is a single-seat vehicle",
            "ElectricCar(x)": "x is an electric car",
            "SoloEV(x)": "x is a Solo EV",
            "Car(x)": "x is a car",
            "johnsCar": "John's car"
        },
        "Premise": {
            "P1": "∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y=z)) → ¬OneSeater(x))",
            "P2": "∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y=z))))",
            "P3": "∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))",
            "P4": "∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))",
            "P5": "¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(johnsCar) ∧ ElectricCar(johnsCar)))"
        },
        "Conclusion": "SoloEV(johnsCar) ∧ Car(johnsCar)",
        "Label": "False",
        "ori_premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "ori_conclusion": "John's car is a Solo EV.",
        "metadata": "FOLIO_315",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If something can transport multiple passengers, then they are not one-seaters.\nFact2:All Tesla Model 3 can transport multiple passengers.\nFact3:All single-seat electric cars are one-seaters.\nFact4:All Solo EV cars are single-seat electric cars. \nFact5:If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nHypothesis:John's car is a Solo EV."
    },
    {
        "Symbol Mapping": {
            "Passenger(x)": "x is a passenger",
            "Transport(x, y)": "x can transport y",
            "OneSeater(x)": "x is a one-seater",
            "TeslaModel3(x)": "x is a Tesla Model 3",
            "SingleSeat(x)": "x is a single-seat vehicle",
            "ElectricCar(x)": "x is an electric car",
            "SoloEV(x)": "x is a Solo EV",
            "Car(x)": "x is a car",
            "johnsCar": "The car owned by John"
        },
        "Premise": {
            "P1": "∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y = z)) → ¬OneSeater(x))",
            "P2": "∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, z) ∧ ¬(y = z))))",
            "P3": "∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))",
            "P4": "∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))",
            "P5": "¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))"
        },
        "Conclusion": "¬(SoloEV(johnsCar) ∧ Car(johnsCar))",
        "Label": "True",
        "ori_premises": [
            "If something can transport multiple passengers, then they are not one-seaters.",
            "All Tesla Model 3 can transport multiple passengers.",
            "All single-seat electric cars are one-seaters.",
            "All Solo EV cars are single-seat electric cars. ",
            "If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "
        ],
        "ori_conclusion": "John's car is not a Solo EV.",
        "metadata": "FOLIO_315",
        "proof_label": "__PROVED__",
        "input": "Fact1:If something can transport multiple passengers, then they are not one-seaters.\nFact2:All Tesla Model 3 can transport multiple passengers.\nFact3:All single-seat electric cars are one-seaters.\nFact4:All Solo EV cars are single-seat electric cars. \nFact5:If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \nHypothesis:John's car is not a Solo EV."
    },
    {
        "Symbol Mapping": {
            "PetersPet(x)": "x is Peter's pet",
            "Mammal(x)": "x is a mammal",
            "Animal(x)": "x is an animal",
            "Monkey(x)": "x is a monkey",
            "Bird(x)": "x is a bird",
            "CanFly(x)": "x can fly",
            "Breathe(x)": "x can breathe",
            "Wing(y)": "y is a wing",
            "Have(x, y)": "x has y",
            "PeterSPet(rock)": "Rock is Peter's pet",
            "¬(y=z)": "y and z are distinct entities",
            "⊕": "Exclusive OR (either one or the other, but not both)"
        },
        "Premise": {
            "P1": "∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))",
            "P2": "∀x (Monkey(x) → Mammal(x))",
            "P3": "∀x (PetersPet(x) → Monkey(x) ⊕ Bird(x))",
            "P4": "∀x (Bird(x) → CanFly(x))",
            "P5": "∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))",
            "P6": "∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P7": "PeterSPet(rock)",
            "P8": "CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)"
        },
        "Conclusion": "Monkey(rock)",
        "Label": "Uncertain",
        "ori_premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "ori_conclusion": "Rock is a monkey.",
        "metadata": "FOLIO_467",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All of Peter's pets that are mammals are also animals.\nFact2:All monkeys are mammals. \nFact3:Peter's pets are all either monkeys or birds. \nFact4:Peter's birds can fly.\nFact5:All animals that are Peter's pets can breathe.\nFact6:If Peter's pet can fly, then it has wings.\nFact7:Rock is Peter's pet.\nFact8:Rock can fly, or Rock is a bird, or Rock cannot breathe. \nHypothesis:Rock is a monkey."
    },
    {
        "Symbol Mapping": {
            "PetersPet(x)": "x is Peter's pet",
            "Mammal(x)": "x is a mammal",
            "Animal(x)": "x is an animal",
            "Monkey(x)": "x is a monkey",
            "Bird(x)": "x is a bird",
            "CanFly(x)": "x can fly",
            "Breathe(x)": "x can breathe",
            "Wing(x)": "x is a wing",
            "Have(x, y)": "x has y",
            "PeterSPet(rock)": "Rock is Peter's pet",
            "CanFly(rock)": "Rock can fly",
            "¬Breathe(rock)": "Rock cannot breathe",
            "∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))": "x has two distinct wings"
        },
        "Premise": {
            "P1": "∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))",
            "P2": "∀x (Monkey(x) → Mammal(x))",
            "P3": "∀x (PetersPet(x) → Monkey(x) ⊕ Bird(x))",
            "P4": "∀x (Bird(x) → CanFly(x))",
            "P5": "∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))",
            "P6": "∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P7": "PeterSPet(rock)",
            "P8": "CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)"
        },
        "Conclusion": "∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z))",
        "Label": "True",
        "ori_premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "ori_conclusion": "Rock has wings.",
        "metadata": "FOLIO_467",
        "proof_label": "__PROVED__",
        "input": "Fact1:All of Peter's pets that are mammals are also animals.\nFact2:All monkeys are mammals. \nFact3:Peter's pets are all either monkeys or birds. \nFact4:Peter's birds can fly.\nFact5:All animals that are Peter's pets can breathe.\nFact6:If Peter's pet can fly, then it has wings.\nFact7:Rock is Peter's pet.\nFact8:Rock can fly, or Rock is a bird, or Rock cannot breathe. \nHypothesis:Rock has wings."
    },
    {
        "Symbol Mapping": {
            "PetersPet(x)": "x is Peter's pet",
            "Mammal(x)": "x is a mammal",
            "Animal(x)": "x is an animal",
            "Monkey(x)": "x is a monkey",
            "Bird(x)": "x is a bird",
            "CanFly(x)": "x can fly",
            "Wing(x)": "x is a wing",
            "Have(x, y)": "x has y",
            "PeterSPet(rock)": "Rock is Peter's pet",
            "CanFly(rock)": "Rock can fly",
            "¬Breathe(rock)": "Rock cannot breathe",
            "¬(y = z)": "y and z are distinct entities",
            "¬(∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z)))": "Rock does not have wings"
        },
        "Premise": {
            "P1": "∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))",
            "P2": "∀x (Monkey(x) → Mammal(x))",
            "P3": "∀x (PetersPet(x) → Monkey(x) ⊕ Bird(x))",
            "P4": "∀x (Bird(x) → CanFly(x))",
            "P5": "∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))",
            "P6": "∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P7": "PeterSPet(rock)",
            "P8": "CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)"
        },
        "Conclusion": "¬(∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z)))",
        "Label": "False",
        "ori_premises": [
            "All of Peter's pets that are mammals are also animals.",
            "All monkeys are mammals. ",
            "Peter's pets are all either monkeys or birds. ",
            "Peter's birds can fly.",
            "All animals that are Peter's pets can breathe.",
            "If Peter's pet can fly, then it has wings.",
            "Rock is Peter's pet.",
            "Rock can fly, or Rock is a bird, or Rock cannot breathe. "
        ],
        "ori_conclusion": "Rock does not have wings.",
        "metadata": "FOLIO_467",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All of Peter's pets that are mammals are also animals.\nFact2:All monkeys are mammals. \nFact3:Peter's pets are all either monkeys or birds. \nFact4:Peter's birds can fly.\nFact5:All animals that are Peter's pets can breathe.\nFact6:If Peter's pet can fly, then it has wings.\nFact7:Rock is Peter's pet.\nFact8:Rock can fly, or Rock is a bird, or Rock cannot breathe. \nHypothesis:Rock does not have wings."
    },
    {
        "Symbol Mapping": {
            "Make(x, weddingPlan)": "x makes wedding plans",
            "Engaged(x)": "x is engaged",
            "InviteToComeTo(x, y, wedding)": "x invites y to come to the wedding",
            "Have(x, wellAttendedWedding)": "x has a well-attended wedding",
            "Have(x, largerFamily)": "x has a larger family",
            "Invite(x, y, comeTo, wedding)": "x invites y to come to the wedding",
            "Engaged(john)": "John is engaged",
            "Have(john, largeFamily)": "John has a larger family"
        },
        "Premise": {
            "P1": "∀x (Make(x, weddingPlan) → Engaged(x))",
            "P2": "∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))",
            "P3": "∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))",
            "P4": "∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))",
            "P5": "Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)",
            "P6": "Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))"
        },
        "Conclusion": "Have(john, largeFamily)",
        "Label": "False",
        "ori_premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "ori_conclusion": "John has a larger family.",
        "metadata": "FOLIO_330",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All people who make wedding plans are people who are engaged.\nFact2:All people who invite others to come to their ceremony make wedding plans.\nFact3:Anyone who has a well-attended wedding invites others to come to their ceremony.\nFact4:Some people that have well-attended weddings have larger families.\nFact5:If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nFact6:If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nHypothesis:John has a larger family."
    },
    {
        "Symbol Mapping": {
            "Make(x, weddingPlan)": "x makes wedding plans",
            "Engaged(x)": "x is engaged",
            "InviteToComeTo(x, y, wedding)": "x invites y to come to the wedding",
            "Have(x, wellAttendedWedding)": "x has a well-attended wedding",
            "Have(x, largerFamily)": "x has a larger family",
            "Invite(x, y, comeTo, wedding)": "x invites y to come to the wedding",
            "Engaged(john)": "John is engaged",
            "Make(john, weddingPlan)": "John makes wedding plans",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "∨": "Logical disjunction (or)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive or (either...or)",
            "∀x": "For all x (universal quantifier)",
            "∃x": "There exists an x (existential quantifier)"
        },
        "Premise": {
            "P1": "∀x (Make(x, weddingPlan) → Engaged(x))",
            "P2": "∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))",
            "P3": "∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))",
            "P4": "∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))",
            "P5": "Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)",
            "P6": "Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))"
        },
        "Conclusion": "¬Have(john, largerFamily)",
        "Label": "True",
        "ori_premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "ori_conclusion": "John does not have a larger family.",
        "metadata": "FOLIO_330",
        "proof_label": "__PROVED__",
        "input": "Fact1:All people who make wedding plans are people who are engaged.\nFact2:All people who invite others to come to their ceremony make wedding plans.\nFact3:Anyone who has a well-attended wedding invites others to come to their ceremony.\nFact4:Some people that have well-attended weddings have larger families.\nFact5:If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nFact6:If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nHypothesis:John does not have a larger family."
    },
    {
        "Symbol Mapping": {
            "Make(x, weddingPlan)": "x makes wedding plans",
            "Engaged(x)": "x is engaged",
            "InviteToComeTo(x, y, wedding)": "x invites y to come to the wedding",
            "Have(x, wellAttendedWedding)": "x has a well-attended wedding",
            "Have(x, largerFamily)": "x has a larger family",
            "Invite(x, y, comeTo, wedding)": "x invites y to come to the wedding",
            "Engaged(john)": "John is engaged",
            "Make(john, weddingPlan)": "John makes wedding plans",
            "Have(john, largerFamily)": "John has a larger family",
            "Have(john, wellAttendedWedding)": "John has a well-attended wedding"
        },
        "Premise": {
            "P1": "∀x (Make(x, weddingPlan) → Engaged(x))",
            "P2": "∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))",
            "P3": "∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))",
            "P4": "∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))",
            "P5": "Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)",
            "P6": "Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))"
        },
        "Conclusion": "Engaged(john)",
        "Label": "Uncertain",
        "ori_premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "ori_conclusion": "John is engaged.",
        "metadata": "FOLIO_330",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All people who make wedding plans are people who are engaged.\nFact2:All people who invite others to come to their ceremony make wedding plans.\nFact3:Anyone who has a well-attended wedding invites others to come to their ceremony.\nFact4:Some people that have well-attended weddings have larger families.\nFact5:If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nFact6:If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nHypothesis:John is engaged."
    },
    {
        "Symbol Mapping": {
            "Make(x, weddingPlan)": "x makes wedding plans",
            "Engaged(x)": "x is engaged",
            "InviteToComeTo(x, y, wedding)": "x invites y to come to the wedding",
            "Have(x, wellAttendedWedding)": "x has a well-attended wedding",
            "Have(x, largerFamily)": "x has a larger family",
            "Invite(x, y, comeTo, wedding)": "x invites y to come to the wedding",
            "Engaged(john)": "John is engaged",
            "Have(john, largerFamily)": "John has a larger family",
            "Have(john, wellAttendedWedding)": "John has a well-attended wedding"
        },
        "Premise": {
            "P1": "∀x (Make(x, weddingPlan) → Engaged(x))",
            "P2": "∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))",
            "P3": "∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))",
            "P4": "∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))",
            "P5": "Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)",
            "P6": "Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))"
        },
        "Conclusion": "¬Have(john, largerFamily) ∧ ¬(∃y ∃z (¬(y=john) ∧ ¬(z=john) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ InviteToComeTo(john, z, wedding)))",
        "Label": "True",
        "ori_premises": [
            "All people who make wedding plans are people who are engaged.",
            "All people who invite others to come to their ceremony make wedding plans.",
            "Anyone who has a well-attended wedding invites others to come to their ceremony.",
            "Some people that have well-attended weddings have larger families.",
            "If John is engaged, then John does not invite friends to their ceremony and make wedding plans.",
            "If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "
        ],
        "ori_conclusion": "John neither has a larger family nor does he invite others to his wedding.",
        "metadata": "FOLIO_330",
        "proof_label": "__PROVED__",
        "input": "Fact1:All people who make wedding plans are people who are engaged.\nFact2:All people who invite others to come to their ceremony make wedding plans.\nFact3:Anyone who has a well-attended wedding invites others to come to their ceremony.\nFact4:Some people that have well-attended weddings have larger families.\nFact5:If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nFact6:If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \nHypothesis:John neither has a larger family nor does he invite others to his wedding."
    },
    {
        "Symbol Mapping": {
            "Mammal(x)": "x is a mammal",
            "Mammal(y)": "y is a mammal",
            "Have(x, teeth)": "x has teeth",
            "Have(y, teeth)": "y has teeth",
            "¬Have(platypus, teeth)": "The platypus does not have teeth",
            "Mammal(platypus)": "The platypus is a mammal",
            "Have(humans, teeth)": "Humans have teeth"
        },
        "Premise": {
            "P1": "∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))",
            "P2": "¬Have(platypus, teeth)",
            "P3": "Mammal(platypus)",
            "P4": "Have(humans, teeth)"
        },
        "Conclusion": "Mammal(platypus) ∧ (¬Have(platypus, teeth))",
        "Label": "True",
        "ori_premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "ori_conclusion": "Platypuses are mammals with no teeth.",
        "metadata": "FOLIO_26",
        "proof_label": "__PROVED__",
        "input": "Fact1:Some mammals have teeth.\nFact2:Platypuses have no teeth.\nFact3:Platypuses are mammals. \nFact4:Humans have teeth.\nHypothesis:Platypuses are mammals with no teeth."
    },
    {
        "Symbol Mapping": {
            "Mammal(x)": "x is a mammal",
            "Have(x, y)": "x has y (a possession relationship between x and y)",
            "¬Have(x, y)": "x does not have y",
            "Reptile(x)": "x is a reptile",
            "∃x": "There exists an x",
            "∃y": "There exists a y",
            "¬(x = y)": "x and y are not the same entity"
        },
        "Premise": {
            "P1": "∃x (Mammal(x) ∧ Have(x, teeth))",
            "P2": "¬Have(platypus, teeth)",
            "P3": "Mammal(platypus)",
            "P4": "Have(humans, teeth)"
        },
        "Conclusion": "Reptile(platypus)",
        "Label": "Uncertain",
        "ori_premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "ori_conclusion": "Platypuses are reptiles.",
        "metadata": "FOLIO_26",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Some mammals have teeth.\nFact2:Platypuses have no teeth.\nFact3:Platypuses are mammals. \nFact4:Humans have teeth.\nHypothesis:Platypuses are reptiles."
    },
    {
        "Symbol Mapping": {
            "Mammal(x)": "x is a mammal",
            "Have(x, y)": "x has y",
            "¬Have(x, y)": "x does not have y",
            "∃x": "There exists an x",
            "∃y": "There exists a y",
            "¬(x = y)": "x and y are distinct entities"
        },
        "Premise": {
            "P1": "∃x (Mammal(x) ∧ Have(x, teeth))",
            "P2": "¬Have(platypus, teeth)",
            "P3": "Mammal(platypus)",
            "P4": "∃x (Human(x) ∧ Have(x, teeth))"
        },
        "Conclusion": "Mammal(humans)",
        "Label": "Uncertain",
        "ori_premises": [
            "Some mammals have teeth.",
            "Platypuses have no teeth.",
            "Platypuses are mammals. ",
            "Humans have teeth."
        ],
        "ori_conclusion": "Humans are mammals.",
        "metadata": "FOLIO_26",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Some mammals have teeth.\nFact2:Platypuses have no teeth.\nFact3:Platypuses are mammals. \nFact4:Humans have teeth.\nHypothesis:Humans are mammals."
    },
    {
        "Symbol Mapping": {
            "Plunger(x)": "x is a plunger",
            "Suck(x)": "x has the property of sucking",
            "Vacuum(x)": "x is a vacuum",
            "Vampire(x)": "x is a vampire",
            "Vacuum(space)": "space is a vacuum",
            "HouseholdAppliance(x)": "x is a household appliance",
            "¬Suck(x)": "x does not have the property of sucking"
        },
        "Premise": {
            "P1": "∀x (Plunger(x) → Suck(x))",
            "P2": "∀x (Vacuum(x) → Suck(x))",
            "P3": "∀x (Vampire(x) → Suck(x))",
            "P4": "Vacuum(space)",
            "P5": "HouseholdAppliance(duster) ∧ ¬Suck(duster)"
        },
        "Conclusion": "Suck(space)",
        "Label": "True",
        "ori_premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "ori_conclusion": "Space sucks.",
        "metadata": "FOLIO_203",
        "proof_label": "__PROVED__",
        "input": "Fact1:Plungers suck.\nFact2:Vacuums suck.\nFact3:Vampires suck.\nFact4:Space is a vacuum.\nFact5:A duster is a household appliance that doesn't suck.\nHypothesis:Space sucks."
    },
    {
        "Symbol Mapping": {
            "Plunger(x)": "x is a plunger",
            "Suck(x)": "x has the property of sucking",
            "Vacuum(x)": "x is a vacuum",
            "Vampire(x)": "x is a vampire",
            "Vacuum(space)": "Space is a vacuum",
            "HouseholdAppliance(x)": "x is a household appliance",
            "¬Suck(x)": "x does not have the property of sucking"
        },
        "Premise": {
            "P1": "∀x (Plunger(x) → Suck(x))",
            "P2": "∀x (Vacuum(x) → Suck(x))",
            "P3": "∀x (Vampire(x) → Suck(x))",
            "P4": "Vacuum(space)",
            "P5": "HouseholdAppliance(duster) ∧ ¬Suck(duster)"
        },
        "Conclusion": "Vampire(space)",
        "Label": "Uncertain",
        "ori_premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "ori_conclusion": "Space is a vampire.",
        "metadata": "FOLIO_203",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Plungers suck.\nFact2:Vacuums suck.\nFact3:Vampires suck.\nFact4:Space is a vacuum.\nFact5:A duster is a household appliance that doesn't suck.\nHypothesis:Space is a vampire."
    },
    {
        "Symbol Mapping": {
            "Plunger(x)": "x is a plunger",
            "Suck(x)": "x has the property of sucking",
            "Vacuum(x)": "x is a vacuum",
            "Vampire(x)": "x is a vampire",
            "Vacuum(space)": "space is a vacuum",
            "HouseholdAppliance(x)": "x is a household appliance",
            "¬Suck(x)": "x does not have the property of sucking"
        },
        "Premise": {
            "P1": "∀x (Plunger(x) → Suck(x))",
            "P2": "∀x (Vacuum(x) → Suck(x))",
            "P3": "∀x (Vampire(x) → Suck(x))",
            "P4": "Vacuum(space)",
            "P5": "HouseholdAppliance(duster) ∧ ¬Suck(duster)"
        },
        "Conclusion": "∀x (HouseHoldApp(x) → Suck(x))",
        "Label": "False",
        "ori_premises": [
            "Plungers suck.",
            "Vacuums suck.",
            "Vampires suck.",
            "Space is a vacuum.",
            "A duster is a household appliance that doesn't suck."
        ],
        "ori_conclusion": "If something is a household appliance, it sucks.",
        "metadata": "FOLIO_203",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Plungers suck.\nFact2:Vacuums suck.\nFact3:Vampires suck.\nFact4:Space is a vacuum.\nFact5:A duster is a household appliance that doesn't suck.\nHypothesis:If something is a household appliance, it sucks."
    },
    {
        "Symbol Mapping": {
            "MachineLearningAlgorithm(x)": "x is a machine learning algorithm",
            "SupervisedLearningAlgorithm(x)": "x is a supervised learning algorithm",
            "UnsupervisedLearningAlgorithm(x)": "x is an unsupervised learning algorithm",
            "ReinforcementLearningAlgorithm(x)": "x is a reinforcement learning algorithm",
            "Require(x, labeledData)": "x requires labeled data",
            "TrainedWith(stateOfTheArtTextSummarizationModel, x)": "The state-of-the-art text summarization model is trained with x"
        },
        "Premise": {
            "P1": "∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))",
            "P2": "∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))",
            "P3": "∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))",
            "P4": "∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))",
            "P5": "∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))"
        },
        "Conclusion": "∃x (SupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "Label": "True",
        "ori_premises": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "ori_conclusion": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "metadata": "FOLIO_131",
        "proof_label": "__PROVED__",
        "input": "Fact1:Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nFact2:Unsupervised learning algorithms do not require labeled data.\nFact3:The state-of-the-art text summarization model is trained with machine learning algorithms.\nFact4:Reinforcement learning is not used to train the state-of-the-art text summarization model.\nFact5:The Machine Learning algorithm for training text summarization models requires labeled data.\nHypothesis:Supervised learning is used to train the state-of-the-art text summarization model."
    },
    {
        "Symbol Mapping": {
            "MachineLearningAlgorithm(x)": "x is a machine learning algorithm",
            "SupervisedLearningAlgorithm(x)": "x is a supervised learning algorithm",
            "UnsupervisedLearningAlgorithm(x)": "x is an unsupervised learning algorithm",
            "ReinforcementLearningAlgorithm(x)": "x is a reinforcement learning algorithm",
            "Require(x, labeledData)": "x requires labeled data",
            "TrainedWith(stateOfTheArtTextSummarizationModel, x)": "The state-of-the-art text summarization model is trained with x"
        },
        "Premise": {
            "P1": "∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))",
            "P2": "∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))",
            "P3": "∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))",
            "P4": "∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))",
            "P5": "∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))"
        },
        "Conclusion": "∃x (UnsupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))",
        "Label": "False",
        "ori_premises": [
            "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.",
            "Unsupervised learning algorithms do not require labeled data.",
            "The state-of-the-art text summarization model is trained with machine learning algorithms.",
            "Reinforcement learning is not used to train the state-of-the-art text summarization model.",
            "The Machine Learning algorithm for training text summarization models requires labeled data."
        ],
        "ori_conclusion": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "metadata": "FOLIO_131",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nFact2:Unsupervised learning algorithms do not require labeled data.\nFact3:The state-of-the-art text summarization model is trained with machine learning algorithms.\nFact4:Reinforcement learning is not used to train the state-of-the-art text summarization model.\nFact5:The Machine Learning algorithm for training text summarization models requires labeled data.\nHypothesis:Unsupervised learning is used to train the state-of-the-art text summarization model."
    },
    {
        "Symbol Mapping": {
            "Film(x)": "x is a film",
            "Rated(x, adultsOnly)": "x is rated for adults only",
            "Rated(x, generalAudience)": "x is rated General Audience",
            "CanWatchWithout(children, x, guidanceFromParents)": "Children can watch x without guidance from parents",
            "Contain(x, excessiveEroticContent)": "x contains excessive erotic content",
            "Contain(x, excessiveViolentContent)": "x contains excessive violent content",
            "AppropriateFor(x, peopleOfAllAges)": "x is appropriate for people of all ages",
            "FamilyFriendly(x)": "x is family-friendly",
            "Animated(x)": "x is animated",
            "InfrozenSeries(x)": "x is part of the Frozen series",
            "⊕": "Exclusive OR (only one of the two conditions can be true)"
        },
        "Premise": {
            "P1": "∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))",
            "P2": "∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))",
            "P3": "∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))",
            "P4": "∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))",
            "P5": "∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))",
            "P6": "Film(hachiAdogsTale)",
            "P7": "(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)"
        },
        "Conclusion": "Rated(x, generalAudience)",
        "Label": "Uncertain",
        "ori_premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "“Hachi: A dog’s Tale” is a film.",
            "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "ori_conclusion": "\"Hachi: A dog's Tale\" is rated General Audience.",
        "metadata": "FOLIO_460",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nFact2:If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nFact3:If a film is rated General Audience, then it is appropriate for people of all ages.\nFact4:All family-friendly animated films are rated General Audience.\nFact5:All movies in the Frozen series are family-friendly animated films.\nFact6:“Hachi: A dog’s Tale” is a film.\nFact7:“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nHypothesis:\"Hachi: A dog's Tale\" is rated General Audience."
    },
    {
        "Symbol Mapping": {
            "Film(x)": "x is a film",
            "Rated(x, adultsOnly)": "x is rated as adults only",
            "CanWatchWithout(children, x, guidanceFromParents)": "Children can watch x without guidance from parents",
            "Contain(x, excessiveEroticContent)": "x contains excessive erotic content",
            "Contain(x, excessiveViolentContent)": "x contains excessive violent content",
            "AppropriateFor(x, peopleOfAllAges)": "x is appropriate for people of all ages",
            "Rated(x, generalAudience)": "x is rated as General Audience",
            "FamilyFriendly(x)": "x is family-friendly",
            "Animated(x)": "x is animated",
            "InfrozenSeries(x)": "x is in the Frozen series",
            "Film(hachiAdogsTale)": "Hachi: A Dog's Tale is a film",
            "FamilyFriendly(hachiAdogsTale)": "Hachi: A Dog's Tale is family-friendly",
            "Animated(hachiAdogsTale)": "Hachi: A Dog's Tale is animated",
            "Rated(hachiAdogsTale, adultsOnly)": "Hachi: A Dog's Tale is rated as adults only"
        },
        "Premise": {
            "P1": "∀x (Film(x) ∧ AppropriateFor(x, peopleOfAllAges) → CanWatchWithout(children, x, guidanceFromParents))",
            "P2": "∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))",
            "P3": "∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))",
            "P4": "∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))",
            "P5": "∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))",
            "P6": "Film(hachiAdogsTale)",
            "P7": "(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ∨ AppropriateFor(hachiAdogsTale, peopleOfAllAges)"
        },
        "Conclusion": "(Contain(hachiAdogsTale, excessiveEroticContent) ∧ Contain(hachiAdogsTale, excessiveViolentContent)) ∨ InfrozenSeries(hachiAdogsTale)",
        "Label": "False",
        "ori_premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "“Hachi: A dog’s Tale” is a film.",
            "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "ori_conclusion": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
        "metadata": "FOLIO_460",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nFact2:If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nFact3:If a film is rated General Audience, then it is appropriate for people of all ages.\nFact4:All family-friendly animated films are rated General Audience.\nFact5:All movies in the Frozen series are family-friendly animated films.\nFact6:“Hachi: A dog’s Tale” is a film.\nFact7:“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nHypothesis:\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both."
    },
    {
        "Symbol Mapping": {
            "Film(x)": "x is a film",
            "Rated(x, adultsOnly)": "x is rated as adults only",
            "Rated(x, generalAudience)": "x is rated as General Audience",
            "CanWatchWithout(children, x, guidanceFromParents)": "Children can watch x without guidance from parents",
            "Contain(x, excessiveEroticContent)": "x contains excessive erotic content",
            "Contain(x, excessiveViolentContent)": "x contains excessive violent content",
            "AppropriateFor(x, peopleOfAllAges)": "x is appropriate for people of all ages",
            "FamilyFriendly(x)": "x is family-friendly",
            "Animated(x)": "x is animated",
            "InfrozenSeries(x)": "x is in the Frozen series",
            "hachiAdogsTale": "The specific film 'Hachi: A Dog's Tale'"
        },
        "Premise": {
            "P1": "∀x (Film(x) ∧ ¬Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))",
            "P2": "∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))",
            "P3": "∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))",
            "P4": "∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))",
            "P5": "∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))",
            "P6": "Film(hachiAdogsTale)",
            "P7": "(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ∨ AppropriateFor(hachiAdogsTale, peopleOfAllAges)"
        },
        "Conclusion": "¬((Contain(hachiAdogsTale, excessiveEroticContent) ∧ Contain(hachiAdogsTale, excessiveViolentContent)) ⊕ InfrozenSeries(hachiAdogsTale))",
        "Label": "True",
        "ori_premises": [
            "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.",
            "If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.",
            "If a film is rated General Audience, then it is appropriate for people of all ages.",
            "All family-friendly animated films are rated General Audience.",
            "All movies in the Frozen series are family-friendly animated films.",
            "“Hachi: A dog’s Tale” is a film.",
            "“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "
        ],
        "ori_conclusion": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
        "metadata": "FOLIO_460",
        "proof_label": "__PROVED__",
        "input": "Fact1:If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nFact2:If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nFact3:If a film is rated General Audience, then it is appropriate for people of all ages.\nFact4:All family-friendly animated films are rated General Audience.\nFact5:All movies in the Frozen series are family-friendly animated films.\nFact6:“Hachi: A dog’s Tale” is a film.\nFact7:“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. \nHypothesis:\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series."
    },
    {
        "Symbol Mapping": {
            "BreedingBack(x)": "x is involved in the process of breeding back",
            "ArtificialSelection(x)": "x is an instance of artificial selection",
            "DeliberateSelectiveBreedingOfDomesticAnimals(x)": "x involves the deliberate selective breeding of domestic animals",
            "HeckCattle(x)": "x is a Heck cattle",
            "Auroch(x)": "x is an auroch",
            "Animal(x)": "x is an animal",
            "Resemble(x, y)": "x resembles y",
            "Dead(x)": "x is extinct or dead"
        },
        "Premise": {
            "P1": "∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "P2": "∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))",
            "P3": "∀x (HeckCattle(x) → Animal(x))",
            "P4": "∀x (Auroch(x) → Animal(x))",
            "P5": "∃x (Animal(x) ∧ BreedingBack(x) ∧ ∃w (Dead(w) ∧ Resemble(x, w)))"
        },
        "Conclusion": "∃x (HeckCattle(x) ∧ ArtificialSelection(x))",
        "Label": "True",
        "ori_premises": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "ori_conclusion": "Some Heck cattle are artificially selected.",
        "metadata": "FOLIO_46",
        "proof_label": "__PROVED__",
        "input": "Fact1:Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFact2:Heck cattle were bred back in the 1920s to resemble the aurochs.\nFact3:Heck cattle are animals.\nFact4:Aurochs are animals.\nFact5:Some animals to be bred back resemble extinct animals.\nHypothesis:Some Heck cattle are artificially selected."
    },
    {
        "Symbol Mapping": {
            "BreedingBack(x)": "x is involved in the breeding-back process",
            "ArtificialSelection(x)": "x is a form of artificial selection",
            "DeliberateSelectiveBreedingOfDomesticAnimals(x)": "x involves the deliberate selective breeding of domestic animals",
            "HeckCattle(x)": "x is a Heck cattle",
            "Auroch(x)": "x is an auroch",
            "Animal(x)": "x is an animal",
            "Resemble(x, y)": "x resembles y",
            "Dead(x)": "x is dead",
            "¬(x=y)": "x and y are distinct entities",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x"
        },
        "Premise": {
            "P1": "∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))",
            "P2": "∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))",
            "P3": "∀x (HeckCattle(x) → Animal(x))",
            "P4": "∀x (Auroch(x) → Animal(x))",
            "P5": "∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z)))))"
        },
        "Conclusion": "∀x (Auroch(x) → Dead(x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.",
            "Heck cattle were bred back in the 1920s to resemble the aurochs.",
            "Heck cattle are animals.",
            "Aurochs are animals.",
            "Some animals to be bred back resemble extinct animals."
        ],
        "ori_conclusion": "Aurochs are extinct.",
        "metadata": "FOLIO_46",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFact2:Heck cattle were bred back in the 1920s to resemble the aurochs.\nFact3:Heck cattle are animals.\nFact4:Aurochs are animals.\nFact5:Some animals to be bred back resemble extinct animals.\nHypothesis:Aurochs are extinct."
    },
    {
        "Symbol Mapping": {
            "CanRegisterToVoteIn(x, unitedStates)": "x can register to vote in the United States",
            "CanParticipateIn(x, 2024UnitedStatesElection)": "x can participate in the 2024 United States presidential election",
            "Have(x, unitedStatesCitizenship)": "x has United States citizenship",
            "Have(x, taiwaneseCitizenship)": "x has Taiwanese citizenship",
            "Russian(x)": "x is Russian",
            "FederationOfficial(x)": "x is a federation official",
            "ManagerAt(x, gazprom)": "x is a manager at Gazprom"
        },
        "Premise": {
            "P1": "∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))",
            "P2": "∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))",
            "P3": "∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))",
            "P4": "∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))",
            "P5": "¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)",
            "P6": "CanRegisterToVoteIn(ekaterina, unitedStates) ∨ (Russian(ekaterina) ∧ FederationOfficial(ekaterina))"
        },
        "Conclusion": "Russian(vladimir) ∧ FederationOfficial(vladimir)",
        "Label": "Uncertain",
        "ori_premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "ori_conclusion": "Vladimir is a Russian federation official",
        "metadata": "FOLIO_483",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nFact2:If someone has United States citizenship, then they can register to vote in the United States.\nFact3:A person either has United States citizenship or Taiwanese citizenship.\nFact4:No Russian Federation officials hold Taiwanese citizenship. \nFact5:Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nFact6:Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nHypothesis:Vladimir is a Russian federation official"
    },
    {
        "Symbol Mapping": {
            "CanRegisterToVoteIn(x, unitedStates)": "x can register to vote in the United States",
            "CanParticipateIn(x, 2024UnitedStatesElection)": "x can participate in the 2024 United States presidential election",
            "Have(x, unitedStatesCitizenship)": "x has United States citizenship",
            "Have(x, taiwaneseCitizenship)": "x has Taiwanese citizenship",
            "Russian(x)": "x is Russian",
            "FederationOfficial(x)": "x is a federation official",
            "ManagerAt(x, gazprom)": "x is a manager at Gazprom"
        },
        "Premise": {
            "P1": "∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))",
            "P2": "∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))",
            "P3": "∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))",
            "P4": "∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))",
            "P5": "¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)",
            "P6": "FederationOfficial(ekaterina) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)"
        },
        "Conclusion": "¬(Russian(vladimir) ∧ FederationOfficial(vladimir))",
        "Label": "Uncertain",
        "ori_premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "ori_conclusion": "Vladimir is not a Russian federation official",
        "metadata": "FOLIO_483",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nFact2:If someone has United States citizenship, then they can register to vote in the United States.\nFact3:A person either has United States citizenship or Taiwanese citizenship.\nFact4:No Russian Federation officials hold Taiwanese citizenship. \nFact5:Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nFact6:Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nHypothesis:Vladimir is not a Russian federation official"
    },
    {
        "Symbol Mapping": {
            "CanRegisterToVoteIn(x, unitedStates)": "x can register to vote in the United States",
            "CanParticipateIn(x, 2024UnitedStatesElection)": "x can participate in the 2024 United States presidential election",
            "Have(x, unitedStatesCitizenship)": "x has United States citizenship",
            "Have(x, taiwaneseCitizenship)": "x has Taiwanese citizenship",
            "Russian(x)": "x is Russian",
            "FederationOfficial(x)": "x is a Federation official",
            "ManagerAt(x, gazprom)": "x is a manager at Gazprom",
            "¬": "Logical negation (NOT)",
            "∧": "Logical conjunction (AND)",
            "∨": "Logical disjunction (OR)",
            "→": "Logical implication (IF...THEN)",
            "vladimir": "The individual Vladimir",
            "ekaterina": "The individual Ekaterina"
        },
        "Premise": {
            "P1": "∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))",
            "P2": "∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))",
            "P3": "∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))",
            "P4": "∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))",
            "P5": "¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)",
            "P6": "FederationOfficial(ekaterina) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)"
        },
        "Conclusion": "CanParticipateIn(ekaterina, 2024UnitedStatesElection) ∨ ManagerAt(ekaterina, gazprom)",
        "Label": "True",
        "ori_premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "ori_conclusion": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
        "metadata": "FOLIO_483",
        "proof_label": "__PROVED__",
        "input": "Fact1:Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nFact2:If someone has United States citizenship, then they can register to vote in the United States.\nFact3:A person either has United States citizenship or Taiwanese citizenship.\nFact4:No Russian Federation officials hold Taiwanese citizenship. \nFact5:Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nFact6:Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nHypothesis:Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom."
    },
    {
        "Symbol Mapping": {
            "CanRegisterToVoteIn(x, unitedStates)": "x can register to vote in the United States",
            "CanParticipateIn(x, 2024UnitedStatesElection)": "x can participate in the 2024 United States presidential election",
            "Have(x, unitedStatesCitizenship)": "x has United States citizenship",
            "Have(x, taiwaneseCitizenship)": "x has Taiwanese citizenship",
            "Russian(x)": "x is Russian",
            "FederationOfficial(x)": "x is a Federation official",
            "ManagerAt(x, gazprom)": "x is a manager at Gazprom",
            "¬": "Logical NOT (negation)",
            "∧": "Logical AND (conjunction)",
            "∨": "Logical OR (disjunction)",
            "→": "Logical implication (if...then)",
            "⊕": "Exclusive OR (XOR, exactly one of the two is true)"
        },
        "Premise": {
            "P1": "∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))",
            "P2": "∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))",
            "P3": "∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))",
            "P4": "∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))",
            "P5": "¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)",
            "P6": "(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)"
        },
        "Conclusion": "CanParticipateIn(ekaterina, 2024UnitedStatesElection) ⊕ ManagerAt(vladimir, gazprom)",
        "Label": "True",
        "ori_premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "ori_conclusion": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
        "metadata": "FOLIO_483",
        "proof_label": "__PROVED__",
        "input": "Fact1:Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nFact2:If someone has United States citizenship, then they can register to vote in the United States.\nFact3:A person either has United States citizenship or Taiwanese citizenship.\nFact4:No Russian Federation officials hold Taiwanese citizenship. \nFact5:Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nFact6:Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nHypothesis:Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom."
    },
    {
        "Symbol Mapping": {
            "CanRegisterToVoteIn(x, unitedStates)": "x can register to vote in the United States",
            "CanParticipateIn(x, 2024UnitedStatesElection)": "x can participate in the 2024 United States presidential election",
            "Have(x, unitedStatesCitizenship)": "x has United States citizenship",
            "Have(x, taiwaneseCitizenship)": "x has Taiwanese citizenship",
            "Russian(x)": "x is Russian",
            "FederationOfficial(x)": "x is a Federation official",
            "ManagerAt(x, gazprom)": "x is a manager at Gazprom"
        },
        "Premise": {
            "P1": "∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))",
            "P2": "∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))",
            "P3": "∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))",
            "P4": "∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))",
            "P5": "¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)",
            "P6": "FederationOfficial(ekaterina) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)"
        },
        "Conclusion": "¬(CanRegisterToVoteIn(ekaterina, unitedStates) ∧ CanParticipateIn(vladimir, 2024UnitedStatesElection))",
        "Label": "False",
        "ori_premises": [
            "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.",
            "If someone has United States citizenship, then they can register to vote in the United States.",
            "A person either has United States citizenship or Taiwanese citizenship.",
            "No Russian Federation officials hold Taiwanese citizenship. ",
            "Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. ",
            "Ekaterina she can register to vote in the United States, or she is a Russian federation official."
        ],
        "ori_conclusion": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
        "metadata": "FOLIO_483",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nFact2:If someone has United States citizenship, then they can register to vote in the United States.\nFact3:A person either has United States citizenship or Taiwanese citizenship.\nFact4:No Russian Federation officials hold Taiwanese citizenship. \nFact5:Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nFact6:Ekaterina she can register to vote in the United States, or she is a Russian federation official.\nHypothesis:It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election."
    },
    {
        "Symbol Mapping": {
            "PublishingHouse(x)": "x is a publishing house",
            "SpecializesInTranslatingIntoEnglish(x, y)": "x specializes in translating y into English",
            "Book(x)": "x is a book",
            "PublishedBy(x, y)": "x is published by y",
            "In(x, y)": "x is in language y",
            "TranslatedFrom(x, y)": "x was translated from language y"
        },
        "Premise": {
            "P1": "PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "P2": "∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))",
            "P3": "Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)",
            "P4": "TranslatedFrom(neapolitanChronicles, italian)",
            "P5": "Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)"
        },
        "Conclusion": "Book(neapolitanChronicles) ∧ In(neapolitanChronicles, english)",
        "Label": "True",
        "ori_premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "ori_conclusion": "Neapolitan Chronicles is an English book.",
        "metadata": "FOLIO_80",
        "proof_label": "__PROVED__",
        "input": "Fact1:New Vessel Press is a publishing house specializing in translating foreign literature into English.\nFact2:All of New Vessel Press's published books are in English.\nFact3:Neapolitan Chronicles is a book published by New Vessel Press.\nFact4:Neapolitan Chronicles was translated from Italian.\nFact5:Palace of Flies is a book published by New Vessel Press.\nHypothesis:Neapolitan Chronicles is an English book."
    },
    {
        "Symbol Mapping": {
            "PublishingHouse(x)": "x is a publishing house",
            "SpecializesInTranslatingIntoEnglish(x, y)": "x specializes in translating y into English",
            "Book(x)": "x is a book",
            "PublishedBy(x, y)": "x is published by y",
            "In(x, y)": "x is in language y",
            "TranslatedFrom(x, y)": "x was translated from language y"
        },
        "Premise": {
            "P1": "PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "P2": "∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))",
            "P3": "Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)",
            "P4": "TranslatedFrom(neapolitanChronicles, italian)",
            "P5": "Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)"
        },
        "Conclusion": "PublishedBy(harryPotter, newVesselPress)",
        "Label": "Uncertain",
        "ori_premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "ori_conclusion": "Harry Potter was published by New Vessel Press.",
        "metadata": "FOLIO_80",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:New Vessel Press is a publishing house specializing in translating foreign literature into English.\nFact2:All of New Vessel Press's published books are in English.\nFact3:Neapolitan Chronicles is a book published by New Vessel Press.\nFact4:Neapolitan Chronicles was translated from Italian.\nFact5:Palace of Flies is a book published by New Vessel Press.\nHypothesis:Harry Potter was published by New Vessel Press."
    },
    {
        "Symbol Mapping": {
            "PublishingHouse(x)": "x is a publishing house",
            "SpecializesInTranslatingIntoEnglish(x, y)": "x specializes in translating y into English",
            "Book(x)": "x is a book",
            "PublishedBy(x, y)": "x is published by y",
            "In(x, y)": "x is in language y",
            "TranslatedFrom(x, y)": "x was translated from language y"
        },
        "Premise": {
            "P1": "PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)",
            "P2": "∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))",
            "P3": "Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)",
            "P4": "TranslatedFrom(neapolitanChronicles, italian)",
            "P5": "Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)"
        },
        "Conclusion": "TranslatedFrom(palaceOfFlies, italian)",
        "Label": "Uncertain",
        "ori_premises": [
            "New Vessel Press is a publishing house specializing in translating foreign literature into English.",
            "All of New Vessel Press's published books are in English.",
            "Neapolitan Chronicles is a book published by New Vessel Press.",
            "Neapolitan Chronicles was translated from Italian.",
            "Palace of Flies is a book published by New Vessel Press."
        ],
        "ori_conclusion": "Palace of Flies was translated from Italian.",
        "metadata": "FOLIO_80",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:New Vessel Press is a publishing house specializing in translating foreign literature into English.\nFact2:All of New Vessel Press's published books are in English.\nFact3:Neapolitan Chronicles is a book published by New Vessel Press.\nFact4:Neapolitan Chronicles was translated from Italian.\nFact5:Palace of Flies is a book published by New Vessel Press.\nHypothesis:Palace of Flies was translated from Italian."
    },
    {
        "Symbol Mapping": {
            "Hydrocarbon(x)": "x is a hydrocarbon",
            "Organic(x)": "x is an organic compound",
            "Compound(x)": "x is a compound",
            "Alkane(x)": "x is an alkane",
            "Chemical(x)": "x is a chemical compound",
            "Contain(x, y)": "x contains element y",
            "mixture": "The mixture being discussed",
            "carbon": "The element carbon",
            "⊕": "Exclusive OR (either one condition is true, but not both)"
        },
        "Premise": {
            "P1": "∀x (Hydrocarbon(x) → Organic(x))",
            "P2": "∀x (Alkane(x) → Hydrocarbon(x))",
            "P3": "∀x (Organic(x) → Chemical(x))",
            "P4": "∀x (Organic(x) ∧ Compound(x) → Contain(x, carbon))",
            "P5": "∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y = z))))",
            "P6": "¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(mixture, y) ∧ Contain(mixture, z) ∧ y = z)))"
        },
        "Conclusion": "Contain(mixture, carbon)",
        "Label": "Uncertain",
        "ori_premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "ori_conclusion": "The mixture contains carbon.",
        "metadata": "FOLIO_363",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All hydrocarbons are organic compounds .\nFact2:All alkanes are hydrocarbons\nFact3:All organic compounds are chemical compounds.\nFact4:All organic compounds contain carbon.\nFact5:No chemical compounds contain only one element.\nFact6:The mixture either both is a chemical compound and contains only one element, or neither. \nHypothesis:The mixture contains carbon."
    },
    {
        "Symbol Mapping": {
            "Hydrocarbon(x)": "x is a hydrocarbon",
            "Organic(x)": "x is an organic compound",
            "Compound(x)": "x is a compound",
            "Alkane(x)": "x is an alkane",
            "Chemical(x)": "x is a chemical compound",
            "Contain(x, y)": "x contains element y",
            "mixture": "The mixture being discussed",
            "carbon": "The element carbon",
            "⊕": "Exclusive OR (exactly one of the two conditions is true)"
        },
        "Premise": {
            "P1": "∀x (Hydrocarbon(x) → Organic(x))",
            "P2": "∀x (Alkane(x) → Hydrocarbon(x))",
            "P3": "∀x (Organic(x) → Chemical(x))",
            "P4": "∀x (Organic(x) ∧ Compound(x) → Contain(x, carbon))",
            "P5": "∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y = z))))",
            "P6": "¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(mixture, y) ∧ Contain(mixture, z) ∧ y = z)))"
        },
        "Conclusion": "Alkane(mixture) ∧ Contain(mixture, carbon)",
        "Label": "False",
        "ori_premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "ori_conclusion": "The mixture is an alkane and contains carbon.",
        "metadata": "FOLIO_363",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All hydrocarbons are organic compounds .\nFact2:All alkanes are hydrocarbons\nFact3:All organic compounds are chemical compounds.\nFact4:All organic compounds contain carbon.\nFact5:No chemical compounds contain only one element.\nFact6:The mixture either both is a chemical compound and contains only one element, or neither. \nHypothesis:The mixture is an alkane and contains carbon."
    },
    {
        "Symbol Mapping": {
            "Hydrocarbon(x)": "x is a hydrocarbon",
            "Organic(x)": "x is an organic compound",
            "Compound(x)": "x is a compound",
            "Alkane(x)": "x is an alkane",
            "Chemical(x)": "x is a chemical compound",
            "Contain(x, y)": "x contains element y",
            "mixture": "The mixture being discussed",
            "carbon": "The element carbon",
            "⊕": "Exclusive OR (exactly one of the two conditions is true)"
        },
        "Premise": {
            "P1": "∀x (Hydrocarbon(x) → Organic(x))",
            "P2": "∀x (Alkane(x) → Hydrocarbon(x))",
            "P3": "∀x (Organic(x) → Chemical(x))",
            "P4": "∀x (Organic(x) → Contain(x, carbon))",
            "P5": "∀x (Chemical(x) → ∃y ∃z (Contain(x, y) ∧ Contain(x, z) ∧ y ≠ z))",
            "P6": "¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(mixture, y) ∧ Contain(mixture, z) ∧ y = z)))"
        },
        "Conclusion": "(∀x ∀y (Contain(mixture, x) ∧ Contain(mixture, y) ∧ x = y)) ∨ Contain(mixture, carbon) → ¬(Chemical(mixture) ∧ Compound(mixture)) ∧ ¬Alkane(mixture)",
        "Label": "True",
        "ori_premises": [
            "All hydrocarbons are organic compounds .",
            "All alkanes are hydrocarbons",
            "All organic compounds are chemical compounds.",
            "All organic compounds contain carbon.",
            "No chemical compounds contain only one element.",
            "The mixture either both is a chemical compound and contains only one element, or neither. "
        ],
        "ori_conclusion": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
        "metadata": "FOLIO_363",
        "proof_label": "__PROVED__",
        "input": "Fact1:All hydrocarbons are organic compounds .\nFact2:All alkanes are hydrocarbons\nFact3:All organic compounds are chemical compounds.\nFact4:All organic compounds contain carbon.\nFact5:No chemical compounds contain only one element.\nFact6:The mixture either both is a chemical compound and contains only one element, or neither. \nHypothesis:If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane."
    },
    {
        "Symbol Mapping": {
            "Human(x)": "x is a human",
            "Mortal(x)": "x is mortal",
            "Greek(x)": "x is a Greek",
            "¬(x=y)": "x and y are not the same individual"
        },
        "Premise": {
            "P1": "∀x (Human(x) → Mortal(x))",
            "P2": "∀x (Greek(x) → Human(x))"
        },
        "Conclusion": "∃x ∃y (Greek(x) ∧ Greek(y) ∧ Mortal(x) ∧ Mortal(y) ∧ ¬(x=y))",
        "Label": "Uncertain",
        "ori_premises": [
            "All humans are mortal.",
            "All Greeks are humans."
        ],
        "ori_conclusion": "Some Greeks are mortal.",
        "metadata": "FOLIO_258",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All humans are mortal.\nFact2:All Greeks are humans.\nHypothesis:Some Greeks are mortal."
    },
    {
        "Symbol Mapping": {
            "Student(x)": "x is a student",
            "WorkIn(x, library)": "x works in the library",
            "From(x, computerScienceDepartment)": "x is from the computer science department",
            "Have(x, partTimeJob)": "x has a part-time job",
            "OfferedBy(y, university)": "y is offered by the university",
            "Take(x, databaseCourse)": "x is taking the database course",
            "InstructedBy(x, professorDavid)": "x is taking a class with Professor David",
            "WorkIn(x, lab)": "x works in the lab",
            "PartTimeJob(x)": "x is a part-time job",
            "Have(james, x)": "James has x (a part-time job)",
            "OfferedBy(x, computerScienceDepartment)": "x is offered by the computer science department"
        },
        "Premise": {
            "P1": "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computerScienceDepartment))",
            "P2": "∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))",
            "P3": "∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))",
            "P4": "∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))",
            "P5": "∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))",
            "P6": "Student(james) ∧ WorkIn(james, lab)",
            "P7": "¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)"
        },
        "Conclusion": "∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))",
        "Label": "False",
        "ori_premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "ori_conclusion": "James has a part-time job offered by the university.",
        "metadata": "FOLIO_435",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:None of the students who currently work in the library are from the computer science department. \nFact2:All of the students with part-time jobs offered by the university currently work in the library. \nFact3:All of the students who are taking the database course are from the computer science department. \nFact4:All of the students taking a class with Professor David are taking the database course. \nFact5:All students working in the lab are taking a class with Professor David.\nFact6:James is a student working in the lab. \nFact7:James doesn't work in the lab or have a part-time job offered by the university.\nHypothesis:James has a part-time job offered by the university."
    },
    {
        "Symbol Mapping": {
            "Student(x)": "x is a student",
            "WorkIn(x, library)": "x works in the library",
            "From(x, computerScienceDepartment)": "x is from the computer science department",
            "Have(x, partTimeJob)": "x has a part-time job",
            "OfferedBy(y, university)": "y is offered by the university",
            "Take(x, databaseCourse)": "x is taking the database course",
            "InstructedBy(x, professorDavid)": "x is taking a class with Professor David",
            "WorkIn(x, lab)": "x works in the lab",
            "PartTimeJob(x)": "x is a part-time job",
            "Have(james, x)": "James has x",
            "OfferedBy(x, computerScienceDepartment)": "x is offered by the computer science department",
            "¬∃x": "There does not exist an x such that"
        },
        "Premise": {
            "P1": "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computerScienceDepartment))",
            "P2": "∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))",
            "P3": "∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))",
            "P4": "∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))",
            "P5": "∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))",
            "P6": "Student(james) ∧ WorkIn(james, lab)",
            "P7": "¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)"
        },
        "Conclusion": "¬∃y(PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))",
        "Label": "True",
        "ori_premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "ori_conclusion": "James does not have a part-time job offered by the university.",
        "metadata": "FOLIO_435",
        "proof_label": "__PROVED__",
        "input": "Fact1:None of the students who currently work in the library are from the computer science department. \nFact2:All of the students with part-time jobs offered by the university currently work in the library. \nFact3:All of the students who are taking the database course are from the computer science department. \nFact4:All of the students taking a class with Professor David are taking the database course. \nFact5:All students working in the lab are taking a class with Professor David.\nFact6:James is a student working in the lab. \nFact7:James doesn't work in the lab or have a part-time job offered by the university.\nHypothesis:James does not have a part-time job offered by the university."
    },
    {
        "Symbol Mapping": {
            "Student(x)": "x is a student",
            "WorkIn(x, library)": "x works in the library",
            "From(x, computerScienceDepartment)": "x is from the computer science department",
            "Have(x, partTimeJob)": "x has a part-time job",
            "OfferedBy(y, university)": "y is offered by the university",
            "Take(x, databaseCourse)": "x takes the database course",
            "InstructedBy(x, professorDavid)": "x is instructed by Professor David",
            "WorkIn(x, lab)": "x works in the lab",
            "PartTimeJob(x)": "x is a part-time job",
            "Have(james, x)": "James has x",
            "OfferedBy(x, computerScienceDepartment)": "x is offered by the computer science department",
            "Take(james, databaseCourse)": "James takes the database course",
            "⊕": "Exclusive OR (only one of the two conditions is true)",
            "∃x": "There exists an x",
            "¬": "Negation (not true)",
            "∧": "Logical AND",
            "→": "Logical implication (if...then)"
        },
        "Premise": {
            "P1": "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computerScienceDepartment))",
            "P2": "∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))",
            "P3": "∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))",
            "P4": "∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))",
            "P5": "∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))",
            "P6": "Student(james) ∧ WorkIn(james, lab)",
            "P7": "¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)"
        },
        "Conclusion": "Take(james, databaseCourse) ⊕ (∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university)))",
        "Label": "True",
        "ori_premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "ori_conclusion": "James either takes the database course or has a part-time job offered by the university.",
        "metadata": "FOLIO_435",
        "proof_label": "__PROVED__",
        "input": "Fact1:None of the students who currently work in the library are from the computer science department. \nFact2:All of the students with part-time jobs offered by the university currently work in the library. \nFact3:All of the students who are taking the database course are from the computer science department. \nFact4:All of the students taking a class with Professor David are taking the database course. \nFact5:All students working in the lab are taking a class with Professor David.\nFact6:James is a student working in the lab. \nFact7:James doesn't work in the lab or have a part-time job offered by the university.\nHypothesis:James either takes the database course or has a part-time job offered by the university."
    },
    {
        "Symbol Mapping": {
            "Student(x)": "x is a student",
            "WorkIn(x, library)": "x works in the library",
            "From(x, computerScienceDepartment)": "x is from the computer science department",
            "Have(x, partTimeJob)": "x has a part-time job",
            "OfferedBy(y, university)": "y is offered by the university",
            "Take(x, databaseCourse)": "x takes the database course",
            "InstructedBy(x, professorDavid)": "x is instructed by Professor David",
            "WorkIn(x, lab)": "x works in the lab",
            "PartTimeJob(x)": "x is a part-time job",
            "Have(james, x)": "James has x (a part-time job)",
            "OfferedBy(x, computerScienceDepartment)": "x is offered by the computer science department"
        },
        "Premise": {
            "P1": "∀x (Student(x) ∧ WorkIn(x, library) → ¬From(x, computerScienceDepartment))",
            "P2": "∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))",
            "P3": "∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))",
            "P4": "∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))",
            "P5": "∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))",
            "P6": "Student(james) ∧ WorkIn(james, lab)",
            "P7": "¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)"
        },
        "Conclusion": "Take(james, databaseCourse)",
        "Label": "Uncertain",
        "ori_premises": [
            "None of the students who currently work in the library are from the computer science department. ",
            "All of the students with part-time jobs offered by the university currently work in the library. ",
            "All of the students who are taking the database course are from the computer science department. ",
            "All of the students taking a class with Professor David are taking the database course. ",
            "All students working in the lab are taking a class with Professor David.",
            "James is a student working in the lab. ",
            "James doesn't work in the lab or have a part-time job offered by the university."
        ],
        "ori_conclusion": "James takes the database course.",
        "metadata": "FOLIO_435",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:None of the students who currently work in the library are from the computer science department. \nFact2:All of the students with part-time jobs offered by the university currently work in the library. \nFact3:All of the students who are taking the database course are from the computer science department. \nFact4:All of the students taking a class with Professor David are taking the database course. \nFact5:All students working in the lab are taking a class with Professor David.\nFact6:James is a student working in the lab. \nFact7:James doesn't work in the lab or have a part-time job offered by the university.\nHypothesis:James takes the database course."
    },
    {
        "Symbol Mapping": {
            "LikeMusic(x)": "x likes music",
            "WantToCompose(x)": "x wants to compose",
            "AccesstoProgram(x)": "x has access to a program",
            "CanCompose(x)": "x can compose",
            "WillCompose(x)": "x will compose"
        },
        "Premise": {
            "P1": "LikeMusic(george) → WantToCompose(george)",
            "P2": "AccesstoProgram(george) → CanCompose(george)",
            "P3": "(WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)"
        },
        "Conclusion": "(LikeMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)",
        "Label": "True",
        "ori_premises": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "ori_conclusion": "If George likes music and has access to a program, he will compose.",
        "metadata": "FOLIO_217",
        "proof_label": "__PROVED__",
        "input": "Fact1:If George likes music, he wants to compose.\nFact2:If George has access to a program, he can compose.\nFact3:If George can compose and wants to compose, he will compose.\nHypothesis:If George likes music and has access to a program, he will compose."
    },
    {
        "Symbol Mapping": {
            "LikeMusic(x)": "x likes music",
            "WantToCompose(x)": "x wants to compose",
            "AccesstoProgram(x)": "x has access to a program",
            "CanCompose(x)": "x can compose",
            "WillCompose(x)": "x will compose",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "→": "Logical implication (if...then)"
        },
        "Premise": {
            "P1": "LikeMusic(george) → WantToCompose(george)",
            "P2": "AccesstoProgram(george) → CanCompose(george)",
            "P3": "(WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)"
        },
        "Conclusion": "¬WantToCompose(george) → ¬WillCompose(george)",
        "Label": "Uncertain",
        "ori_premises": [
            "If George likes music, he wants to compose.",
            "If George has access to a program, he can compose.",
            "If George can compose and wants to compose, he will compose."
        ],
        "ori_conclusion": "If George will not compose, George can not compose.",
        "metadata": "FOLIO_217",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If George likes music, he wants to compose.\nFact2:If George has access to a program, he can compose.\nFact3:If George can compose and wants to compose, he will compose.\nHypothesis:If George will not compose, George can not compose."
    },
    {
        "Symbol Mapping": {
            "Hawk(x)": "x is a hawk",
            "Swim(x)": "x can swim",
            "Bird(x)": "x is a bird",
            "¬(x = y)": "x and y are distinct entities",
            "∀x": "For all entities x",
            "∃x": "There exists an entity x",
            "∃y": "There exists an entity y",
            "→": "Logical implication (if...then)",
            "∧": "Logical conjunction (and)"
        },
        "Premise": {
            "P1": "∀x (Hawk(x) → ¬Swim(x))",
            "P2": "∃x (Bird(x) ∧ Hawk(x))"
        },
        "Conclusion": "∀x (Bird(x) → Swim(x))",
        "Label": "False",
        "ori_premises": [
            "A hawk never swims. ",
            "Some birds are hawks."
        ],
        "ori_conclusion": "All birds swim.",
        "metadata": "FOLIO_292",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:A hawk never swims. \nFact2:Some birds are hawks.\nHypothesis:All birds swim."
    },
    {
        "Symbol Mapping": {
            "Show(x)": "x is a show",
            "AiringAtOn(x, 8PMMonday)": "x is airing at 8 pm on Monday",
            "GivenOutOn(x, rose, tV)": "x gives out roses on TV",
            "GivenOutOnAt(rose, tV, x)": "x involves giving out roses on TV",
            "TheBachelor(x)": "x is an episode of The Bachelor",
            "Portray(x, lifeOfRealPeople)": "x portrays the lives of real people",
            "RealityTVShow(x)": "x is a reality TV show",
            "MondayAt8PM(x)": "x represents the time Monday at 8 pm",
            "On(breakingBad, x)": "Breaking Bad is on at time x",
            "¬RealityTVShow(breakingBad)": "Breaking Bad is not a reality TV show"
        },
        "Premise": {
            "P1": "∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))",
            "P2": "∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))",
            "P3": "∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))",
            "P4": "∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))",
            "P5": "Show(breakingBad)",
            "P6": "¬RealityTVShow(breakingBad)"
        },
        "Conclusion": "∀x (MondayAt8PM(x) ∧ On(breakingBad, x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "ori_conclusion": "Breaking Bad is on Monday at 8 pm.",
        "metadata": "FOLIO_318",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Some show airing at 8 pm on Monday gives out roses on TV.\nFact2:If a show gives out roses on TV, then the show is an episode of The Bachelor.\nFact3:The Bachelor portrays the lives of real people.\nFact4:All shows portraying the lives of real people are reality TV shows.\nFact5:Breaking Bad is a show.\nFact6:Breaking Bad is not a reality TV show.\nHypothesis:Breaking Bad is on Monday at 8 pm."
    },
    {
        "Symbol Mapping": {
            "Show(x)": "x is a show",
            "AiringAtOn(x, 8PMMonday)": "x is airing at 8 pm on Monday",
            "GivenOutOn(x, rose, tV)": "x gives out roses on TV",
            "GivenOutOnAt(rose, tV, x)": "Roses are given out on TV at time x",
            "TheBachelor(x)": "x is an episode of The Bachelor",
            "Portray(x, lifeOfRealPeople)": "x portrays the lives of real people",
            "RealityTVShow(x)": "x is a reality TV show",
            "¬RealityTVShow(x)": "x is not a reality TV show",
            "MondayAt8PM(x)": "x represents Monday at 8 pm",
            "Rose(y)": "y is a rose",
            "On(tv, x)": "The event occurs on TV at time x",
            "From(y, breakingBad)": "y originates from Breaking Bad"
        },
        "Premise": {
            "P1": "∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))",
            "P2": "∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))",
            "P3": "∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))",
            "P4": "∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))",
            "P5": "Show(breakingBad)",
            "P6": "¬RealityTVShow(breakingBad)"
        },
        "Conclusion": "∀x ∀y (MondayAt8PM(x) ∧ Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad))",
        "Label": "False",
        "ori_premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "ori_conclusion": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "metadata": "FOLIO_318",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Some show airing at 8 pm on Monday gives out roses on TV.\nFact2:If a show gives out roses on TV, then the show is an episode of The Bachelor.\nFact3:The Bachelor portrays the lives of real people.\nFact4:All shows portraying the lives of real people are reality TV shows.\nFact5:Breaking Bad is a show.\nFact6:Breaking Bad is not a reality TV show.\nHypothesis:Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."
    },
    {
        "Symbol Mapping": {
            "Show(x)": "x is a show",
            "AiringAtOn(x, 8PMMonday)": "x airs at 8 pm on Monday",
            "GivenOutOn(x, rose, tV)": "x gives out roses on TV",
            "GivenOutOnAt(rose, tV, x)": "Roses are given out on TV at time x",
            "TheBachelor(x)": "x is an episode of The Bachelor",
            "Portray(x, lifeOfRealPeople)": "x portrays the lives of real people",
            "RealityTVShow(x)": "x is a reality TV show",
            "Rose(y)": "y is a rose",
            "GivenOutOn(y, tv)": "y is given out on TV",
            "On(tv, x)": "The event tv occurs at time x",
            "From(y, breakingBad)": "y is associated with Breaking Bad",
            "MondayAt8PM(x)": "x is Monday at 8 pm",
            "¬RealityTVShow(breakingBad)": "Breaking Bad is not a reality TV show"
        },
        "Premise": {
            "P1": "∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))",
            "P2": "∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))",
            "P3": "∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))",
            "P4": "∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))",
            "P5": "Show(breakingBad)",
            "P6": "¬RealityTVShow(breakingBad)"
        },
        "Conclusion": "∀x ∀y ((Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad)) → MondayAt8PM(x))",
        "Label": "True",
        "ori_premises": [
            "Some show airing at 8 pm on Monday gives out roses on TV.",
            "If a show gives out roses on TV, then the show is an episode of The Bachelor.",
            "The Bachelor portrays the lives of real people.",
            "All shows portraying the lives of real people are reality TV shows.",
            "Breaking Bad is a show.",
            "Breaking Bad is not a reality TV show."
        ],
        "ori_conclusion": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "metadata": "FOLIO_318",
        "proof_label": "__PROVED__",
        "input": "Fact1:Some show airing at 8 pm on Monday gives out roses on TV.\nFact2:If a show gives out roses on TV, then the show is an episode of The Bachelor.\nFact3:The Bachelor portrays the lives of real people.\nFact4:All shows portraying the lives of real people are reality TV shows.\nFact5:Breaking Bad is a show.\nFact6:Breaking Bad is not a reality TV show.\nHypothesis:If roses are given out during Breaking Bad, then it is on Monday at 8 pm."
    },
    {
        "Symbol Mapping": {
            "German(x)": "x is German",
            "Politician(x)": "x is a politician",
            "Member(x, y)": "x is a member of y",
            "Russian(x)": "x is Russian"
        },
        "Premise": {
            "P1": "German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)",
            "P2": "Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)"
        },
        "Conclusion": "German(heinrichSchmidt) ∨ Russian(heinrichSchmidt)",
        "Label": "True",
        "ori_premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "ori_conclusion": "Heinrich Schmidt was German or Russian or both.",
        "metadata": "FOLIO_107",
        "proof_label": "__PROVED__",
        "input": "Fact1:Heinrich Schmidt was a German politician. \nFact2:Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nHypothesis:Heinrich Schmidt was German or Russian or both."
    },
    {
        "Symbol Mapping": {
            "German(x)": "x is German",
            "Politician(x)": "x is a politician",
            "Member(x, y)": "x is a member of y",
            "prussianStateParliament": "The Prussian State Parliament",
            "naziReichstag": "The Nazi Reichstag",
            "heinrichSchmidt": "A specific individual named Heinrich Schmidt"
        },
        "Premise": {
            "P1": "German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)",
            "P2": "Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)"
        },
        "Conclusion": "∃x (German(x) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))",
        "Label": "True",
        "ori_premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "ori_conclusion": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "metadata": "FOLIO_107",
        "proof_label": "__PROVED__",
        "input": "Fact1:Heinrich Schmidt was a German politician. \nFact2:Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nHypothesis:Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag."
    },
    {
        "Symbol Mapping": {
            "German(x)": "x is German",
            "Politician(x)": "x is a politician",
            "Member(x, y)": "x is a member of y",
            "prussianStateParliament": "The Prussian State Parliament",
            "naziReichstag": "The Nazi Reichstag"
        },
        "Premise": {
            "P1": "German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)",
            "P2": "Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)"
        },
        "Conclusion": "∀x (Politician(x) → ¬Member(x, naziReichstag))",
        "Label": "False",
        "ori_premises": [
            "Heinrich Schmidt was a German politician. ",
            "Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."
        ],
        "ori_conclusion": "No politicians are part of the Nazi Reichstag.",
        "metadata": "FOLIO_107",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Heinrich Schmidt was a German politician. \nFact2:Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nHypothesis:No politicians are part of the Nazi Reichstag."
    },
    {
        "Symbol Mapping": {
            "DeadlyDiseases(x)": "x is a deadly disease",
            "ComeWith(x, lowSurvivalRate)": "x comes with a low survival rate",
            "SevereCancer(x)": "x is a severe cancer",
            "BileDuctCancer(x)": "x is a bile duct cancer",
            "Cholangiocarcinoma(x)": "x is a cholangiocarcinoma",
            "MildFlu(x)": "x is a mild flu",
            "colorectalCancer": "The specific entity representing colorectal cancer"
        },
        "Premise": {
            "P1": "∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))",
            "P2": "∀x (SevereCancer(x) → DeadlyDiseases(x))",
            "P3": "∀x (BileDuctCancer(x) → SevereCancer(x))",
            "P4": "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
            "P5": "∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate))",
            "P6": "¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))"
        },
        "Conclusion": "SevereCancer(colorectalCancer)",
        "Label": "Uncertain",
        "ori_premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "ori_conclusion": "Colorectal cancer is a kind of severe cancer",
        "metadata": "FOLIO_386",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:If something is a deadly disease, then it comes with a low survival rate. \nFact2:Severe cancers are deadly diseases.\nFact3:Bile duct cancer is a severe form cancer. \nFact4:All Cholangiocarcinoma is bile duct cancer.\nFact5:Mild flu comes with a low survival rate.\nFact6:Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nHypothesis:Colorectal cancer is a kind of severe cancer"
    },
    {
        "Symbol Mapping": {
            "DeadlyDiseases(x)": "x is a deadly disease",
            "ComeWith(x, lowSurvivalRate)": "x comes with a low survival rate",
            "SevereCancer(x)": "x is a severe cancer",
            "BileDuctCancer(x)": "x is a bile duct cancer",
            "Cholangiocarcinoma(x)": "x is a form of Cholangiocarcinoma",
            "MildFlu(x)": "x is a mild flu",
            "colorectalCancer": "The specific entity representing colorectal cancer"
        },
        "Premise": {
            "P1": "∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))",
            "P2": "∀x (SevereCancer(x) → DeadlyDiseases(x))",
            "P3": "∀x (BileDuctCancer(x) → SevereCancer(x))",
            "P4": "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
            "P5": "∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate))",
            "P6": "¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))"
        },
        "Conclusion": "¬(BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ∨ (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer))",
        "Label": "True",
        "ori_premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "ori_conclusion": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
        "metadata": "FOLIO_386",
        "proof_label": "__PROVED__",
        "input": "Fact1:If something is a deadly disease, then it comes with a low survival rate. \nFact2:Severe cancers are deadly diseases.\nFact3:Bile duct cancer is a severe form cancer. \nFact4:All Cholangiocarcinoma is bile duct cancer.\nFact5:Mild flu comes with a low survival rate.\nFact6:Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nHypothesis:If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu."
    },
    {
        "Symbol Mapping": {
            "DeadlyDiseases(x)": "x is a deadly disease",
            "ComeWith(x, lowSurvivalRate)": "x comes with a low survival rate",
            "SevereCancer(x)": "x is a severe cancer",
            "BileDuctCancer(x)": "x is a bile duct cancer",
            "Cholangiocarcinoma(x)": "x is a Cholangiocarcinoma",
            "MildFlu(x)": "x is a mild flu",
            "colorectalCancer": "The entity representing colorectal cancer"
        },
        "Premise": {
            "P1": "∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))",
            "P2": "∀x (SevereCancer(x) → DeadlyDiseases(x))",
            "P3": "∀x (BileDuctCancer(x) → SevereCancer(x))",
            "P4": "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))",
            "P5": "∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate))",
            "P6": "¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))"
        },
        "Conclusion": "Cholangiocarcinoma(colorectalCancer) ∧ (MildFlu(colorectalCancer) ∨ BileDuctCancer(colorectalCancer))",
        "Label": "False",
        "ori_premises": [
            "If something is a deadly disease, then it comes with a low survival rate. ",
            "Severe cancers are deadly diseases.",
            "Bile duct cancer is a severe form cancer. ",
            "All Cholangiocarcinoma is bile duct cancer.",
            "Mild flu comes with a low survival rate.",
            "Colorectal cancer is not both a bile duct cancer and with a low survival rate."
        ],
        "ori_conclusion": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
        "metadata": "FOLIO_386",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:If something is a deadly disease, then it comes with a low survival rate. \nFact2:Severe cancers are deadly diseases.\nFact3:Bile duct cancer is a severe form cancer. \nFact4:All Cholangiocarcinoma is bile duct cancer.\nFact5:Mild flu comes with a low survival rate.\nFact6:Colorectal cancer is not both a bile duct cancer and with a low survival rate.\nHypothesis:Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above."
    },
    {
        "Symbol Mapping": {
            "RegularlyEat(x, salad)": "x eats salads regularly",
            "ConsciousAbout(x, health)": "x is conscious about their health",
            "ConsciousAbout(x, eatingHabit)": "x is conscious about their eating habits",
            "GrewUpIn(x, health-consciousChildhoodHome)": "x grew up in a health-conscious childhood home",
            "Fulfill(x, dailyNutritionalIntake)": "x fulfills their daily nutritional intake",
            "Disregard(x, physicalWellbeing)": "x disregards their physical well-being",
            "VisitDaily(x, gym)": "x visits the gym at least once a day",
            "¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))": "Taylor either grew up in a health-conscious childhood home and disregards her physical well-being, or she did neither"
        },
        "Premise": {
            "P1": "∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit))",
            "P2": "∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))",
            "P3": "∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))",
            "P4": "∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))",
            "P5": "∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))",
            "P6": "¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))"
        },
        "Conclusion": "RegularlyEat(taylor, salad)",
        "Label": "Uncertain",
        "ori_premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "ori_conclusion": "Taylor eats salads regularly.",
        "metadata": "FOLIO_355",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:All people who eat salads regularly are very conscious about their health and eating habits.\nFact2:All people who grew up in health-conscious childhood homes eat salads regularly.\nFact3:All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nFact4:All people who disregard their physical well-being are not very conscious about their health and eating habits.\nFact5:If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nFact6:Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nHypothesis:Taylor eats salads regularly."
    },
    {
        "Symbol Mapping": {
            "RegularlyEat(x, salad)": "Predicate indicating that individual x eats salads regularly.",
            "ConsciousAbout(x, health)": "Predicate indicating that individual x is conscious about their health.",
            "ConsciousAbout(x, eatingHabit)": "Predicate indicating that individual x is conscious about their eating habits.",
            "GrewUpIn(x, health-consciousChildhoodHome)": "Predicate indicating that individual x grew up in a health-conscious childhood home.",
            "Fulfill(x, dailyNutritionalIntake)": "Predicate indicating that individual x fulfills their daily nutritional intake.",
            "Disregard(x, physicalWellbeing)": "Predicate indicating that individual x disregards their physical well-being.",
            "VisitDaily(x, gym)": "Predicate indicating that individual x visits the gym at least once a day.",
            "¬": "Logical negation (not).",
            "∧": "Logical conjunction (and).",
            "→": "Logical implication (if...then).",
            "⊕": "Logical exclusive OR (either...or, but not both).",
            "∀x": "Universal quantifier (for all individuals x).",
            "taylor": "Constant representing the individual Taylor."
        },
        "Premise": {
            "P1": "∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit))",
            "P2": "∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))",
            "P3": "∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))",
            "P4": "∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))",
            "P5": "∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))",
            "P6": "¬(GrewUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))"
        },
        "Conclusion": "VisitDaily(taylor, gym)",
        "Label": "False",
        "ori_premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "ori_conclusion": "Taylor visits the gym at least once a day.",
        "metadata": "FOLIO_355",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All people who eat salads regularly are very conscious about their health and eating habits.\nFact2:All people who grew up in health-conscious childhood homes eat salads regularly.\nFact3:All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nFact4:All people who disregard their physical well-being are not very conscious about their health and eating habits.\nFact5:If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nFact6:Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nHypothesis:Taylor visits the gym at least once a day."
    },
    {
        "Symbol Mapping": {
            "RegularlyEat(x, salad)": "x eats salads regularly",
            "ConsciousAbout(x, health)": "x is conscious about their health",
            "ConsciousAbout(x, eatingHabit)": "x is conscious about their eating habits",
            "GrewUpIn(x, health-consciousChildhoodHome)": "x grew up in a health-conscious childhood home",
            "Fulfill(x, dailyNutritionalIntake)": "x fulfills their daily nutritional intake",
            "Disregard(x, physicalWellbeing)": "x disregards their physical well-being",
            "VisitDaily(x, gym)": "x visits the gym at least once a day",
            "¬": "Logical negation (NOT)",
            "∧": "Logical conjunction (AND)",
            "→": "Logical implication (IF-THEN)",
            "⊕": "Logical exclusive OR (XOR)"
        },
        "Premise": {
            "P1": "∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit))",
            "P2": "∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))",
            "P3": "∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))",
            "P4": "∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))",
            "P5": "∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))",
            "P6": "¬(GrewUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))"
        },
        "Conclusion": "¬GrewUpIn(taylor, health-consciousChildhoodHome) ∧ ¬VisitDaily(taylor, gym)",
        "Label": "True",
        "ori_premises": [
            "All people who eat salads regularly are very conscious about their health and eating habits.",
            "All people who grew up in health-conscious childhood homes eat salads regularly.",
            "All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.",
            "All people who disregard their physical well-being are not very conscious about their health and eating habits.",
            "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.",
            "Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."
        ],
        "ori_conclusion": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "metadata": "FOLIO_355",
        "proof_label": "__PROVED__",
        "input": "Fact1:All people who eat salads regularly are very conscious about their health and eating habits.\nFact2:All people who grew up in health-conscious childhood homes eat salads regularly.\nFact3:All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nFact4:All people who disregard their physical well-being are not very conscious about their health and eating habits.\nFact5:If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nFact6:Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\nHypothesis:Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."
    },
    {
        "Symbol Mapping": {
            "SportingEvent(x)": "x is a sporting event",
            "LastSummerOlympics(x)": "x is the location of the last summer Olympic games",
            "MostMedals(x, y)": "x won the most medals in event/location y"
        },
        "Premise": {
            "P1": "SportingEvent(olympics)",
            "P2": "LastSummerOlympics(tokyo)",
            "P3": "MostMedals(unitedStates, tokyo)"
        },
        "Conclusion": "SportingEvent(champs)",
        "Label": "Uncertain",
        "ori_premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "ori_conclusion": "The world championships is a sporting event.",
        "metadata": "FOLIO_51",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:The summer Olympic games is a sporting event. \nFact2:The last summer Olympic games was in Tokyo.\nFact3:The United States won the most medals in Tokyo. \nHypothesis:The world championships is a sporting event."
    },
    {
        "Symbol Mapping": {
            "SportingEvent(x)": "x is a sporting event",
            "LastSummerOlympics(x)": "x is the location of the last summer Olympic games",
            "MostMedals(x, y)": "x won the most medals in the event held at location y",
            "¬LastSummerOlympics(x)": "It is not the case that x is the location of the last summer Olympic games"
        },
        "Premise": {
            "P1": "SportingEvent(olympics)",
            "P2": "LastSummerOlympics(tokyo)",
            "P3": "MostMedals(unitedStates, tokyo)"
        },
        "Conclusion": "¬LastSummerOlympics(tokyo)",
        "Label": "False",
        "ori_premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "ori_conclusion": "The last summer Olympic games were not in Tokyo.",
        "metadata": "FOLIO_51",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:The summer Olympic games is a sporting event. \nFact2:The last summer Olympic games was in Tokyo.\nFact3:The United States won the most medals in Tokyo. \nHypothesis:The last summer Olympic games were not in Tokyo."
    },
    {
        "Symbol Mapping": {
            "SportingEvent(x)": "x is a sporting event",
            "LastSummerOlympics(x)": "x is the last summer Olympic games",
            "MostMedals(x, y)": "x won the most medals in event/location y",
            "unitedStates": "The United States",
            "tokyo": "The city of Tokyo"
        },
        "Premise": {
            "P1": "SportingEvent(olympics)",
            "P2": "LastSummerOlympics(tokyo)",
            "P3": "MostMedals(unitedStates, tokyo)"
        },
        "Conclusion": "∃x (LastSummerOlympics(x) ∧ MostMedals(unitedStates, x))",
        "Label": "True",
        "ori_premises": [
            "The summer Olympic games is a sporting event. ",
            "The last summer Olympic games was in Tokyo.",
            "The United States won the most medals in Tokyo. "
        ],
        "ori_conclusion": "The United States won the most medals in the last summer Olympic games.",
        "metadata": "FOLIO_51",
        "proof_label": "__PROVED__",
        "input": "Fact1:The summer Olympic games is a sporting event. \nFact2:The last summer Olympic games was in Tokyo.\nFact3:The United States won the most medals in Tokyo. \nHypothesis:The United States won the most medals in the last summer Olympic games."
    },
    {
        "Symbol Mapping": {
            "Horse(x)": "x is a horse",
            "Human(x)": "x is a human",
            "Hoof(y)": "y is a hoof",
            "Have(x, y)": "x has y",
            "¬(y=z)": "y and z are distinct entities",
            "∃x": "There exists an entity x",
            "∀x": "For all entities x",
            "∧": "Logical AND",
            "→": "Logical implication",
            "¬": "Logical negation"
        },
        "Premise": {
            "P1": "∀x (Horse(x) → ∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P2": "∀x (Human(x) → ¬(∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z))))"
        },
        "Conclusion": "∃x (Human(x) ∧ Human(y) ∧ Horse(x) ∧ Horse(y) ∧ ¬(x=y))",
        "Label": "False",
        "ori_premises": [
            "All horses have hooves.",
            "No humans have hooves."
        ],
        "ori_conclusion": "Some humans are horses.",
        "metadata": "FOLIO_259",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:All horses have hooves.\nFact2:No humans have hooves.\nHypothesis:Some humans are horses."
    },
    {
        "Symbol Mapping": {
            "FlyTo(x, y)": "Represents that entity x flies to location y.",
            "FlyFrom(x, y)": "Represents that entity x flies from location y.",
            "⊕": "Exclusive OR (XOR), meaning exactly one of the two conditions is true, but not both.",
            "∀x ∀y": "For all entities x and y."
        },
        "Premise": {
            "P1": "FlyTo(susan, lgaAirport)",
            "P2": "∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))",
            "P3": "FlyFrom(john, lgaAirport)"
        },
        "Conclusion": "FlyFrom(susan, lgaAirport)",
        "Label": "False",
        "ori_premises": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "ori_conclusion": "Susan flies from LGA airport.",
        "metadata": "FOLIO_152",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Susan flies to LGA airport.\nFact2:The departure and arrival can not be at the same airport.\nFact3:John flies from LGA airport.\nHypothesis:Susan flies from LGA airport."
    },
    {
        "Symbol Mapping": {
            "FlyTo(x, y)": "Represents that entity x flies to location y.",
            "FlyFrom(x, y)": "Represents that entity x flies from location y.",
            "⊕": "Represents the exclusive OR (XOR) operator, meaning exactly one of the two conditions is true.",
            "∀x": "Universal quantifier, meaning 'for all x'.",
            "∀y": "Universal quantifier, meaning 'for all y'."
        },
        "Premise": {
            "P1": "FlyTo(susan, lgaAirport)",
            "P2": "∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))",
            "P3": "FlyFrom(john, lgaAirport)"
        },
        "Conclusion": "FlyTo(john, lgaAirport)",
        "Label": "False",
        "ori_premises": [
            "Susan flies to LGA airport.",
            "The departure and arrival can not be at the same airport.",
            "John flies from LGA airport."
        ],
        "ori_conclusion": "John flies to LGA airport.",
        "metadata": "FOLIO_152",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Susan flies to LGA airport.\nFact2:The departure and arrival can not be at the same airport.\nFact3:John flies from LGA airport.\nHypothesis:John flies to LGA airport."
    },
    {
        "Symbol Mapping": {
            "NiceTo(x, animal)": "x is nice to animals",
            "MeanTo(x, animal)": "x is mean to animals",
            "Grumpy(x)": "x is a grumpy person",
            "AnimalLover(x)": "x loves animals",
            "PetOwner(x)": "x is a pet owner",
            "tom": "The individual named Tom"
        },
        "Premise": {
            "P1": "∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))",
            "P2": "∃x (Grumpy(x) ∧ MeanTo(x, animal))",
            "P3": "∀x (AnimalLover(x) → NiceTo(x, animal))",
            "P4": "∀x (PetOwner(x) → AnimalLover(x))",
            "P5": "PetOwner(tom)"
        },
        "Conclusion": "Grumpy(tom)",
        "Label": "Uncertain",
        "ori_premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "ori_conclusion": "Tom is a grumpy person.",
        "metadata": "FOLIO_441",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:No one nice to animals is also mean to animals.\nFact2:Some grumpy people are mean to animals.\nFact3:All animal lovers are nice to animals.\nFact4:All pet owners love animals.\nFact5:Tom is a pet owner.\nHypothesis:Tom is a grumpy person."
    },
    {
        "Symbol Mapping": {
            "NiceTo(x, animal)": "x is nice to animals",
            "MeanTo(x, animal)": "x is mean to animals",
            "Grumpy(x)": "x is a grumpy person",
            "AnimalLover(x)": "x is an animal lover",
            "PetOwner(x)": "x is a pet owner",
            "tom": "A specific individual named Tom"
        },
        "Premise": {
            "P1": "∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))",
            "P2": "∃x (Grumpy(x) ∧ MeanTo(x, animal))",
            "P3": "∀x (AnimalLover(x) → NiceTo(x, animal))",
            "P4": "∀x (PetOwner(x) → AnimalLover(x))",
            "P5": "PetOwner(tom)"
        },
        "Conclusion": "¬(Grumpy(tom) ∧ MeanTo(tom, animal))",
        "Label": "True",
        "ori_premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "ori_conclusion": "Tom is not both a grumpy person and mean to animals.",
        "metadata": "FOLIO_441",
        "proof_label": "__PROVED__",
        "input": "Fact1:No one nice to animals is also mean to animals.\nFact2:Some grumpy people are mean to animals.\nFact3:All animal lovers are nice to animals.\nFact4:All pet owners love animals.\nFact5:Tom is a pet owner.\nHypothesis:Tom is not both a grumpy person and mean to animals."
    },
    {
        "Symbol Mapping": {
            "NiceTo(x, animal)": "Predicate indicating that individual x is nice to animals.",
            "MeanTo(x, animal)": "Predicate indicating that individual x is mean to animals.",
            "Grumpy(x)": "Predicate indicating that individual x is grumpy.",
            "AnimalLover(x)": "Predicate indicating that individual x is an animal lover.",
            "PetOwner(x)": "Predicate indicating that individual x is a pet owner.",
            "tom": "Constant representing the individual Tom."
        },
        "Premise": {
            "P1": "∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))",
            "P2": "∃x (Grumpy(x) ∧ MeanTo(x, animal))",
            "P3": "∀x (AnimalLover(x) → NiceTo(x, animal))",
            "P4": "∀x (PetOwner(x) → AnimalLover(x))",
            "P5": "PetOwner(tom)"
        },
        "Conclusion": "¬(Grumpy(tom) ∧ MeanTo(tom, animal)) → (¬Grumpy(tom) ∧ ¬AnimalLover(tom))",
        "Label": "False",
        "ori_premises": [
            "No one nice to animals is also mean to animals.",
            "Some grumpy people are mean to animals.",
            "All animal lovers are nice to animals.",
            "All pet owners love animals.",
            "Tom is a pet owner."
        ],
        "ori_conclusion": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
        "metadata": "FOLIO_441",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:No one nice to animals is also mean to animals.\nFact2:Some grumpy people are mean to animals.\nFact3:All animal lovers are nice to animals.\nFact4:All pet owners love animals.\nFact5:Tom is a pet owner.\nHypothesis:If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover."
    },
    {
        "Symbol Mapping": {
            "Podcast(x)": "x is a podcast",
            "Novel(x)": "x is a novel",
            "BornIn(x, y)": "x is born in y",
            "City(y)": "y is a city",
            "LocatedIn(y, america)": "y is located in America",
            "American(x)": "x is American",
            "Writer(x)": "x is a writer",
            "WrittenBy(x, y)": "x is written by y",
            "WritesNovel(y)": "y writes novels",
            "WrittenIn(x, yr2003)": "x is written in the year 2003",
            "CreatedBy(x, y)": "x is created by y"
        },
        "Premise": {
            "P1": "∀x (Podcast(x) → ¬Novel(x))",
            "P2": "∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america))) → American(x))",
            "P3": "∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))",
            "P4": "American(dani_Shapiro) ∧ Writer(dani_Shapiro)",
            "P5": "WrittenBy(family_History, dani_Shapiro)",
            "P6": "Novel(family_History) ∧ WrittenIn(family_History, yr2003)",
            "P7": "Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)",
            "P8": "City(boston) ∧ American(boston)"
        },
        "Conclusion": "WritesNovel(dani_Shapiro)",
        "Label": "True",
        "ori_premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "ori_conclusion": "Dani Shapiro is a novel writer.",
        "metadata": "FOLIO_64",
        "proof_label": "__PROVED__",
        "input": "Fact1:A podcast is not a novel.\nFact2:If a person is born in American City, the person is American.\nFact3:If a book is a novel and it is written by a person, then the person is a novel writer.\nFact4:Dani Shapiro is an American writer.\nFact5:Family History is written by Dani Shapiro.\nFact6:Family History is a novel written in 2003.\nFact7:Dani Shapiro created a podcast called Family Secrets.\nFact8:Boston is an American city.\nHypothesis:Dani Shapiro is a novel writer."
    },
    {
        "Symbol Mapping": {
            "Podcast(x)": "x is a podcast",
            "Novel(x)": "x is a novel",
            "BornIn(x, y)": "x is born in y",
            "City(y)": "y is a city",
            "LocatedIn(y, america)": "y is located in America",
            "American(x)": "x is American",
            "WrittenBy(x, y)": "x is written by y",
            "WritesNovel(y)": "y writes novels",
            "Writer(x)": "x is a writer",
            "WrittenIn(x, yr2003)": "x is written in the year 2003",
            "CreatedBy(x, y)": "x is created by y",
            "IsNovel(x)": "x is a novel"
        },
        "Premise": {
            "P1": "∀x (Podcast(x) → ¬Novel(x))",
            "P2": "∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america))) → American(x))",
            "P3": "∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))",
            "P4": "American(dani_Shapiro) ∧ Writer(dani_Shapiro)",
            "P5": "WrittenBy(family_History, dani_Shapiro)",
            "P6": "Novel(family_History) ∧ WrittenIn(family_History, yr2003)",
            "P7": "Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)",
            "P8": "City(boston) ∧ American(boston)"
        },
        "Conclusion": "IsNovel(family_Secrets)",
        "Label": "False",
        "ori_premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "ori_conclusion": "Family Secrets is a novel.",
        "metadata": "FOLIO_64",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:A podcast is not a novel.\nFact2:If a person is born in American City, the person is American.\nFact3:If a book is a novel and it is written by a person, then the person is a novel writer.\nFact4:Dani Shapiro is an American writer.\nFact5:Family History is written by Dani Shapiro.\nFact6:Family History is a novel written in 2003.\nFact7:Dani Shapiro created a podcast called Family Secrets.\nFact8:Boston is an American city.\nHypothesis:Family Secrets is a novel."
    },
    {
        "Symbol Mapping": {
            "Podcast(x)": "x is a podcast",
            "Novel(x)": "x is a novel",
            "BornIn(x, y)": "x was born in y",
            "City(y)": "y is a city",
            "LocatedIn(y, america)": "y is located in America",
            "American(x)": "x is American",
            "WrittenBy(x, y)": "x is written by y",
            "WritesNovel(y)": "y writes novels",
            "Writer(x)": "x is a writer",
            "WrittenIn(x, y)": "x was written in year y",
            "CreatedBy(x, y)": "x was created by y"
        },
        "Premise": {
            "P1": "∀x (Podcast(x) → ¬Novel(x))",
            "P2": "∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y, america)) → American(x))",
            "P3": "∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))",
            "P4": "American(dani_Shapiro) ∧ Writer(dani_Shapiro)",
            "P5": "WrittenBy(family_History, dani_Shapiro)",
            "P6": "Novel(family_History) ∧ WrittenIn(family_History, yr2003)",
            "P7": "Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)",
            "P8": "City(boston) ∧ American(boston)"
        },
        "Conclusion": "BornIn(dani_Shapiro, boston)",
        "Label": "Uncertain",
        "ori_premises": [
            "A podcast is not a novel.",
            "If a person is born in American City, the person is American.",
            "If a book is a novel and it is written by a person, then the person is a novel writer.",
            "Dani Shapiro is an American writer.",
            "Family History is written by Dani Shapiro.",
            "Family History is a novel written in 2003.",
            "Dani Shapiro created a podcast called Family Secrets.",
            "Boston is an American city."
        ],
        "ori_conclusion": "Dani Shapiro was born in Boston.",
        "metadata": "FOLIO_64",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:A podcast is not a novel.\nFact2:If a person is born in American City, the person is American.\nFact3:If a book is a novel and it is written by a person, then the person is a novel writer.\nFact4:Dani Shapiro is an American writer.\nFact5:Family History is written by Dani Shapiro.\nFact6:Family History is a novel written in 2003.\nFact7:Dani Shapiro created a podcast called Family Secrets.\nFact8:Boston is an American city.\nHypothesis:Dani Shapiro was born in Boston."
    },
    {
        "Symbol Mapping": {
            "Professional(x)": "x is a professional",
            "BasketballPlayer(x)": "x is a basketball player",
            "AmericanNational(x)": "x is an American national",
            "CanDo(x, jumpShot)": "x can do jump shots",
            "LeapStraightIntoAir(x)": "x leaps straight into the air",
            "Activate(x, legMuscle)": "x activates their leg muscles",
            "yuri": "The individual Yuri"
        },
        "Premise": {
            "P1": "∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))",
            "P2": "∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))",
            "P3": "∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))",
            "P4": "∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))",
            "P5": "¬Activate(yuri, legMuscle)"
        },
        "Conclusion": "AmericanNational(yuri)",
        "Label": "Uncertain",
        "ori_premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "ori_conclusion": "Yuri is an American national.",
        "metadata": "FOLIO_456",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Some professional basketball players are not American nationals.\nFact2:All professional basketball players can do jump shots.\nFact3:If someone can jump shots, they leap straight into the air.\nFact4:If someone leaps straight into the air, they activate their leg muscles. \nFact5:Yuri does not activate his leg muscles.\nHypothesis:Yuri is an American national."
    },
    {
        "Symbol Mapping": {
            "Professional(x)": "x is a professional",
            "BasketballPlayer(x)": "x is a basketball player",
            "AmericanNational(x)": "x is an American national",
            "CanDo(x, jumpShot)": "x can perform a jump shot",
            "LeapStraightIntoAir(x)": "x leaps straight into the air",
            "Activate(x, legMuscle)": "x activates their leg muscles",
            "yuri": "The individual Yuri"
        },
        "Premise": {
            "P1": "∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))",
            "P2": "∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))",
            "P3": "∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))",
            "P4": "∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))",
            "P5": "¬Activate(yuri, legMuscle)"
        },
        "Conclusion": "¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))",
        "Label": "True",
        "ori_premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "ori_conclusion": "Yuri is not an American professional basketball player.",
        "metadata": "FOLIO_456",
        "proof_label": "__PROVED__",
        "input": "Fact1:Some professional basketball players are not American nationals.\nFact2:All professional basketball players can do jump shots.\nFact3:If someone can jump shots, they leap straight into the air.\nFact4:If someone leaps straight into the air, they activate their leg muscles. \nFact5:Yuri does not activate his leg muscles.\nHypothesis:Yuri is not an American professional basketball player."
    },
    {
        "Symbol Mapping": {
            "Professional(x)": "x is a professional",
            "BasketballPlayer(x)": "x is a basketball player",
            "AmericanNational(x)": "x is an American national",
            "CanDo(x, jumpShot)": "x can do jump shots",
            "LeapStraightIntoAir(x)": "x leaps straight into the air",
            "Activate(x, legMuscle)": "x activates their leg muscles",
            "yuri": "A specific individual named Yuri"
        },
        "Premise": {
            "P1": "∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))",
            "P2": "∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))",
            "P3": "∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))",
            "P4": "∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))",
            "P5": "¬Activate(yuri, legMuscle)"
        },
        "Conclusion": "AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)",
        "Label": "False",
        "ori_premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "ori_conclusion": "Yuri is an American professional basketball player.",
        "metadata": "FOLIO_456",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Some professional basketball players are not American nationals.\nFact2:All professional basketball players can do jump shots.\nFact3:If someone can jump shots, they leap straight into the air.\nFact4:If someone leaps straight into the air, they activate their leg muscles. \nFact5:Yuri does not activate his leg muscles.\nHypothesis:Yuri is an American professional basketball player."
    },
    {
        "Symbol Mapping": {
            "Professional(x)": "x is a professional",
            "BasketballPlayer(x)": "x is a basketball player",
            "AmericanNational(x)": "x is an American national",
            "CanDo(x, jumpShot)": "x can do a jump shot",
            "LeapStraightIntoAir(x)": "x leaps straight into the air",
            "Activate(x, legMuscle)": "x activates their leg muscles",
            "yuri": "The individual Yuri"
        },
        "Premise": {
            "P1": "∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))",
            "P2": "∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))",
            "P3": "∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))",
            "P4": "∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))",
            "P5": "¬Activate(yuri, legMuscle)"
        },
        "Conclusion": "¬LeapStraightIntoAir(yuri) → (AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))",
        "Label": "False",
        "ori_premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "ori_conclusion": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
        "metadata": "FOLIO_456",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Some professional basketball players are not American nationals.\nFact2:All professional basketball players can do jump shots.\nFact3:If someone can jump shots, they leap straight into the air.\nFact4:If someone leaps straight into the air, they activate their leg muscles. \nFact5:Yuri does not activate his leg muscles.\nHypothesis:If Yuri does not leap straight into the air, then Yuri is an American professional basketball player."
    },
    {
        "Symbol Mapping": {
            "Professional(x)": "x is a professional",
            "BasketballPlayer(x)": "x is a basketball player",
            "AmericanNational(x)": "x is an American national",
            "CanDo(x, jumpShot)": "x can perform a jump shot",
            "LeapStraightIntoAir(x)": "x leaps straight into the air",
            "Activate(x, legMuscle)": "x activates their leg muscles",
            "yuri": "A specific individual named Yuri"
        },
        "Premise": {
            "P1": "∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))",
            "P2": "∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))",
            "P3": "∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))",
            "P4": "∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))",
            "P5": "¬Activate(yuri, legMuscle)"
        },
        "Conclusion": "¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)) → (Professional(yuri) ∧ BasketballPlayer(yuri))",
        "Label": "False",
        "ori_premises": [
            "Some professional basketball players are not American nationals.",
            "All professional basketball players can do jump shots.",
            "If someone can jump shots, they leap straight into the air.",
            "If someone leaps straight into the air, they activate their leg muscles. ",
            "Yuri does not activate his leg muscles."
        ],
        "ori_conclusion": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
        "metadata": "FOLIO_456",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Some professional basketball players are not American nationals.\nFact2:All professional basketball players can do jump shots.\nFact3:If someone can jump shots, they leap straight into the air.\nFact4:If someone leaps straight into the air, they activate their leg muscles. \nFact5:Yuri does not activate his leg muscles.\nHypothesis:If Yuri is not an American professional basketball player, then Yuri is a professional basketball player."
    },
    {
        "Symbol Mapping": {
            "Event(x)": "x is an event",
            "Happy(x)": "x is happy",
            "Sad(x)": "x is sad",
            "⊕": "Exclusive OR (either one or the other, but not both)",
            "∧": "Logical AND (both conditions must be true)",
            "→": "Logical implication (if...then)",
            "∀x": "For all x (universal quantifier)",
            "∃x": "There exists an x (existential quantifier)"
        },
        "Premise": {
            "P1": "∀x (Event(x) → Happy(x) ⊕ Sad(x))",
            "P2": "∃x (Event(x) ∧ Happy(x))"
        },
        "Conclusion": "∀x (Event(x) → Sad(x))",
        "Label": "False",
        "ori_premises": [
            "Events are either happy or sad.",
            "At least one event is happy. "
        ],
        "ori_conclusion": "All events are sad.",
        "metadata": "FOLIO_280",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Events are either happy or sad.\nFact2:At least one event is happy. \nHypothesis:All events are sad."
    },
    {
        "Symbol Mapping": {
            "WinnerOf(x, y, z)": "x is the winner of event y in year z",
            "Participate(x, y, z)": "y participated in event x in year z",
            "OnLeaderBoardOf(x, y)": "x is on the leaderboard of event y",
            "SixWayTie(x)": "x is a six-way tie",
            "In(x, y)": "x is a member of group y",
            "Belgium(x)": "x is from Belgium",
            "From(x, y)": "x is from country y",
            "LeaderBoard(x, y)": "y is on the leaderboard of event x"
        },
        "Premise": {
            "P1": "WinnerOf(steinhauer, duMaurierClassic, year1992)",
            "P2": "Participate(duMaurierClassic, steinhauer, year1992)",
            "P3": "∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x) ∧ In(y, sixWayTie) ∧ Belgium(y))",
            "P4": "From(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)",
            "P5": "∀x (LeaderBoard(duMaurierClassic, x) → Participate(duMaurierClassic, x))"
        },
        "Conclusion": "¬WinnerOf(steinhauer, duMaurierClassic, year1992)",
        "Label": "False",
        "ori_premises": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "ori_conclusion": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "metadata": "FOLIO_140",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:The winner of the 1992 du Maurier Classic was Steinhauer.\nFact2:Steinhauer participated in the 1992 du Maurier Classic.\nFact3:One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nFact4:Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFact5:All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nHypothesis:Steinhauer was not the winner of the 1992 du Maurier Classic."
    },
    {
        "Symbol Mapping": {
            "WinnerOf(x, y, z)": "x is the winner of event y in year z",
            "Participate(x, y, z)": "y participated in event x in year z",
            "OnLeaderBoardOf(x, y)": "x is on the leaderboard of event y",
            "SixWayTie(x)": "x is part of a six-way tie",
            "In(x, y)": "x is a member of group y",
            "Belgium(x)": "x is from Belgium",
            "From(x, y)": "x is from location y",
            "LeaderBoard(x, y)": "y is on the leaderboard of event x"
        },
        "Premise": {
            "P1": "WinnerOf(steinhauer, duMaurierClassic, year1992)",
            "P2": "Participate(duMaurierClassic, steinhauer, year1992)",
            "P3": "∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x) ∧ In(y, sixWayTie) ∧ Belgium(y))",
            "P4": "From(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)",
            "P5": "∀x (LeaderBoard(duMaurierClassic, x) → Participate(duMaurierClassic, x))"
        },
        "Conclusion": "SixWayTie(descampe)",
        "Label": "Uncertain",
        "ori_premises": [
            "The winner of the 1992 du Maurier Classic was Steinhauer.",
            "Steinhauer participated in the 1992 du Maurier Classic.",
            "One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.",
            "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.",
            "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."
        ],
        "ori_conclusion": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "metadata": "FOLIO_140",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:The winner of the 1992 du Maurier Classic was Steinhauer.\nFact2:Steinhauer participated in the 1992 du Maurier Classic.\nFact3:One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nFact4:Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFact5:All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nHypothesis:Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Bark(x)": "x barks",
            "Like(jane, x)": "Jane likes x",
            "Dog(x)": "x is a dog",
            "Jump(x)": "x jumps",
            "Leg(y)": "y is a leg",
            "Have(x, y)": "x has y",
            "Terricolous(x)": "x is terricolous",
            "kiki": "A specific entity named KiKi"
        },
        "Premise": {
            "P1": "∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))",
            "P2": "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
            "P3": "∀x (Animal(x) ∧ Jump(x) → Like(jane, x))",
            "P4": "∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))",
            "P5": "∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P6": "Animal(kiki)",
            "P7": "¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))"
        },
        "Conclusion": "Terricolous(kiki)",
        "Label": "Uncertain",
        "ori_premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "ori_conclusion": "KiKi is terricolous.",
        "metadata": "FOLIO_459",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Jane does not like any animals that bark.\nFact2:All dogs are animals that bark.\nFact3:Jane likes all animals that jump.\nFact4:If an animal has legs, then it jumps.\nFact5:If an animal is terricolous, then it has legs. \nFact6:KiKi is an animal.\nFact7:If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nHypothesis:KiKi is terricolous."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Bark(x)": "x barks",
            "Like(jane, x)": "Jane likes x",
            "Dog(x)": "x is a dog",
            "Jump(x)": "x jumps",
            "Leg(y)": "y is a leg",
            "Have(x, y)": "x has y",
            "Terricolous(x)": "x is terricolous",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "∨": "Logical disjunction (or)",
            "→": "Logical implication (if...then)",
            "∀x": "For all x (universal quantifier)",
            "∃y": "There exists y (existential quantifier)"
        },
        "Premise": {
            "P1": "∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))",
            "P2": "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
            "P3": "∀x (Animal(x) ∧ Jump(x) → Like(jane, x))",
            "P4": "∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))",
            "P5": "∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P6": "Animal(kiki)",
            "P7": "¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))"
        },
        "Conclusion": "Bark(kiki) ∧ Dog(kiki)",
        "Label": "False",
        "ori_premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "ori_conclusion": "KiKi is a barking dog.",
        "metadata": "FOLIO_459",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Jane does not like any animals that bark.\nFact2:All dogs are animals that bark.\nFact3:Jane likes all animals that jump.\nFact4:If an animal has legs, then it jumps.\nFact5:If an animal is terricolous, then it has legs. \nFact6:KiKi is an animal.\nFact7:If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nHypothesis:KiKi is a barking dog."
    },
    {
        "Symbol Mapping": {
            "Animal(x)": "x is an animal",
            "Bark(x)": "x barks",
            "Like(jane, x)": "Jane likes x",
            "Dog(x)": "x is a dog",
            "Jump(x)": "x jumps",
            "Leg(y)": "y is a leg",
            "Have(x, y)": "x has y",
            "Terricolous(x)": "x is terricolous",
            "¬": "Logical negation (not)",
            "∧": "Logical conjunction (and)",
            "∨": "Logical disjunction (or)",
            "→": "Logical implication (if...then)",
            "∀x": "For all x (universal quantifier)",
            "∃y": "There exists a y (existential quantifier)"
        },
        "Premise": {
            "P1": "∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))",
            "P2": "∀x (Dog(x) → Animal(x) ∧ Bark(x))",
            "P3": "∀x (Animal(x) ∧ Jump(x) → Like(jane, x))",
            "P4": "∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))",
            "P5": "∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))",
            "P6": "Animal(kiki)",
            "P7": "¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))"
        },
        "Conclusion": "¬Bark(kiki) ∧ ¬Dog(kiki)",
        "Label": "True",
        "ori_premises": [
            "Jane does not like any animals that bark.",
            "All dogs are animals that bark.",
            "Jane likes all animals that jump.",
            "If an animal has legs, then it jumps.",
            "If an animal is terricolous, then it has legs. ",
            "KiKi is an animal.",
            "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."
        ],
        "ori_conclusion": "KiKi does not bark and he is not a dog.",
        "metadata": "FOLIO_459",
        "proof_label": "__PROVED__",
        "input": "Fact1:Jane does not like any animals that bark.\nFact2:All dogs are animals that bark.\nFact3:Jane likes all animals that jump.\nFact4:If an animal has legs, then it jumps.\nFact5:If an animal is terricolous, then it has legs. \nFact6:KiKi is an animal.\nFact7:If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nHypothesis:KiKi does not bark and he is not a dog."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, y)": "x was born in year y",
            "CommonlyKnownAs(x, y)": "x is commonly known as y",
            "FootballPlayer(x)": "x is a football player",
            "LoanedTo(x, y)": "x was loaned to y",
            "Brazilian(x)": "x is Brazilian",
            "Footballplayer(x)": "x is a football player (alternate predicate for FootballPlayer)",
            "PlayFor(x, y)": "x plays for the football club y",
            "FootballClub(x)": "x is a football club"
        },
        "Premise": {
            "P1": "BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)",
            "P2": "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
            "P3": "Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)",
            "P4": "FootballClub(nautico) ∧ FootballClub(braga)",
            "P5": "FootballClub(fluminense)"
        },
        "Conclusion": "∀x (PlayFor(x, nautico) → ¬Brazilian(x))",
        "Label": "False",
        "ori_premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for Náutico.",
            "Náutico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "ori_conclusion": "No one playing for Nautico is Brazilian.",
        "metadata": "FOLIO_101",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Ailton Silva, born in 1995, is commonly known as Ailton.\nFact2:Ailton is a football player who was loaned out to Braga.\nFact3:Ailton Silva is a Brazilian footballer who plays for Náutico.\nFact4:Náutico is a football club along with Braga.\nFact5:Fluminense is a football club.\nHypothesis:No one playing for Nautico is Brazilian."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, y)": "x was born in year y",
            "CommonlyKnownAs(x, y)": "x is commonly known as y",
            "FootballPlayer(x)": "x is a football player",
            "LoanedTo(x, y)": "x was loaned to y",
            "Brazilian(x)": "x is Brazilian",
            "Footballplayer(x)": "x is a football player (alternative predicate for FootballPlayer)",
            "PlayFor(x, y)": "x plays for y",
            "FootballClub(x)": "x is a football club"
        },
        "Premise": {
            "P1": "BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)",
            "P2": "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
            "P3": "Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)",
            "P4": "FootballClub(nautico) ∧ FootballClub(braga)",
            "P5": "FootballClub(fluminense)"
        },
        "Conclusion": "∀x (FootballClub(x) → ¬PlayFor(ailtonSilva, x))",
        "Label": "False",
        "ori_premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for Náutico.",
            "Náutico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "ori_conclusion": "Ailton Silva does not play for a football club.",
        "metadata": "FOLIO_101",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Ailton Silva, born in 1995, is commonly known as Ailton.\nFact2:Ailton is a football player who was loaned out to Braga.\nFact3:Ailton Silva is a Brazilian footballer who plays for Náutico.\nFact4:Náutico is a football club along with Braga.\nFact5:Fluminense is a football club.\nHypothesis:Ailton Silva does not play for a football club."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, y)": "x was born in year y",
            "CommonlyKnownAs(x, y)": "x is commonly known as y",
            "FootballPlayer(x)": "x is a football player",
            "LoanedTo(x, y)": "x was loaned to y",
            "Brazilian(x)": "x is Brazilian",
            "Footballplayer(x)": "x is a football player (alternative spelling)",
            "PlayFor(x, y)": "x plays for y",
            "FootballClub(x)": "x is a football club"
        },
        "Premise": {
            "P1": "BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)",
            "P2": "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
            "P3": "Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)",
            "P4": "FootballClub(nautico) ∧ FootballClub(braga)",
            "P5": "FootballClub(fluminense)"
        },
        "Conclusion": "∀x (FootballClub(x) → ¬LoanedTo(ailton, x))",
        "Label": "False",
        "ori_premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for Náutico.",
            "Náutico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "ori_conclusion": "Ailton was not loaned out to a football club.",
        "metadata": "FOLIO_101",
        "proof_label": "__DISPROVED__",
        "input": "Fact1:Ailton Silva, born in 1995, is commonly known as Ailton.\nFact2:Ailton is a football player who was loaned out to Braga.\nFact3:Ailton Silva is a Brazilian footballer who plays for Náutico.\nFact4:Náutico is a football club along with Braga.\nFact5:Fluminense is a football club.\nHypothesis:Ailton was not loaned out to a football club."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, y)": "x was born in year y",
            "CommonlyKnownAs(x, y)": "x is commonly known as y",
            "FootballPlayer(x)": "x is a football player",
            "LoanedTo(x, y)": "x was loaned to y",
            "Brazilian(x)": "x is Brazilian",
            "Footballplayer(x)": "x is a football player (alternate predicate)",
            "PlayFor(x, y)": "x plays for y",
            "FootballClub(x)": "x is a football club"
        },
        "Premise": {
            "P1": "BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)",
            "P2": "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
            "P3": "Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)",
            "P4": "FootballClub(nautico) ∧ FootballClub(braga)",
            "P5": "FootballClub(fluminense)"
        },
        "Conclusion": "PlayFor(ailtonSilva, fluminense)",
        "Label": "Uncertain",
        "ori_premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for Náutico.",
            "Náutico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "ori_conclusion": "Ailton Silva played for Fluminense.",
        "metadata": "FOLIO_101",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Ailton Silva, born in 1995, is commonly known as Ailton.\nFact2:Ailton is a football player who was loaned out to Braga.\nFact3:Ailton Silva is a Brazilian footballer who plays for Náutico.\nFact4:Náutico is a football club along with Braga.\nFact5:Fluminense is a football club.\nHypothesis:Ailton Silva played for Fluminense."
    },
    {
        "Symbol Mapping": {
            "BornIn(x, y)": "x was born in year y",
            "CommonlyKnownAs(x, y)": "x is commonly known as y",
            "FootballPlayer(x)": "x is a football player",
            "LoanedTo(x, y)": "x was loaned to y",
            "Brazilian(x)": "x is Brazilian",
            "Footballplayer(x)": "x is a football player (alternate predicate)",
            "PlayFor(x, y)": "x plays for y",
            "FootballClub(x)": "x is a football club",
            "∃x (FootballClub(x) ∧ LoanedTo(ailtonSilva, x))": "There exists an x such that x is a football club and Ailton Silva was loaned to x"
        },
        "Premise": {
            "P1": "BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)",
            "P2": "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)",
            "P3": "Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)",
            "P4": "FootballClub(nautico) ∧ FootballClub(braga)",
            "P5": "FootballClub(fluminense)"
        },
        "Conclusion": "∃x (FootballClub(x) ∧ LoanedTo(ailtonSilva, x))",
        "Label": "Uncertain",
        "ori_premises": [
            "Ailton Silva, born in 1995, is commonly known as Ailton.",
            "Ailton is a football player who was loaned out to Braga.",
            "Ailton Silva is a Brazilian footballer who plays for Náutico.",
            "Náutico is a football club along with Braga.",
            "Fluminense is a football club."
        ],
        "ori_conclusion": "Ailton Silva was loaned out to a football club.",
        "metadata": "FOLIO_101",
        "proof_label": "__UNKNOWN__",
        "input": "Fact1:Ailton Silva, born in 1995, is commonly known as Ailton.\nFact2:Ailton is a football player who was loaned out to Braga.\nFact3:Ailton Silva is a Brazilian footballer who plays for Náutico.\nFact4:Náutico is a football club along with Braga.\nFact5:Fluminense is a football club.\nHypothesis:Ailton Silva was loaned out to a football club."
    }
]